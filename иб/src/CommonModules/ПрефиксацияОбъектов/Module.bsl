#Область УстановкаПрефиксовСправочниковИДокументов

// Устанавливает префикс источника подписки в соответствии с префиксом информационной базы.
// Ограничения на реквизиты источника не накладываются.
//
// Параметры:
//  Источник - Источник события подписки.
//             Любой объект из множества [Справочник, План видов характеристик].
// СтандартнаяОбработка - Булево - флаг стандартной обработки подписки.
// Префикс - Строка - префикс объекта, который нужно изменить.
Процедура УстановитьПрефиксИнформационнойБазы(Источник, СтандартнаяОбработка, Префикс) Экспорт
	
	УстановитьПрефикс(Источник, Префикс, Истина, Ложь);
	
КонецПроцедуры

// Устанавливает префикс источника подписки в соответствии с префиксом информационной базы и префиксом фермы.
// Источник подписки должен содержать
// обязательный реквизит шапки "Ферма", тип: "СправочникСсылка.Фермы".
//
// Параметры:
//  Источник - Источник события подписки.
//             Любой объект из множества [Документ].
// СтандартнаяОбработка - Булево - флаг стандартной обработки подписки.
// Префикс - Строка - префикс объекта, который нужно изменить.
Процедура УстановитьПрефиксИнформационнойБазыИФермы(Источник, СтандартнаяОбработка, Префикс) Экспорт
	
	УстановитьПрефикс(Источник, Префикс, Истина, Истина);
	
КонецПроцедуры

// Выполняет установку префикса.
//
// Параметры:
//	Источник - объект, для которого необходимо установить префикс.
//	Префикс - префикс, который будет использоваться для генерации кода.
//	УстановитьПрефиксИнформационнойБазы - флаг необходимости установки префикса информационной базы.
//	УстановитьПрефиксФермы - флаг необходимости установки префикса фермы.
Процедура УстановитьПрефикс(Источник, Префикс, УстановитьПрефиксИнформационнойБазы, УстановитьПрефиксФермы)
	
	ПрефиксИнформационнойБазы = "";
	ПрефиксФермы        = "";
	
	Если УстановитьПрефиксИнформационнойБазы тогда
				
		ПрефиксИнформационнойБазы = Константы.сжсвПрефиксУзлаРИБ.Получить();
		
		ДополнитьСтрокуНулямиСлева(ПрефиксИнформационнойБазы, 2);
		
	КонецЕсли;
	
	Если УстановитьПрефиксФермы тогда
		
		Если РеквизитФермаДоступен(Источник) Тогда
			
			ПрефиксФермы = Источник.Ферма.Префикс;
									
		КонецЕсли;
		
		ДополнитьСтрокуНулямиСлева(ПрефиксФермы, 2);
		
	КонецЕсли;
	
	ОсновнойПрефикс = ПрефиксИнформационнойБазы + ПрефиксФермы;
	если ЗначениеЗаполнено(ОсновнойПрефикс) тогда
		ОсновнойПрефикс = ОсновнойПрефикс + "-";
	КонецЕсли;
	
	Префикс = ОсновнойПрефикс;
	
КонецПроцедуры

// Добавляет к полученной строке необходимое количество символов "0".
//
// Параметры:
//	Строка - редактируемая строка.
//	ДлинаСтроки - длина итоговой строки.
Процедура ДополнитьСтрокуНулямиСлева(Строка, ДлинаСтроки)
	
	Строка = ОбщегоНазначенияСервер.ДополнитьСтроку(Строка, ДлинаСтроки, "0", "Слева");
	
КонецПроцедуры

// Определяет имеется ли у полученного объекта реквизит Ферма.
//
// Параметры:
//	Объект - проверяемый объект (справочник, документ).
//
// Возврат:
//	Переменная типа булево, флаг наличия реквизита ферма у объекта.
Функция РеквизитФермаДоступен(Объект)
	
	МетаданныеОбъекта = Объект.Метаданные();
	РеквизитФерма = МетаданныеОбъекта.Реквизиты.Найти("Ферма");
	если РеквизитФерма = Неопределено тогда
		Возврат (ложь);
	иначе
		Возврат (истина);
	КонецЕсли;
	
КонецФункции

// Выполняет проверку модифицированности Даты и Фермы документа.
// Если дата не входит в предыдущий период или изменен реквизит Ферма, то номер документа обнуляется.
// Это необходимо для назначения нового номера документу.
//
// Параметры:
//  Источник - ДокументОбъект - источник события подписки.
//  Отказ    - Булево - флаг отказа.
Процедура ПроверитьНомерДокументаПоДатеИФерме(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	ИначеЕсли Источник.ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	если ОбщегоНазначенияСервер.ЕстьРеквизитОбъекта("Ферма", Источник.Метаданные()) тогда
		если ПрефиксацияОбъектов.ДатаИлиФермаОбъектаИзменена(Источник.Ссылка, Источник.Дата, Источник.Ферма, Источник.Метаданные().ПолноеИмя()) Тогда
			Источник.Номер = "";
		КонецЕсли;
	иначе
		если ПрефиксацияОбъектов.ДатаОбъектаИзменена(Источник.Ссылка, Источник.Дата, Источник.Метаданные().ПолноеИмя()) Тогда
			Источник.Номер = "";
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает признак изменения фермы или даты объекта.
//
// Параметры:
//  Ссылка – ссылка на объект ИБ.
//  ДатаПослеИзменения – дата объекта после изменения.
//  ФермаПослеИзменения – ферма объекта после изменения.
// 
//  Возвращаемое значение:
//   Тип: Булево. Истина – ферма объекта была изменена или новая дата объекта. 
// задана в другом интервале периодичности по сравнению с предыдущим значением даты.
// Ложь – ферма и дата документа не были изменены.
Функция ДатаИлиФермаОбъектаИзменена(Ссылка, Знач ДатаПослеИзменения, Знач ФермаПослеИзменения, ПолноеИмяТаблицы) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ШапкаОбъекта.Дата                                КАК ДатаДоИзменения,
	|	ШапкаОбъекта.Ферма КАК ФермаДоИзменения
	|ИЗ
	|	" + ПолноеИмяТаблицы + " КАК ШапкаОбъекта
	|ГДЕ
	|	ШапкаОбъекта.Ссылка = &Ссылка
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат НЕ Выборка.ФермаДоИзменения = ФермаПослеИзменения
		ИЛИ Не ДатыОбъектаОдногоПериода(Выборка.ДатаДоИзменения, ДатаПослеИзменения, Ссылка);
	//
КонецФункции

// Возвращает признак изменения даты объекта.
//
// Параметры:
//  Ссылка – ссылка на объект ИБ.
//  ДатаПослеИзменения – дата объекта после изменения.
// 
//  Возвращаемое значение:
//   Тип: Булево. Истина – ферма объекта была изменена или новая дата объекта 
// задана в другом интервале периодичности по сравнению с предыдущим значением даты.
// Ложь – ферма и дата документа не были изменены.
Функция ДатаОбъектаИзменена(Ссылка, Знач ДатаПослеИзменения, ПолноеИмяТаблицы) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ШапкаОбъекта.Дата                                КАК ДатаДоИзменения	
	|ИЗ
	|	" + ПолноеИмяТаблицы + " КАК ШапкаОбъекта
	|ГДЕ
	|	ШапкаОбъекта.Ссылка = &Ссылка
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат НЕ ДатыОбъектаОдногоПериода(Выборка.ДатаДоИзменения, ДатаПослеИзменения, Ссылка);
	//
КонецФункции

// Определяет признак равенства двух дат для объекта метаданных.
// Даты считаются равными, если они принадлежат одному периоду времени: Год, Месяц, День и пр.
//
// Параметры:
// Дата1 – первая дата для сравнения;
// Дата2 – вторая дата для сравнения;
// МетаданныеОбъекта – метаданные объекта, для которого необходимо получить значение функции.
// 
//  Возвращаемое значение:
//  Тип: Булево. Истина – даты объекта одного периода; Ложь – даты объекта разных периодов.
Функция ДатыОбъектаОдногоПериода(Знач Дата1, Знач Дата2, Ссылка) Экспорт
	
	МетаданныеОбъекта = Ссылка.Метаданные();
	
	Если ПериодичностьНомераДокументаГод(МетаданныеОбъекта) Тогда
		
		РазностьДат = НачалоГода(Дата1) - НачалоГода(Дата2);
		
	ИначеЕсли ПериодичностьНомераДокументаКвартал(МетаданныеОбъекта) Тогда
		
		РазностьДат = НачалоКвартала(Дата1) - НачалоКвартала(Дата2);
		
	ИначеЕсли ПериодичностьНомераДокументаМесяц(МетаданныеОбъекта) Тогда
		
		РазностьДат = НачалоМесяца(Дата1) - НачалоМесяца(Дата2);
		
	ИначеЕсли ПериодичностьНомераДокументаДень(МетаданныеОбъекта) Тогда
		
		РазностьДат = НачалоДня(Дата1) - НачалоДня(Дата2);
		
	Иначе // ПериодичностьНомераДокументаНеопределено
		
		РазностьДат = 0;
		
	КонецЕсли;
	
	Возврат РазностьДат = 0;
	
КонецФункции

// Проверяет соответствует или нет периодичность заданного документа периоду Год.
//
// Параметры:
//	МетаданныеОбъекта - метаданные проверяемого объекта.
//
// Возврат:
//	Тип: булево. Флаг соответствия метаданных требуемому периоду.
Функция ПериодичностьНомераДокументаГод(МетаданныеОбъекта)
	
	Возврат МетаданныеОбъекта.ПериодичностьНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Год;
	
КонецФункции

// Проверяет соответствует или нет периодичность заданного документа периоду Квартал.
//
// Параметры:
//	МетаданныеОбъекта - метаданные проверяемого объекта.
//
// Возврат:
//	Тип: булево. Флаг соответствия метаданных требуемому периоду.
Функция ПериодичностьНомераДокументаКвартал(МетаданныеОбъекта)
	
	Возврат МетаданныеОбъекта.ПериодичностьНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Квартал;
	
КонецФункции

// Проверяет соответствует или нет периодичность заданного документа периоду Месяц.
//
// Параметры:
//	МетаданныеОбъекта - метаданные проверяемого объекта.
//
// Возврат:
//	Тип: булево. Флаг соответствия метаданных требуемому периоду.
Функция ПериодичностьНомераДокументаМесяц(МетаданныеОбъекта)
	
	Возврат МетаданныеОбъекта.ПериодичностьНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Месяц;
	
КонецФункции

// Проверяет соответствует или нет периодичность заданного документа периоду День.
//
// Параметры:
//	МетаданныеОбъекта - метаданные проверяемого объекта.
//
// Возврат
//	Тип: булево. Флаг соответствия метаданных требуемому периоду.
Функция ПериодичностьНомераДокументаДень(МетаданныеОбъекта)
	
	Возврат МетаданныеОбъекта.ПериодичностьНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.День;
	
КонецФункции

// Получает номер документа для вывода на печать; из номера удаляются префиксы и лидирующие нули
// Функция:
// отбрасывает префикс организации,
// отбрасывает префикс информационной базы,
// удаляет лидирующие нули в номере объекта.
Функция ПолучитьНомерНаПечать(Знач НомерОбъекта) Экспорт
	
	// удаляем префикс организации и префикс информационной базы из номера объекта
	НомерОбъекта = УдалитьПрефиксыИзНомераОбъекта(НомерОбъекта);
	
	// удаляем лидирующие нули из номера объекта
	НомерОбъекта = УдалитьЛидирующиеНулиИзНомераОбъекта(НомерОбъекта);
	
	Возврат НомерОбъекта;
	
КонецФункции

// Возвращает номер объекта информационной базы без учета префикса.
//
// Параметры:
//	НомерОбъекта - исходный номер объекта информационной базы.
//
// Возврат:
//	Номер объекта без префикса.
Функция УдалитьПрефиксыИзНомераОбъекта (НомерОбъекта)
	
	ПозицияРазделителя = Найти (НомерОбъекта, "-");
	если ПозицияРазделителя = 0 тогда
		Возврат (НомерОбъекта);
	иначеЕсли ПозицияРазделителя > 5 тогда
		// Разделитель не должен быть "дальше" 5 элемента
		Возврат (НомерОбъекта);
	иначе
		Возврат (Прав(НомерОбъекта, (СтрДлина(НомерОбъекта)-ПозицияРазделителя)));
	КонецЕсли;
	
КонецФункции

// Возвращает номер объекта информационной базы без лидирующих нулей.
//
// Параметры:
//	НомерОбъекта - исходный номер объекта информационной базы.
//
// Возврат:
//	Номер объекта без лидирующих нолей.
Функция УдалитьЛидирующиеНулиИзНомераОбъекта(НомерОбъекта)
	
	КоличествоНулей = 0;
	для сч = 1 по СтрДлина(НомерОбъекта) цикл
		если Сред(НомерОбъекта, сч, 1) = "0" тогда
			КоличествоНулей = КоличествоНулей + 1;
		иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	если КоличествоНулей = 0 тогда
		Возврат (НомерОбъекта);
	иначе
		Возврат (Прав(НомерОбъекта, (СтрДлина(НомерОбъекта)-КоличествоНулей)));
	КонецЕсли;
		
КонецФункции

#КонецОбласти
		
		


