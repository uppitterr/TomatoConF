#Область ЭкспортныеПроцедурыИФункции

// Обработчик команд обращения к дополнительным отчетам и обработкам.
// Открывает форму с доступными командами и передает ей объекты назначения
// и вид обработок.
//
// Параметры:
//  ПараметрКоманды - Массив - объекты информационной базы, для которых была вызвана команда.
//  ПараметрыВыполненияКоманды - ДанныеФормыСтруктура -параметры выполнения команды.
//  Вид - строка - строковое представление вида обработки.
//  ИмяРаздела - строка - имя раздела для фильтрации обработок,
//						 указывается только для глобальных обработок.
Процедура ОткрытьФормуКомандДополнительныхОтчетовИОбработок(ПараметрКоманды,
	ПараметрыВыполненияКоманды, Вид, ИмяРаздела = "") Экспорт
	
	ПараметрКомандыСписок = Новый СписокЗначений;
	
	Если ТипЗнч(ПараметрКоманды) = Тип("Массив") Тогда // назначаемая обработка
		ПараметрКомандыСписок.ЗагрузитьЗначения(ПараметрКоманды);
	КонецЕсли;
	
	Параметры = Новый Структура("ОбъектыНазначения,Вид,ИмяРаздела",
		ПараметрКомандыСписок, Вид,	ИмяРаздела);
	
	Если ТипЗнч(ПараметрКоманды) = Тип("Массив") Тогда // назначаемая обработка
		Параметры.Вставить("ИмяФормы", ПараметрыВыполненияКоманды.Источник.ИмяФормы);
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.ДополнительныеОтчетыИОбработки", Параметры,
		ПараметрыВыполненияКоманды.Источник);
	
КонецПроцедуры

// Используется для управления вызовами внешних отчетов и обработок.
// В зависимости от варианта запуска обработки либо открывает форму обработки,
// либо вызывает клиентский метод формы либо передает управление на сервер
// для последующего вызова обработки на сервере. Так же отвечает за
// отображения оповещения и оповещения об измененных объектах.
//
// Параметры:
//  ВнешняяОбработка - СправочникСсылка.ДополнительныеОтчетыИОбработки.
//  ВидОбработки - Строка - строковое представление вида обработки.
//  ИдентификаторКоманды - Строка - идентификатор команды.
//  БезопасныйРежим - Булево - требуется ли использовать обработку в безопасном режиме.
//  ВариантЗапуска - ПеречислениеСсылка.СпособыВызоваДополнительныхОбработок - вариант запуска обработки.
//  ПоказыватьОповещение - Булево - требуется ли показывать оповещение о начале и окончании
//							выполнения обработки. Не используется если ВариантЗапуска задан как ОткрытиеФормы.
//  Модификатор - Строка - модификатор команды, используется для печатных форм на основе макетов табличных документов.
//  ОбъектыНазначенияМассив - Массив - ссылки на объекты информационной базы.
Процедура ВыполнитьОбработку(ВнешняяОбработка,
	ВидОбработки, ИдентификаторКоманды, БезопасныйРежим, ВариантЗапуска, ПоказыватьОповещение,
	Модификатор, ОбъектыНазначенияМассив, Отказ = Ложь) Экспорт
	
	Если ВариантЗапуска = ВариантЗапускаОткрытиеФормы() Тогда
		
		ВыполнитьОткрытиеФормыОбработки(ВнешняяОбработка, ВидОбработки,	ИдентификаторКоманды,
			БезопасныйРежим, ОбъектыНазначенияМассив);
		
	ИначеЕсли ВариантЗапуска = ВариантЗапускаВызовКлиентскогоМетода() Тогда
		
		ВыполнитьКлиентскийМетодОбработки(ВнешняяОбработка,	ВидОбработки, ИдентификаторКоманды,
			БезопасныйРежим, ПоказыватьОповещение, ОбъектыНазначенияМассив);
		
	ИначеЕсли ВариантЗапуска = ВариантЗапускаВызовСерверногоМетода() Тогда
		
		ВыполнитьСерверныйМетодОбработки(ВнешняяОбработка, ВидОбработки, ИдентификаторКоманды,
			БезопасныйРежим, ПоказыватьОповещение, Модификатор, ОбъектыНазначенияМассив, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

// Возвращает признак принадлежности вида к внешним отчетам или обработкам.
Функция ЭтоГлобальнаяОбработка(Вид)
	
	Возврат (Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка())
		ИЛИ (Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительныйОтчет());
	
КонецФункции

// Выполняет открытие формы обработки.
Процедура ВыполнитьОткрытиеФормыОбработки(
							ВнешняяОбработка,
							ВидОбработки,
							ИдентификаторКоманды,
							БезопасныйРежим,
							ОбъектыНазначенияМассив)
	
		ИмяОбработки = ДополнительныеОтчетыИОбработки.ПодключитьВнешнююОбработку(ВнешняяОбработка);
		
		ПараметрыОбработки = Новый Структура("ИдентификаторКоманды,ДополнительнаяОбработкаСсылка");
		ПараметрыОбработки.ИдентификаторКоманды = ИдентификаторКоманды;
		ПараметрыОбработки.ДополнительнаяОбработкаСсылка = ВнешняяОбработка;
		
		Если НЕ ЭтоГлобальнаяОбработка(ВидОбработки) Тогда
			ПараметрыОбработки.Вставить("ОбъектыНазначения", ОбъектыНазначенияМассив);
		КонецЕсли;
		
		Если ВидОбработки = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиОтчет()
			ИЛИ ВидОбработки = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительныйОтчет() Тогда
			ОткрытьФорму("ВнешнийОтчет."+ ИмяОбработки +".Форма", ПараметрыОбработки);
		Иначе
			ОткрытьФорму("ВнешняяОбработка."+ ИмяОбработки +".Форма", ПараметрыОбработки);
		КонецЕсли;
	
КонецПроцедуры

// Выполняет запуск клиентского метода обработки.
Процедура ВыполнитьКлиентскийМетодОбработки(
							ВнешняяОбработка,
							ВидОбработки,
							ИдентификаторКоманды,
							БезопасныйРежим,
							ПоказыватьОповещение,
							ОбъектыНазначенияМассив)
	
		Если ПоказыватьОповещение Тогда
			ПоказатьОповещениеПользователя(НСтр("ru='Обработка выполняется...';en='Обработка выполняется...'"));
		КонецЕсли;
		
		ИмяОбработки = ДополнительныеОтчетыИОбработки.ПодключитьВнешнююОбработку(ВнешняяОбработка);
		
		ПараметрыОбработки = Новый Структура("ИдентификаторКоманды,ДополнительнаяОбработкаСсылка");
		ПараметрыОбработки.ИдентификаторКоманды = ИдентификаторКоманды;
		ПараметрыОбработки.ДополнительнаяОбработкаСсылка = ВнешняяОбработка;
		
		Если НЕ ЭтоГлобальнаяОбработка(ВидОбработки) Тогда
			ПараметрыОбработки.Вставить("ОбъектыНазначения", ОбъектыНазначенияМассив);
		КонецЕсли;
		
		Если ВидОбработки = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиОтчет()
			ИЛИ ВидОбработки = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительныйОтчет() Тогда
			ФормаОбработки = ПолучитьФорму("ВнешнийОтчет."+ ИмяОбработки +".Форма", ПараметрыОбработки);
		Иначе
			ФормаОбработки = ПолучитьФорму("ВнешняяОбработка."+ ИмяОбработки +".Форма", ПараметрыОбработки);
		КонецЕсли;
		
		Если ВидОбработки = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка()
		ИЛИ ВидОбработки = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительныйОтчет() Тогда
			
			ФормаОбработки.ВыполнитьКоманду(ИдентификаторКоманды);
			
		ИначеЕсли ВидОбработки = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиСозданиеСвязанныхОбъектов() Тогда
			
			СозданныеОбъекты = Новый Массив;
			
			ФормаОбработки.ВыполнитьКоманду(ИдентификаторКоманды, ОбъектыНазначенияМассив, СозданныеОбъекты);
			
			ТипыСозданныхОбъектов = Новый Массив;
			
			Для Каждого СозданныйОбъект Из СозданныеОбъекты Цикл
				Тип = ТипЗнч(СозданныйОбъект);
				Если ТипыСозданныхОбъектов.Найти(Тип) = Неопределено Тогда
					ТипыСозданныхОбъектов.Добавить(Тип);
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого Тип Из ТипыСозданныхОбъектов Цикл
				ОповеститьОбИзменении(Тип);
			КонецЦикла;
			
		ИначеЕсли ВидОбработки = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиПечатнаяФорма() Тогда
			
			Попытка
				ФормаОбработки.Печать(ИдентификаторКоманды, ОбъектыНазначенияМассив);
			Исключение
				ОбщегоНазначенияСервер.СообщитьПользователю(ОписаниеОшибки());
			КонецПопытки;
					
		ИначеЕсли ВидОбработки = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиЗаполнениеОбъекта() Тогда
			
			ФормаОбработки.ВыполнитьКоманду(ИдентификаторКоманды, ОбъектыНазначенияМассив);
			
			ТипыИзмененныхОбъектов = Новый Массив;
			
			Для Каждого ИзмененныйОбъект Из ОбъектыНазначенияМассив Цикл
				Тип = ТипЗнч(ИзмененныйОбъект);
				Если ТипыИзмененныхОбъектов.Найти(Тип) = Неопределено Тогда
					ТипыИзмененныхОбъектов.Добавить(Тип);
				КонецЕсли;
			КонецЦикла;
		
			Для Каждого Тип Из ТипыИзмененныхОбъектов Цикл
				ОповеститьОбИзменении(Тип);
			КонецЦикла;
			
		ИначеЕсли ВидОбработки = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиОтчет() Тогда
			
			ФормаОбработки.ВыполнитьКоманду(ИдентификаторКоманды, ОбъектыНазначенияМассив);
			
		КонецЕсли;
		
		Если ПоказыватьОповещение Тогда
			ПоказатьОповещениеПользователя(НСтр("ru='Обработка завершена...';en='Обработка завершена...'"));
		КонецЕсли;
	
КонецПроцедуры

// Выполняет запуск серверного метода обработки.
Процедура ВыполнитьСерверныйМетодОбработки(
							ВнешняяОбработка,
							ВидОбработки,
							ИдентификаторКоманды,
							БезопасныйРежим,
							ПоказыватьОповещение,
							Модификатор,
							ОбъектыНазначенияМассив,
							Отказ)
	
		Если ПоказыватьОповещение Тогда
			ПоказатьОповещениеПользователя(НСтр("ru='Обработка выполняется...';en='Обработка выполняется...'"));
		КонецЕсли;
		
		Если ВидОбработки = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка()
		 ИЛИ ВидОбработки = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительныйОтчет() Тогда
			
			ДополнительныеОтчетыИОбработки.ВыполнитьОбработкуНепосредственно(ВнешняяОбработка, ИдентификаторКоманды, БезопасныйРежим);
			
		ИначеЕсли ВидОбработки = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиСозданиеСвязанныхОбъектов() Тогда
			
			ТипыСозданныхОбъектов = Новый Массив;
			
			ДополнительныеОтчетыИОбработки.ВыполнитьОбработкуНепосредственно(ВнешняяОбработка, ИдентификаторКоманды, БезопасныйРежим, ОбъектыНазначенияМассив, ТипыСозданныхОбъектов);
			
			Для Каждого Тип Из ТипыСозданныхОбъектов Цикл
				ОповеститьОбИзменении(Тип);
			КонецЦикла;
			
		ИначеЕсли ВидОбработки = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиПечатнаяФорма()
			И Модификатор = "ПечатьMXL" Тогда
			
			ПараметрыИсточника = Новый Структура;
			ПараметрыИсточника.Вставить("ИдентификаторКоманды", ИдентификаторКоманды);
			ПараметрыИсточника.Вставить("ОбъектыНазначения", ОбъектыНазначенияМассив);
			ПараметрыИсточника.Вставить("БезопасныйРежим", БезопасныйРежим);
			
			ПараметрыОткрытия = Новый Структура("ИсточникДанных,ПараметрыИсточника");
			ПараметрыОткрытия.ИсточникДанных = ВнешняяОбработка;
			ПараметрыОткрытия.ПараметрыИсточника = ПараметрыИсточника;
			
			Если УправлениеПечатьюКлиент.ПроверитьДокументыПроведены(ОбъектыНазначенияМассив) Тогда
				ОткрытьФорму("ОбщаяФорма.сжсвПечатьДокументов", ПараметрыОткрытия);
			Иначе
				Отказ = Истина;
			КонецЕсли;
			
		ИначеЕсли ВидОбработки = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиЗаполнениеОбъекта() Тогда
			
			ИзмененныеОбъекты = Новый Массив;
			
			ДополнительныеОтчетыИОбработки.ВыполнитьОбработкуНепосредственно(ВнешняяОбработка, ИдентификаторКоманды, БезопасныйРежим, ОбъектыНазначенияМассив, ИзмененныеОбъекты);
			
			Для Каждого Тип Из ИзмененныеОбъекты Цикл
				ОповеститьОбИзменении(Тип);
			КонецЦикла;
			
		ИначеЕсли ВидОбработки = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиПечатнаяФорма()
		 ИЛИ ВидОбработки = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиОтчет() Тогда
			
			ДополнительныеОтчетыИОбработки.ВыполнитьОбработкуНепосредственно(ВнешняяОбработка, ИдентификаторКоманды, БезопасныйРежим, ОбъектыНазначенияМассив);
			
		КонецЕсли;
		
		Если ПоказыватьОповещение Тогда
			ПоказатьОповещениеПользователя(НСтр("ru='Обработка завершена...';en='Обработка завершена...'"));
		КонецЕсли;
	
КонецПроцедуры

// Возвращает ключ варината запуска: вызов клиентского метода. 
Функция ВариантЗапускаВызовКлиентскогоМетода()
	
	Возврат "ВызовКлиентскогоМетода";
	
КонецФункции

// Возвращает ключ варината запуска: вызов серверного метода. 
Функция ВариантЗапускаВызовСерверногоМетода()
	
	Возврат "ВызовСерверногоМетода";
	
КонецФункции

// Возвращает ключ варината запуска: открытие формы. 
Функция ВариантЗапускаОткрытиеФормы()
	
	Возврат "ОткрытиеФормы";
	
КонецФункции

#КонецОбласти