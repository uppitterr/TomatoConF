#Область ПроцедурыИФункцииУправленияПечатью

// Проверяет, проведенность документов перед печатью.
// Если есть непроведенные документы, то предлагает перепровести.
//
// Параметры:
//  ДокументыМассив - Массив           - ссылки на документы, которые должны быть проведены перед печатью.
//  ФормаИсточник   - УправляемаяФорма - форма, из которой было вызвана команда.
Функция ПроверитьДокументыПроведены(ДокументыМассив, ФормаИсточник = Неопределено) Экспорт
	
	ОчиститьСообщения();
	МассивНепроведенныхДокументов = ОбщегоНазначенияСервер.ПроверитьПроведенностьДокументов(ДокументыМассив);
	КоличествоНепроведенныхДокументов = МассивНепроведенныхДокументов.Количество();
	
	Если КоличествоНепроведенныхДокументов > 0 Тогда
		
		Если КоличествоНепроведенныхДокументов = 1 Тогда
			ТекстВопроса = НСтр("ru='Для того чтобы распечатать документ, его необходимо предварительно провести. Выполнить проведение документа и продолжить?';en='Для того чтобы распечатать документ, его необходимо предварительно провести. Выполнить проведение документа и продолжить?'");
		Иначе
			ТекстВопроса = НСтр("ru='Для того чтобы распечатать документы, их необходимо предварительно провести. Выполнить проведение документов и продолжить?';en='Для того чтобы распечатать документы, их необходимо предварительно провести. Выполнить проведение документов и продолжить?'");
		КонецЕсли;
		
		КодОтвета = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если КодОтвета <> КодВозвратаДиалога.Да Тогда
			Возврат Ложь;
		КонецЕсли;
			
		ТипПроведенныхДокументов = Неопределено;
		МассивНепроведенныхДокументов = ОбщегоНазначенияСервер.ПровестиДокументы(МассивНепроведенныхДокументов, ТипПроведенныхДокументов);
		ОповеститьОбИзменении(ТипПроведенныхДокументов);
		// Если команда была вызвана из формы, то зачитываем в форму актуальную (проведенную) копию из базы.
		Если ТипЗнч(ФормаИсточник) = Тип("УправляемаяФорма") Тогда
			Попытка
				ФормаИсточник.Прочитать();	
			Исключение
				// Если метода Прочитать нет, значит печать выполнена не из формы объекта.
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
	ШаблонСообщения = НСтр("ru='Документ %1 не проведен: %2 Печать невозможна.';en='Документ %1 не проведен: %2 Печать невозможна.'");
	Для Каждого НепроведенныйДокумент Из МассивНепроведенныхДокументов Цикл
		Найденный = ДокументыМассив.Найти(НепроведенныйДокумент.Ссылка);
		Если Найденный <> Неопределено Тогда
			ДокументыМассив.Удалить(Найденный);
			ОбщегоНазначенияСервер.СообщитьПользователю(
				ОбщегоНазначенияСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Строка(НепроведенныйДокумент.Ссылка), 
					НепроведенныйДокумент.ОписаниеОшибки), НепроведенныйДокумент.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Отказ = Ложь;
	Если  КоличествоНепроведенныхДокументов > 0
		и МассивНепроведенныхДокументов.Количество() > 0
		и ДокументыМассив.Количество() > 0 Тогда
	   
		КнопкиДиалога = Новый СписокЗначений;
		КнопкиДиалога.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Продолжить';en='Continue'"));
		КнопкиДиалога.Добавить(КодВозвратаДиалога.Нет, НСтр("ru='Нет';en='Нет'"));
		Ответ = Вопрос(НСтр("ru='Не удалось провести один или несколько документов. Продолжить?';en='Не удалось провести один или несколько документов. Продолжить?'"), КнопкиДиалога);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДокументыМассив.Количество() > 0 и не Отказ;
	
КонецФункции

// Выполнить команду печати, которая открывает результат в форме печати документов.
//
// Если в параметре ПараметрыПечати передать структуру, содержащую свойство
// ПереопределитьПользовательскиеНастройкиКоличества = Истина, то пользовательские
// настройки количества копий не будут восстановлены, и не запишутся.
Процедура ВыполнитьКомандуПечати(ИмяМенеджераПечати, ИмяМакета, ПараметрКоманды) Экспорт
	
	// Проверим количество объектов
	Если НЕ ПроверитьКоличествоПереданныхОбъектов(ПараметрКоманды) Тогда
		Возврат;
	КонецЕсли;
	
	// Получим ключ уникальности открываемой формы
	КлючУникальности = Строка(Новый УникальныйИдентификатор);
	
	ПараметрыОткрытия = Новый Структура("ИмяМенеджераПечати,ИмяМакета,ПараметрКоманды");
	ПараметрыОткрытия.ИмяМенеджераПечати = ИмяМенеджераПечати;
	ПараметрыОткрытия.ИмяМакета		 = ИмяМакета;
	ПараметрыОткрытия.ПараметрКоманды	 = ПараметрКоманды;
		
	// Откроем форму печати документов
	ОткрытьФорму("ОбщаяФорма.сжсвПечатьДокументов", ПараметрыОткрытия,, КлючУникальности);
	
КонецПроцедуры

// Перед выполнение команды печати проверить, был ли передан хотя бы один объект, так как
// для команд с множественным режимом использования может быть передан пустой массив.
Функция ПроверитьКоличествоПереданныхОбъектов(ПараметрКоманды)
	
	Если ТипЗнч(ПараметрКоманды) = Тип("Массив") И ПараметрКоманды.Количество() = 0 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

#КонецОбласти
