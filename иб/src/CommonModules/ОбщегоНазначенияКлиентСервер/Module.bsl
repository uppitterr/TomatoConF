#Область ЭкспортныеПроцедурыИФункции

// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     - если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//
// Возвращаемое значение:
//  Массив - массив строк.
//
// Примеры:
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",") - возвратит массив из 5 элементов, три из которых  - пустые строки;
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",", Истина) - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок(" один   два  ", " ") - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок("") - возвратит пустой массив;
//  РазложитьСтрокуВМассивПодстрок("",,Ложь) - возвратит массив с одним элементом "" (пустой строкой);
//  РазложитьСтрокуВМассивПодстрок("", " ") - возвратит массив с одним элементом "" (пустой строкой).
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Подставляет параметры в строку. Максимально возможное число параметров - 9.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров
// начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  – Строка – шаблон строки с параметрами (вхождениями вида "%ИмяПараметра").
// Параметр<n>         - Строка - параметр.
// Возвращаемое значение:
//   Строка   – текстовая строка с подставленными параметрами.
//
// Пример:
// Строка = ПодставитьПараметрыВСтроку(НСтр("en='%1 go to %2';ru='%1 пошел в %2'"), "Вася", "Зоопарк");
Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1,	Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	Если СтрокаПодстановки = Неопределено ИЛИ СтрДлина(СтрокаПодстановки) = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Результат = "";
	НачПозиция = 1;
	Позиция = 1;
	Пока Позиция <= СтрДлина(СтрокаПодстановки) Цикл
		СимволСтроки = Сред(СтрокаПодстановки, Позиция, 1);
		Если СимволСтроки <> "%" Тогда
			Позиция = Позиция + 1;
			Продолжить;
		КонецЕсли;
		Результат = Результат + Сред(СтрокаПодстановки, НачПозиция, Позиция - НачПозиция);
		Позиция = Позиция + 1;
		СимволСтроки = Сред(СтрокаПодстановки, Позиция, 1);
		
		Если СимволСтроки = "%" Тогда
			Позиция = Позиция + 1;
			НачПозиция = Позиция;
			Результат = Результат + "%";
			Продолжить;
		КонецЕсли;
		
		Попытка
			НомерПараметра = Число(СимволСтроки);
		Исключение
			ВызватьИсключение НСтр("en='The input string substitution string has an invalid format:%';ru='Входная строка СтрокаПодстановки имеет неверный формат: %'" + СимволСтроки);
		КонецПопытки;
		
		Если СимволСтроки = "1" Тогда
			ЗначениеПараметра = Параметр1;
		ИначеЕсли СимволСтроки = "2" Тогда
			ЗначениеПараметра = Параметр2;
		ИначеЕсли СимволСтроки = "3" Тогда
			ЗначениеПараметра = Параметр3;
		ИначеЕсли СимволСтроки = "4" Тогда
			ЗначениеПараметра = Параметр4;
		ИначеЕсли СимволСтроки = "5" Тогда
			ЗначениеПараметра = Параметр5;
		ИначеЕсли СимволСтроки = "6" Тогда
			ЗначениеПараметра = Параметр6;
		ИначеЕсли СимволСтроки = "7" Тогда
			ЗначениеПараметра = Параметр7;
		ИначеЕсли СимволСтроки = "8" Тогда
			ЗначениеПараметра = Параметр8;
		ИначеЕсли СимволСтроки = "9" Тогда
			ЗначениеПараметра = Параметр9;
		Иначе
			ВызватьИсключение НСтр("en='The input string substitution string has an invalid format:%';ru='Входная строка СтрокаПодстановки имеет неверный формат: %'" + ЗначениеПараметра);
		КонецЕсли;
		Если ЗначениеПараметра = Неопределено Тогда
			ЗначениеПараметра = "";
		Иначе
			ЗначениеПараметра = Строка(ЗначениеПараметра);
		КонецЕсли;
		Результат = Результат + ЗначениеПараметра;
		Позиция = Позиция + 1;
		НачПозиция = Позиция;
	
	КонецЦикла;
	
	Если (НачПозиция <= СтрДлина(СтрокаПодстановки)) Тогда
		Результат = Результат + Сред(СтрокаПодстановки, НачПозиция, СтрДлина(СтрокаПодстановки) - НачПозиция + 1);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает Истина если конфигурация запущена под управлением платформы 8.3.
Функция ЭтоПлатформа83() Экспорт
	
	Информация = Новый СистемнаяИнформация;
	Возврат Лев(Информация.ВерсияПриложения, 3) = "8.3";
	
КонецФункции

// Возвращает возможные типы ветеринарных препаратов.
// Параметры:
//  ДокументОбъект  – Документ – ссылка на документ, из которого открыта процедура.
Процедура ВыборПрепарата(ДокументОбъект,Отказ) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ТипПрепарата) Тогда 
		
		СписокВидов = Новый СписокЗначений();
					
		ВетеринарныеПрепараты = ПредопределенноеЗначение("Перечисление.сжсвТипыВетПрепаратов.ВетеринарныеПрепараты");
		КормовыеДобавки = ПредопределенноеЗначение("Перечисление.сжсвТипыВетПрепаратов.КормовыеДобавки");
			СанитарныеСредства = ПредопределенноеЗначение("Перечисление.сжсвТипыВетПрепаратов.СанитарныеСредства");
			
			СписокВидов.Добавить(ВетеринарныеПрепараты);
			СписокВидов.Добавить(КормовыеДобавки);
			СписокВидов.Добавить(СанитарныеСредства);
			
		
		Вид = СписокВидов.ВыбратьЭлемент("Выбор вида препарата");
		
		Если НЕ Вид = Неопределено Тогда
			
			ДокументОбъект.ТипПрепарата = Вид.Значение;
			
		Иначе
			
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//Если НЕ ЗначениеЗаполнено(ДокументОбъект.ТипПрепарата) Тогда 
	//	
	//	СписокВидов = Новый СписокЗначений();
	//				
	//	ВетеринарныеПрепараты = "Применение ветеринарных препаратов";
	//	КормовыеДобавки = "Противоэпизоотическое мероприятие";
	//		СанитарныеСредства = "Ветеринарно-санитарные работы";
	//		СанитарныеСредства1 = "Диагностические исследования";
	//		
	//		СписокВидов.Добавить(ВетеринарныеПрепараты);
	//		СписокВидов.Добавить(КормовыеДобавки);
	//		СписокВидов.Добавить(СанитарныеСредства);
	//		СписокВидов.Добавить(СанитарныеСредства1);
	//		
	//	
	//	Вид = СписокВидов.ВыбратьЭлемент("Выбор вида препарата");
	//	
	//	Если НЕ Вид = Неопределено Тогда
	//		
	//		ДокументОбъект.ТипПрепарата = Вид.Значение;
	//		
	//	Иначе
	//		
	//		Отказ = Истина;
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
КонецПроцедуры

// Возвращает возможные типы файлов.
// Параметры:
//  ДокументОбъект  – Документ – ссылка на документ, из которого открыта процедура.
Процедура ВыборТипаФайла(СправочникОбъект,Отказ) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СправочникОбъект.ТипФайла) Тогда 
		
		СписокВидов = Новый СписокЗначений();
					
		Инструкция = ПредопределенноеЗначение("Перечисление.сжсвТипыФайлов.Инструкция");
		Картинка = ПредопределенноеЗначение("Перечисление.сжсвТипыФайлов.Картинка");
		Другое = ПредопределенноеЗначение("Перечисление.сжсвТипыФайлов.Другое");
		
			СписокВидов.Добавить(Инструкция);
			СписокВидов.Добавить(Картинка);
			СписокВидов.Добавить(Другое);
			
		
		Вид = СписокВидов.ВыбратьЭлемент("Выбор типа файла");
		
		Если НЕ Вид = Неопределено Тогда
			
			СправочникОбъект.ТипФайла = Вид.Значение;
			
		Иначе
			
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает возможные типы ветеринарных мероприятий.
// Параметры:
//  ДокументОбъект  – Документ – ссылка на документ, из которого открыта процедура.
Процедура ВыборТипаВетеринарногоМероприятия(ДокументОбъект,Отказ) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ТипВетеринарногоМероприятия) Тогда 
		
		СписокВидов = Новый СписокЗначений();
					
		Лечение = ПредопределенноеЗначение("Перечисление.сжсвТипыВетеринарныхМероприятий.Лечение");
		ВетеринарноСанитарныеРаботы = ПредопределенноеЗначение("Перечисление.сжсвТипыВетеринарныхМероприятий.ВетеринарноСанитарныеРаботы");
		ПрививкиЛечебноПрофилактическиеМероприятия = ПредопределенноеЗначение("Перечисление.сжсвТипыВетеринарныхМероприятий.ПрививкиЛечебноПрофилактическиеМероприятия");
		ДиагностическиеИсследования = ПредопределенноеЗначение("Перечисление.сжсвТипыВетеринарныхМероприятий.ДиагностическиеИсследования");
			
			СписокВидов.Добавить(Лечение);
			СписокВидов.Добавить(ВетеринарноСанитарныеРаботы);
			СписокВидов.Добавить(ПрививкиЛечебноПрофилактическиеМероприятия);
			СписокВидов.Добавить(ДиагностическиеИсследования);
		
		Вид = СписокВидов.ВыбратьЭлемент("Выбор типа ветеринарного мероприятия");
		
		Если НЕ Вид = Неопределено Тогда
			
			ДокументОбъект.ТипВетеринарногоМероприятия = Вид.Значение;
			
		Иначе
			
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти
