#Область ЭкспортныеПроцедурыИФункции

// Сохраняет настройку текущего пользователя в хранилище настроек "НастройкиПользователей".
//
// Параметры:
//	КлючОбъекта - ключ объекта настройки.
//	КлючНастроек - ключ сохраняемых настроек.
//	Настройка - содержит настройки, которые нужно сохранить в хранилище.
Процедура СохранитьНастройкуПользователя (КлючОбъекта, КлючНастроек, Настройка) экспорт
	
	ХранилищаНастроек.НастройкиПользователей.Сохранить(КлючОбъекта, КлючНастроек, Настройка);
	
КонецПроцедуры

// Восстанавливает настройку текущего пользователя из хранилища настроек "НастройкиПользователей".
//
// Параметры:
//	КлючОбъекта - ключ объекта настройки.
//	КлючНастроек - ключ сохраняемых настроек.
//	ЗначениеПоУмолчанию - значение которое дубет возвращено, если требуемая настройка отсутствует в хранилище.
//	ОписаниеНастроек - описание настроек.
//	ИмяПользователя - имя пользователя, настройки которого загружаются.
//
// Возврат:
//	Значение восстанлвенной настройки либо значение по умолчанию.
Функция ЗагрузитьНастройкуПользователя (КлючОбъекта, КлючНастроек, ЗначениеПоУмолчанию=Неопределено,
	ОписаниеНастроек = Неопределено, ИмяПользователя = "") экспорт
	
	Результат = ХранилищаНастроек.НастройкиПользователей.Загрузить(КлючОбъекта, КлючНастроек, ОписаниеНастроек, ИмяПользователя);
	если НЕ Результат = Неопределено тогда
		Возврат (Результат);
	иначе
		Возврат (ЗначениеПоУмолчанию);
	КонецЕсли;
	
КонецФункции

// Дополняет переданную в качестве первого параметра строку символами слева\справа до заданной длины и возвращает ее.
// Незначащие символы слева и справа удаляются.
// По умолчанию функция добавляет строку нулями слева.
//
// Параметры:
//  Строка      - Строка - исходная строка, которую необходимо дополнить символами до заданной длины.
//  ДлинаСтроки - Число - требуемая конечная длина строки.
//  Символ      - Строка - (необязательный) значение символа, которым необходимо дополнить строку.
//  Режим       - Строка - (необязательный) [Слева|Справа] режим добавления символов к исходной строке: слева или справа.
// 
// Пример 1:
// Строка = "1234"; ДлинаСтроки = 10; Символ = "0"; Режим = "Слева"
// Возврат: "0000001234".
//
// Пример 2:
// Строка = " 1234  "; ДлинаСтроки = 10; Символ = "#"; Режим = "Справа"
// Возврат: "1234######".
//
// Возвращаемое значение:
//  Строка - строка, дополненная символами слева или справа.
Функция ДополнитьСтроку(Знач Строка, Знач ДлинаСтроки, Знач Символ = "0", Знач Режим = "Слева") Экспорт
	
	Если ПустаяСтрока(Символ) Тогда
		Символ = "0";
	КонецЕсли;
	
	// длина символа не должна превышать единицы
	Символ = Лев(Символ, 1);
	
	// удаляем крайние пробелы слева и справа строки
	Строка = СокрЛП(Строка);
	
	КоличествоСимволовНадоДобавить = ДлинаСтроки - СтрДлина(Строка);
	
	Если КоличествоСимволовНадоДобавить > 0 Тогда
		
		СтрокаДляДобавления = СформироватьСтрокуСимволов(Символ, КоличествоСимволовНадоДобавить);
		
		Если ВРег(Режим) = "СЛЕВА" Тогда
			
			Строка = СтрокаДляДобавления + Строка;
			
		ИначеЕсли ВРег(Режим) = "СПРАВА" Тогда
			
			Строка = Строка + СтрокаДляДобавления;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Строка;
	
КонецФункции

// Формирует строку повторяющихся символов заданной длины.
Функция СформироватьСтрокуСимволов(Символ, КоличествоСимволов) Экспорт
	
	// возвращаемое значение функции
	Результат = "";
	
	Для Индекс = 1 ПО КоличествоСимволов Цикл
		
		Результат = Результат + Символ;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Выполняет заполнение новго документа при первоначальном открытии его формы.
//
// Параметры:
//	ДокОбъект - создаваемый документ объект.
Процедура ПервоначальноеЗаполнениеДокумента (ДокОбъект) Экспорт
	
	ФермаДоступна = ЕстьРеквизитОбъекта("Ферма", ДокОбъект.Метаданные());
	если ФермаДоступна И НЕ ЗначениеЗаполнено(ДокОбъект.Ферма) тогда
		ДокОбъект.Ферма = ВернутьНастройкуТекущегоПользователя ("ОсновнаяФерма");
	КонецЕсли;
	
КонецПроцедуры

// Возвращает настройку, установленную для текущего пользователя в справочнике сжсвПользователи.
//
// Параметры:
//	НазваниеНастройки - имя реквизита справочника сжсвПользователи.
//
// Возврат:
//	Восстановленная настройка или значение Неопределено.
Функция ВернутьНастройкуТекущегоПользователя (НазваниеНастройки)
	
	если ЕстьРеквизитОбъекта(НазваниеНастройки, Справочники.Пользователи.ПустаяСсылка().Метаданные()) тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	сжсвПользователи." + НазваниеНастройки + "
		|ИЗ
		|	Справочник.сжсвПользователи КАК сжсвПользователи
		|ГДЕ
		|	сжсвПользователи.Ссылка = &ТекущийПользователь";
		Запрос.УстановитьПараметр("ТекущийПользователь", ОбщегоНазначенияСервер.ТекущийПользователь());
		Выборка = Запрос.Выполнить().Выбрать();
		если Выборка.Следующий() тогда
			Возврат Выборка[НазваниеНастройки];
		иначе
			Возврат (Неопределено);
		КонецЕсли;
	иначе
		Возврат (Неопределено);
	КонецЕсли;
	
КонецФункции

// Возвращает менеджер объекта по полному имени объекта метаданных.
//
// Не обрабатываются точки маршрутов бизнес-процессов.
//
// Параметры:
//  ПолноеИмя    - Строка, полное имя объекта метаданных,
//                 например, "Справочник.Организации".
//
// Возвращаемое значение:
//  СправочникМенеджер, ДокументМенеджер, ... 
Функция МенеджерОбъектаПоПолномуИмени(ПолноеИмя) Экспорт
	
	ЧастиИмени = РазложитьСтрокуВМассивПодстрок(ПолноеИмя, ".");
	
	КлассОМ = ЧастиИмени[0];
	ИмяОМ   = ЧастиИмени[1];
	
	Если      ВРег(КлассОМ) = "ПЛАНОБМЕНА" Тогда
		Возврат ПланыОбмена[ИмяОМ];
		
	ИначеЕсли ВРег(КлассОМ) = "СПРАВОЧНИК" Тогда
		Возврат Справочники[ИмяОМ];
		
	ИначеЕсли ВРег(КлассОМ) = "ДОКУМЕНТ" Тогда
		Возврат Документы[ИмяОМ];
		
	ИначеЕсли ВРег(КлассОМ) = "ЖУРНАЛДОКУМЕНТОВ" Тогда
		Возврат ЖурналыДокументов[ИмяОМ];
		
	ИначеЕсли ВРег(КлассОМ) = "ПЕРЕЧИСЛЕНИЕ" Тогда
		Возврат Перечисления[ИмяОМ];
		
	ИначеЕсли ВРег(КлассОМ) = "ОТЧЕТ" Тогда
		Возврат Отчеты[ИмяОМ];
		
	ИначеЕсли ВРег(КлассОМ) = "ОБРАБОТКА" Тогда
		Возврат Обработки[ИмяОМ];
		
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНВИДОВХАРАКТЕРИСТИК" Тогда
		Возврат ПланыВидовХарактеристик[ИмяОМ];
		
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНСЧЕТОВ" Тогда
		Возврат ПланыСчетов[ИмяОМ];
		
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНВИДОВРАСЧЕТА" Тогда
		Возврат ПланЫВидовРасчета[ИмяОМ];
		
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРСВЕДЕНИЙ" Тогда
		Возврат РегистрыСведений[ИмяОМ];
		
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРНАКОПЛЕНИЯ" Тогда
		Возврат РегистрыНакопления[ИмяОМ];
		
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРБУХГАЛТЕРИИ" Тогда
		Возврат РегистрыБухгалтерии[ИмяОМ];
		
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРРАСЧЕТА" Тогда
		Возврат РегистрыРасчета[ИмяОМ];
		
	ИначеЕсли ВРег(КлассОМ) = "БИЗНЕСПРОЦЕСС" Тогда
		Возврат БизнесПроцессы[ИмяОМ];
		
	ИначеЕсли ВРег(КлассОМ) = "ЗАДАЧА" Тогда
		Возврат Задачи[ИмяОМ];
	Иначе
		ВызватьИсключение ПодставитьПараметрыВСтроку(
		НСтр("ru='Неизвестный тип объекта метаданных (%1)';en='Неизвестный тип объекта метаданных (%1)'"), КлассОМ);
	КонецЕсли;
	
КонецФункции

// Преобразует полученную строку в массив, содержащий отдельные элементы исходной строки.
//
// Параметры:
//	Строка - строка которую необходимо преобразовать.
//	Разделитель - символ-разделитель отдельных элементов строки.
//	ПропускатьПустыеСтроки - флаг необходимости пропуска вустых строк (тип булево).
//
// Возврат:
//	Массив содержащий отдельные составные части исходной строки.
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Подставляет параметры в строку. Максимально возможное число параметров - 9.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров
// начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  – Строка – шаблон строки с параметрами (вхождениями вида "%ИмяПараметра").
// Параметр<n>         - Строка - параметр.
// Возвращаемое значение:
//   Строка   – текстовая строка с подставленными параметрами.
//
// Пример:
// Строка = ПодставитьПараметрыВСтроку(НСтр("en='%1 go to %2';ru='%1 пошел в %2'"), "Вася", "Зоопарк").
Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1,	Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	Если СтрокаПодстановки = Неопределено ИЛИ СтрДлина(СтрокаПодстановки) = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Результат = "";
	НачПозиция = 1;
	Позиция = 1;
	Пока Позиция <= СтрДлина(СтрокаПодстановки) Цикл
		СимволСтроки = Сред(СтрокаПодстановки, Позиция, 1);
		Если СимволСтроки <> "%" Тогда
			Позиция = Позиция + 1;
			Продолжить;
		КонецЕсли;
		Результат = Результат + Сред(СтрокаПодстановки, НачПозиция, Позиция - НачПозиция);
		Позиция = Позиция + 1;
		СимволСтроки = Сред(СтрокаПодстановки, Позиция, 1);
		
		Если СимволСтроки = "%" Тогда
			Позиция = Позиция + 1;
			НачПозиция = Позиция;
			Результат = Результат + "%";
			Продолжить;
		КонецЕсли;
		
		Попытка
			НомерПараметра = Число(СимволСтроки);
		Исключение
			ВызватьИсключение НСтр("en='The input string substitution string has an invalid format:%';ru='Входная строка СтрокаПодстановки имеет неверный формат: %'" + СимволСтроки);
		КонецПопытки;
		
		Если СимволСтроки = "1" Тогда
			ЗначениеПараметра = Параметр1;
		ИначеЕсли СимволСтроки = "2" Тогда
			ЗначениеПараметра = Параметр2;
		ИначеЕсли СимволСтроки = "3" Тогда
			ЗначениеПараметра = Параметр3;
		ИначеЕсли СимволСтроки = "4" Тогда
			ЗначениеПараметра = Параметр4;
		ИначеЕсли СимволСтроки = "5" Тогда
			ЗначениеПараметра = Параметр5;
		ИначеЕсли СимволСтроки = "6" Тогда
			ЗначениеПараметра = Параметр6;
		ИначеЕсли СимволСтроки = "7" Тогда
			ЗначениеПараметра = Параметр7;
		ИначеЕсли СимволСтроки = "8" Тогда
			ЗначениеПараметра = Параметр8;
		ИначеЕсли СимволСтроки = "9" Тогда
			ЗначениеПараметра = Параметр9;
		Иначе
			ВызватьИсключение НСтр("en='The input string substitution string has an invalid format:%';ru='Входная строка СтрокаПодстановки имеет неверный формат: %'" + ЗначениеПараметра);
		КонецЕсли;
		Если ЗначениеПараметра = Неопределено Тогда
			ЗначениеПараметра = "";
		Иначе
			ЗначениеПараметра = Строка(ЗначениеПараметра);
		КонецЕсли;
		Результат = Результат + ЗначениеПараметра;
		Позиция = Позиция + 1;
		НачПозиция = Позиция;
		
	КонецЦикла;
	
	Если (НачПозиция <= СтрДлина(СтрокаПодстановки)) Тогда
		Результат = Результат + Сред(СтрокаПодстановки, НачПозиция, СтрДлина(СтрокаПодстановки) - НачПозиция + 1);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует и выводит сообщение, которое может быть связано с элементом 
// управления формы.
//
//  Параметры:
//  ТекстСообщенияПользователю - Строка - текст сообщения.
//  КлючДанных                - Любая ссылка на объект информационной базы.
//                               Ссылка на объект информационной базы, к которому это сообщение относится,
//                               или ключ записи.
//  Поле                       - Строка - наименование реквизита формы.
//  ПутьКДанным                - Строка - путь к данным (путь к реквизиту формы).
//  Отказ                      - Булево - Выходной параметр.
//                               Всегда устанавливается в значение Истина.
//
//	Примеры использования:
//
//	1. Для вывода сообщения у поля управляемой формы, связанного с реквизитом объекта:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru='Сообщение об ошибке.';en='Error message'"), ,
//		"ПолеВРеквизитеФормыОбъект",
//		"Объект");
//
//	Альтернативный вариант использования в форме объекта:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru='Сообщение об ошибке.';en='Error message'"), ,
//		"Объект.ПолеВРеквизитеФормыОбъект");
//
//	2. Для вывода сообщения рядом с полем управляемой формы, связанным с реквизитом формы:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru='Сообщение об ошибке.';en='Error message'"), ,
//		"ИмяРеквизитаФормы");
//
//	3. Для вывода сообщения связанного с объектом информационной базы
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru='Сообщение об ошибке.';en='Error message'"), ОбъектИнформационнойБазы, "Ответственный",,Отказ);
//
// 4. Для вывода сообщения по ссылке на объект информационной базы
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru='Сообщение об ошибке.';en='Error message'"), Ссылка, , , Отказ);
//
// Случаи некорректного использования:
//  1. Передача одновременно параметров КлючДанных и ПутьКДанным,
//  2. Передача в параметре КлючДанных значения типа отличного от допустимых,
//  3. Установка ссылки без установки поля (и/или пути к данным).
Процедура СообщитьПользователю(
	Знач ТекстСообщенияПользователю,
	Знач КлючДанных = Неопределено,
	Знач Поле = "",
	Знач ПутьКДанным = "",
	Отказ = Ложь) Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.Поле = Поле;
	
	ЭтоОбъект = Ложь;
	
	#Если НЕ (ТонкийКлиент ИЛИ ВебКлиент) Тогда
		Если КлючДанных <> Неопределено
			И XMLТипЗнч(КлючДанных) <> Неопределено Тогда
			ТипЗначенияСтрокой = XMLТипЗнч(КлючДанных).ИмяТипа;
			ЭтоОбъект = Найти(ТипЗначенияСтрокой, "Object.") > 0;
		КонецЕсли;
	#КонецЕсли
	
	Если ЭтоОбъект Тогда
		Сообщение.УстановитьДанные(КлючДанных);
	Иначе
		Сообщение.КлючДанных = КлючДанных;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПутьКДанным) Тогда
		Сообщение.ПутьКДанным = ПутьКДанным;
	КонецЕсли;
	
	Сообщение.Сообщить();
	
	Отказ = Истина;
	
КонецПроцедуры

// Возвращает значение параметра сеанса ТекущийПользователь.
Функция ТекущийПользователь() экспорт
	
	Возврат (ПараметрыСеанса.ТекущийПользователь);
	
КонецФункции

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект.
// 
//  Если доступа к одному из реквизитов нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Параметры:
//  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
//  ИменаРеквизитов - Строка или Структура - если Строка, то имена реквизитов, 
//               перечисленные через запятую, в формате требований к свойствам структуры.
//               Например, "Код, Наименование, Родитель".
//               Если Структура, то в качестве ключа передается псевдоним поля для
//               возвращаемой структуры с результатом, а в качестве значения (опционально). 
//               - фактическое имя поля в таблице. 
//               Если значение не определено, то имя поля берется из ключа.
// 
// Возвращаемое значение:
//  Структура    - содержит список свойств, как список имен в строке ИменаРеквизитов
//                 со значениям реквизитов, прочитанных из информационной базы. 
Функция ПолучитьЗначенияРеквизитов(Ссылка, ИменаРеквизитов) Экспорт
	
	Если ТипЗнч(ИменаРеквизитов) = Тип("Структура") Тогда
		СтруктураРеквизитов = ИменаРеквизитов;
	ИначеЕсли ТипЗнч(ИменаРеквизитов) = Тип("Строка") Тогда
		СтруктураРеквизитов = Новый Структура(ИменаРеквизитов);;
	Иначе
		ВызватьИсключение ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Неверный тип второго параметра ИменаИлиСтруктураРеквизитов: %1';en='Неверный тип второго параметра ИменаИлиСтруктураРеквизитов: %1'"), 
		Строка(ТипЗнч(ИменаРеквизитов)));
	КонецЕсли;
	
	ТекстПолей = "";
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		ИмяПоля   = ?(ЗначениеЗаполнено(КлючИЗначение.Значение), СокрЛП(КлючИЗначение.Значение), СокрЛП(КлючИЗначение.Ключ));
		Псевдоним = СокрЛП(КлючИЗначение.Ключ);
		ТекстПолей  = ТекстПолей + ?(ПустаяСтрока(ТекстПолей), "", ",") + "
		|	" + ИмяПоля + " КАК " + Псевдоним;
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|" + ТекстПолей + "
	|ИЗ
	|	" + Ссылка.Метаданные().ПолноеИмя() + " КАК ПсевдонимЗаданнойТаблицы
	|ГДЕ
	|	ПсевдонимЗаданнойТаблицы.Ссылка = &Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Результат = Новый Структура;
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		Результат.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	Возврат Результат;
КонецФункции

// Функция ПолучитьЗначениеРеквизита возвращает значение
// реквизита, прочитанного из информационной базы по ссылке на объект.
// 
//  Если доступа к реквизиту нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Параметры:
//  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
//  ИмяРеквизита - Строка, например, "Код".
// 
// Возвращаемое значение:
//  Произвольный    - зависит от типа значения прочитанного реквизита. 
Функция ПолучитьЗначениеРеквизита(Ссылка, ИмяРеквизита) Экспорт
	
	Результат = ПолучитьЗначенияРеквизитов(Ссылка, ИмяРеквизита);
	Возврат Результат[ИмяРеквизита];
	
КонецФункции

// Проверяет проведенность документов.
//
// Параметры:
//  Документы - Массив - документы, проведенность которых необходимо проверить.
//
// Возвращаемое значение:
//  Массив - непроведенные документы из массива Документы.
Функция ПроверитьПроведенностьДокументов(знач Документы) Экспорт
	
	Результат = Новый Массив;
	
	ШаблонЗапроса = 	
	"ВЫБРАТЬ
	|	Документ.Ссылка КАК Ссылка
	|ИЗ
	|	&ИмяДокумента КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&МассивДокументов)
	|	И (НЕ Документ.Проведен)";
	
	ТекстОбъединитьВсе =
	"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|";
	
	ИменаДокументов = Новый Массив;
	Для Каждого Документ Из Документы Цикл
		ИмяДокумента = Документ.Метаданные().ПолноеИмя();
		Если ИменаДокументов.Найти(ИмяДокумента) = Неопределено
			и Метаданные.Документы.Содержит(Метаданные.НайтиПоПолномуИмени(ИмяДокумента)) Тогда	
			ИменаДокументов.Добавить(ИмяДокумента);
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = "";
	Для Каждого ИмяДокумента Из ИменаДокументов Цикл
		Если Не ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + ТекстОбъединитьВсе;
		КонецЕсли;
		ТекстПодзапроса = СтрЗаменить(ШаблонЗапроса, "&ИмяДокумента", ИмяДокумента);
		ТекстЗапроса = ТекстЗапроса + ТекстПодзапроса;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивДокументов", Документы);
	
	Если Не ПустаяСтрока(ТекстЗапроса) Тогда
		Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция формирует массив имен регистров, по которым документ имеет движения.
// Вызывается при подготовке записей к регистрации движений.
Функция ПолучитьМассивИспользуемыхРегистров(Регистратор, Движения, МассивИсключаемыхРегистров = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	
	Результат = Новый Массив;
	МаксимумТаблицВЗапросе = 256;
	
	СчетчикТаблиц   = 0;
	СчетчикДвижений = 0;
	
	ВсегоДвижений = Движения.Количество();
	ТекстЗапроса  = "";
	Для Каждого Движение Из Движения Цикл
		
		СчетчикДвижений = СчетчикДвижений + 1;
		
		ПропуститьРегистр = МассивИсключаемыхРегистров <> Неопределено
		И МассивИсключаемыхРегистров.Найти(Движение.Имя) <> Неопределено;
		
		Если Не ПропуститьРегистр Тогда
			
			Если СчетчикТаблиц > 0 Тогда
				
				ТекстЗапроса = ТекстЗапроса + "
				|ОБЪЕДИНИТЬ ВСЕ
				|";
				
			КонецЕсли;
			
			СчетчикТаблиц = СчетчикТаблиц + 1;
			
			ТекстЗапроса = ТекстЗапроса + 
			"
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|""" + Движение.Имя + """ КАК ИмяРегистра
			|
			|ИЗ " + Движение.ПолноеИмя() + "
			|
			|ГДЕ Регистратор = &Регистратор
			|";
			
		КонецЕсли;
		
		Если СчетчикТаблиц = МаксимумТаблицВЗапросе Или СчетчикДвижений = ВсегоДвижений Тогда
			
			Запрос.Текст  = ТекстЗапроса;
			ТекстЗапроса  = "";
			СчетчикТаблиц = 0;
			
			Если Результат.Количество() = 0 Тогда
				
				Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИмяРегистра");
				
			Иначе
				
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					Результат.Добавить(Выборка.ИмяРегистра);
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Проверяет изменились номера животных после записи объекта. Если один/несколько номеров изменились,
//	то информация об этом будет записана в рег. св. НомераЖивотных. При первой записи дата изменения
//	(период регистра) устанавливается 01 января 2000 года.
//
// Параметры:
//	Ссылка - ссылка на справочник Свиноматки либо Хряки.
Процедура ЗаписатьИзменениеНомеровЖивотного(Ссылка) экспорт
	ПоследнийНомерСобытия = Константы.сжсвПоследнийНомерСобытия.Получить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	сжсвНомераЖивотныхСрезПоследних.Животное,
	|	сжсвНомераЖивотныхСрезПоследних.Номер,
	|	сжсвНомераЖивотныхСрезПоследних.ДополнительныйНомер,
	|	сжсвНомераЖивотныхСрезПоследних.Животное.Наименование КАК НомерСпр,
	|	сжсвНомераЖивотныхСрезПоследних.Животное.ДополнительныйНомер КАК ДополнительныйНомерСпр
	|ИЗ
	|	РегистрСведений.сжсвНомераЖивотных.СрезПоследних(, Животное = &Животное) КАК сжсвНомераЖивотныхСрезПоследних";
	Запрос.УстановитьПараметр("Животное", Ссылка);
	Результат = Запрос.Выполнить();
	если Результат.Пустой() тогда
		// Первоначальная запись
		Запрос.Текст = "ВЫБРАТЬ
		|	Справочник.Наименование КАК Номер,
		|	Справочник.ДополнительныйНомер		               
		|ИЗ
		|	Справочник." + ?(ТипЗнч(Ссылка)=Тип("СправочникСсылка.сжсвСвиноматки"), "сжсвСвиноматки", "сжсвХряки") + " КАК Справочник
		|ГДЕ
		|	Справочник.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		МенеджерЗаписи = РегистрыСведений.сжсвНомераЖивотных.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Период = '20000101';
		МенеджерЗаписи.Животное = Ссылка;
		МенеджерЗаписи.Номер = Выборка.Номер;
		МенеджерЗаписи.ДополнительныйНомер = Выборка.ДополнительныйНомер;
		МенеджерЗаписи.Пользователь = ТекущийПользователь();
		МенеджерЗаписи.Записать();
		
		//ПоследнийНомерСобытия = ПоследнийНомерСобытия + 1;
		//МенеджерЗаписи = РегистрыСведений.сжсвНумерацияСобытий.СоздатьМенеджерЗаписи();
		//МенеджерЗаписи.Период = ТекущаяДата();
		//МенеджерЗаписи.Животное = Ссылка;
		//МенеджерЗаписи.Номер = ПоследнийНомерСобытия;
		//МенеджерЗаписи.Событие = Перечисления.сжсвСобытия.Татуировка;
		//МенеджерЗаписи.ДатаСобытия = ТекущаяДата();
		//МенеджерЗаписи.Записать();
		//
	иначе
		// Обновление данных
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		если НЕ Выборка.Номер = Выборка.НомерСпр ИЛИ НЕ Выборка.ДополнительныйНомер = Выборка.ДополнительныйНомерСпр тогда
			МенеджерЗаписи = РегистрыСведений.сжсвНомераЖивотных.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Период = ТекущаяДата();
			МенеджерЗаписи.Животное = Ссылка;
			МенеджерЗаписи.Номер = Выборка.НомерСпр;
			МенеджерЗаписи.ДополнительныйНомер = Выборка.ДополнительныйНомерСпр;
			МенеджерЗаписи.Пользователь = ТекущийПользователь();
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
		//если НЕ Выборка.Номер = Выборка.НомерСпр тогда
		//	ПоследнийНомерСобытия = ПоследнийНомерСобытия + 1;
		//	МенеджерЗаписи = РегистрыСведений.сжсвНумерацияСобытий.СоздатьМенеджерЗаписи();
		//	МенеджерЗаписи.Период = ТекущаяДата();
		//	МенеджерЗаписи.Животное = Ссылка;
		//	МенеджерЗаписи.Номер = ПоследнийНомерСобытия;
		//	МенеджерЗаписи.ДатаСобытия = ТекущаяДата();
		//	МенеджерЗаписи.Событие = Перечисления.сжсвСобытия.Татуировка;
		//	МенеджерЗаписи.Записать();
		//КонецЕсли;
		
	КонецЕсли;
	Константы.сжсвПоследнийНомерСобытия.Установить(ПоследнийНомерСобытия);	
КонецПроцедуры

// Заполняет реквизит документа "Пользователь" или "Автор" значением параметра сеанса ТекущийПользователь.
//	Вызывается из подписки на событие сжсвНазначитьАвтораДокументу.
//
// Параметры:
//	Источник - документ объект, для которого выполняется запись.
//	Отказ - признак отказа от записи документа.
//	РежимЗаписи - текущий режим записи документа.
//	РежимПроведения - текущий режим проведения.
Процедура НазначитьАвтораДокументу(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	Иначе
		если ЕстьРеквизитОбъекта("Пользователь", Источник.Метаданные()) тогда
			Источник.Пользователь = ТекущийПользователь();
		иначеЕсли ЕстьРеквизитОбъекта("Автор", Источник.Метаданные()) тогда
			Источник.Автор = ТекущийПользователь();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Получает количество и массу безномерных животных в заданных разрезах количественно-весового учета и с учетом
//	значений функциональных опций.
//
// Параметры:
//	Дата - дата на которую необходимо получить информацию.
//	Ферма - ферма животных, разрез количественно весового учета.
//	Корпус - корпус животных, разрез количественно весового учета.
//	Сектор - сектор животных, разрез количественно весового учета.
//	Станок - станок животных, разрез количественно весового учета.
//	ТехнолГруппа - технологическая группа животных, разрез количественно весового учета.
//	Группа - группа животных, разрез количественно весового учета.
//	Группировка - группировка животных, разрез количественно весового учета.
//
// Возврат:
//	Структура с элементами Масса и Количество.
Функция ВернутьКоличествоИМассуПоБезнумернымЖивотным(Дата, Ферма, Корпус, Сектор, Станок=Неопределено, ТехнолГруппа, Группа=Неопределено, Группировка) экспорт
	
	КорпусФун = ОбщегоНазначенияСервер.ВернутьКорпусПоФунОпции(Ферма, Корпус);
	СекторФун = ОбщегоНазначенияСервер.ВернутьСекторПоФунОпции(Ферма, Сектор);
	СтанокФун = ОбщегоНазначенияСервер.ВернутьСтанокПоФунОпции(Ферма, Станок);
	ТехнолГруппаФун = ОбщегоНазначенияСервер.ВернутьТехнолГруппуПоФунОпции(Ферма, ТехнолГруппа);
	ГруппировкаФун = ОбщегоНазначенияСервер.ВернутьГруппировкуПоФунОпции(Ферма, Группировка);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	сжсвЖивотныеВНаличииОстатки.КоличествоОстаток,
	|	сжсвЖивотныеВНаличииОстатки.МассаОстаток,
	|	сжсвЖивотныеВНаличииОстатки.Ферма,
	|	сжсвЖивотныеВНаличииОстатки.Сектор,
	|	сжсвЖивотныеВНаличииОстатки.Станок,
	|	сжсвЖивотныеВНаличииОстатки.Свиноматка,
	|	сжсвЖивотныеВНаличииОстатки.Хряк,
	|	сжсвЖивотныеВНаличииОстатки.ГруппаЖивотных,
	|	сжсвЖивотныеВНаличииОстатки.ТехнолГруппа,
	|	сжсвЖивотныеВНаличииОстатки.Группировка
	|ИЗ
	|	РегистрНакопления.сжсвЖивотныеВНаличии.Остатки(
	|			&Дата,
	|			Ферма = &Ферма
	|				" + ?(ЗначениеЗаполнено(Корпус), "И Сектор.Владелец = &Корпус", "") + "
	|				И Сектор = &Сектор
	|				" + ?(НЕ Станок=Неопределено, "И Станок = &Станок", "") + "
	|				" + ?(НЕ Группа=Неопределено, "И ГруппаЖивотных = &Группа", "") + "
	|				И ТехнолГруппа = &ТехнолГруппа
	|				И Группировка = &Группировка
	|				И Свиноматка = ЗНАЧЕНИЕ (Справочник.сжсвСвиноматки.ПустаяСсылка)
	|				И Хряк = ЗНАЧЕНИЕ (Справочник.сжсвХряки.ПустаяСсылка)) КАК сжсвЖивотныеВНаличииОстатки
	|ИТОГИ
	|	СУММА(КоличествоОстаток),
	|	СУММА(МассаОстаток)
	|ПО
	|	ОБЩИЕ";
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Ферма", Ферма);
	Запрос.УстановитьПараметр("Корпус", КорпусФун);
	Запрос.УстановитьПараметр("Сектор", СекторФун);
	Запрос.УстановитьПараметр("Станок", СтанокФун);
	Запрос.УстановитьПараметр("Группа", Группа);
	Запрос.УстановитьПараметр("ТехнолГруппа", ТехнолГруппаФун);
	Запрос.УстановитьПараметр("Группировка", ГруппировкаФун);
	
	Результат = Запрос.Выполнить();
	если Результат.Пустой() тогда
		КоличествоИМасса = Новый Структура ("Масса, Количество", 0, 0);
	иначе
		Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Выборка.Следующий();
		КоличествоИМасса = Новый Структура ("Масса, Количество", Выборка.МассаОстаток, Выборка.КоличествоОстаток);
	КонецЕсли;
	
	Возврат (КоличествоИМасса);
	
КонецФункции

// Функция СтрокаТаблицыЗначенийВСтруктуру создает
// структуру со свойствами, как колонки таблицы
// значений передаваемой строки
// и устанавливает этим свойствам значения
// из строки таблицы значений.
// 
// Параметры:
//  СтрокаТаблицыЗначений - СтрокаТаблицыЗначений.
//
// ВозвращаемоеЗначение:
//  Структура.
Функция СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицыЗначений) Экспорт
	
	Структура = Новый Структура;
	Для каждого Колонка Из СтрокаТаблицыЗначений.Владелец().Колонки Цикл
		Структура.Вставить(Колонка.Имя, СтрокаТаблицыЗначений[Колонка.Имя]);
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции

// Возвращает заголовок документа в том виде, в котором его формирует платформа для представления ссылки на документ.
//
// Параметры:
//  Шапка - Структура с ключами:
//          Номер - строка или число - номер документа;
//          Дата  - дата - дата документа;
//  НазваниеДокумента - Строка - название документа (например, синоним объекта метаданных).
//
// Возвращаемое значение: 
//  Строка - заголовок документа.
Функция СформироватьЗаголовокДокумента(Шапка, знач НазваниеДокумента = "") Экспорт
	
	// Если название документа не передано, получим название по представлению документа
	Если НазваниеДокумента = ""	И Шапка.Свойство("Представление") И ЗначениеЗаполнено(Шапка.Представление) Тогда
		ПоложениеНомера = Найти(Шапка.Представление, Шапка.Номер);
		Если ПоложениеНомера > 0 Тогда
			НазваниеДокумента = СокрЛП(Лев(Шапка.Представление, ПоложениеНомера - 1));
		КонецЕсли;
	КонецЕсли;
	
	НомерНаПечать = ПрефиксацияОбъектов.ПолучитьНомерНаПечать(Шапка.Номер);
	
	Возврат ПодставитьПараметрыВСтроку(
	НСтр("ru = '%1 № %2 от %3'; en = '%1 № %2 from %3'"),
	НазваниеДокумента, НомерНаПечать, Формат(Шапка.Дата, НСтр("ru = 'Л=ru; '; en = 'Л=en; '") + "ДФ='дд ММММ гггг'"));
	
КонецФункции

// Возвращает предопределенный элемент справочника сжсвФермы, используемый для работы с функциональными опциями.
Функция ВернутьСлужебнуюФерму() экспорт
	
	Возврат (Справочники.сжсвФермы.Служебная);
	
КонецФункции

// Возвращает корпус в соответствии со значением функциональной опции УчетПоСекторам.
//
// Параметры:
//	Ферма - ферма, в соответствии с которой будет получено значение функциональной опции.
//	Корпус - ссылка на корпус, который будет возвращен если функциональная опция имеет значение истина.
//
// Возврат:
//	Возвращается значение параметра Корпус, если функциональная опция имеет значение истина,
//	в противном слечае возвращется пустая ссылка на справочник сжсвКорпуса.
Функция ВернутьКорпусПоФунОпции(Ферма, Корпус) экспорт
	
	УчетПоКорпусамСекторам = ПолучитьФункциональнуюОпцию("УчетПоСекторам", Новый Структура ("Ферма", Ферма));
	если УчетПоКорпусамСекторам тогда
		Возврат (Корпус);
	иначе
		Возврат (Справочники.сжсвКорпуса.ПустаяСсылка());
	КонецЕсли;
	
КонецФункции

// Возвращает сектор в соответствии со значением функциональной опции УчетПоСекторам.
//
// Параметры:
//	Ферма - ферма, в соответствии с которой будет получено значение функциональной опции.
//	Сектор - ссылка на сектор, который будет возвращен если функциональная опция имеет значение истина.
//
// Возврат:
//	Возвращается значение параметра Сектор, если функциональная опция имеет значение истина,
//	в противном слечае возвращется пустая ссылка на справочник сжсвСектора.
Функция ВернутьСекторПоФунОпции(Ферма, Сектор) экспорт
	
	УчетПоКорпусамСекторам = ПолучитьФункциональнуюОпцию("УчетПоСекторам", Новый Структура ("Ферма", Ферма));
	если УчетПоКорпусамСекторам тогда
		Возврат (Сектор);
	иначе
		Возврат (Справочники.сжсвСектора.ПустаяСсылка());
	КонецЕсли;
	
КонецФункции

// Возвращает станок в соответствии со значением функциональной опции УчетПоСтанкам.
//
// Параметры:
//	Ферма - ферма, в соответствии с которой будет получено значение функциональной опции.
//	Станок - ссылка на станок, который будет возвращен если функциональная опция имеет значение истина.
//
// Возврат:
//	Возвращается значение параметра Станок, если функциональная опция имеет значение истина,
//	в противном слечае возвращется пустая ссылка на справочник сжсвСтанки.
Функция ВернутьСтанокПоФунОпции(Ферма, Станок) экспорт
	
	УчетПоСтанкам = ПолучитьФункциональнуюОпцию("УчетПоСтанкам", Новый Структура ("Ферма", Ферма));
	если УчетПоСтанкам тогда
		Возврат (Станок);
	иначе
		Возврат (Справочники.сжсвСтанки.ПустаяСсылка());
	КонецЕсли;
	
КонецФункции

// Возвращает технологическую группу в соответствии со значением функциональной опции УчетВРазрезеТехнолГрупп.
//
// Параметры:
//	Ферма - ферма, в соответствии с которой будет получено значение функциональной опции.
//	ТехнолГруппа - ссылка на технологическую группу, котрая будет возвращена если функциональная опция
//		имеет значение истина.
//
// Возврат:
//	Возвращается значение параметра ТехнолГруппа, если функциональная опция имеет значение истина,
//	в противном слечае возвращется пустая ссылка на справочник сжсвТехнолГруппы.
Функция ВернутьТехнолГруппуПоФунОпции (Ферма, ТехнолГруппа) экспорт
	
	УчетПоТехнолГруппам = ПолучитьФункциональнуюОпцию("УчетВРазрезеТехнолГрупп", Новый Структура ("Ферма", Ферма));
	если УчетПоТехнолГруппам тогда
		Возврат (ТехнолГруппа);
	иначе
		Возврат (Справочники.сжсвТехнолГруппы.ПустаяСсылка());
	КонецЕсли;
	
КонецФункции

// Возвращает группировку в соответствии со значением функциональной опции УчетВРазрезеГруппировок.
//
// Параметры:
//	Ферма - ферма, в соответствии с которой будет получено значение функциональной опции.
//	Группировка - ссылка на группировку, котрая будет возвращена если функциональная опция имеет значение истина.
//
// Возврат:
//	Возвращается значение параметра Группировка, если функциональная опция имеет значение истина,
//	в противном слечае возвращется пустая ссылка на справочник сжсвГруппировка.
Функция ВернутьГруппировкуПоФунОпции (Ферма, Группировка) экспорт
	
	УчетПоГруппировкам = ПолучитьФункциональнуюОпцию("УчетВРазрезеГруппировок", Новый Структура ("Ферма", Ферма));
	если УчетПоГруппировкам тогда
		Возврат (Группировка);
	иначе
		Возврат (Справочники.сжсвГруппировка.ПустаяСсылка());
	КонецЕсли;
	
КонецФункции

// Выполняет проверку табличной части документа на задвоенность строк.
//
// Параметры:
//	ДокументОбъект - тип: документ объект, данные которого необходимо проверить.
//	ИмяТабЧасти - имя проверяемой табличной части.
//	МассивКолонок - массив, содержащий имена колонок, в разрезе которых будет проверяться задвоение.
//
// Возврат:
//	Значение типа булево, признак задвоенности строк. Истина означает, что строки задвоенны,
//	в противном случае возвращается ложь.
Функция ПроверитьДокументНаЗадвоениеСтрок(ДокументОбъект, ИмяТабЧасти, МассивКолонок) экспорт
	
	ИмяДокумента = ДокументОбъект.Метаданные().Имя;
	
	ТекстЗапроса = "ВЫБРАТЬ";
	для каждого Колонка из МассивКолонок цикл
		ТекстЗапроса = ТекстЗапроса + "
		|	Документ." + Колонка + ",";
	КонецЦикла;
	ТекстЗапроса = ТекстЗапроса + "	
	|	МАКСИМУМ(Документ.НомерСтроки) КАК НомерСтроки,
	|	КОЛИЧЕСТВО(Документ.Ссылка) КАК Количество
	|ИЗ
	|	Документ." + ИмяДокумента + "." + ИмяТабЧасти + " КАК Документ
	|ГДЕ
	|	Документ.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО";
	для каждого Колонка из МассивКолонок цикл
		ТекстЗапроса = ТекстЗапроса + "
		|	Документ." + Колонка + ",";
	КонецЦикла;
	ТекстЗапроса = Лев (ТекстЗапроса, (СтрДлина(ТекстЗапроса)-1));
	ТекстЗапроса = ТекстЗапроса + "
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеЗадвоены = ложь;
	пока Выборка.Следующий() цикл
		если Выборка.Количество > 1 тогда
			ДанныеЗадвоены = истина;
			
			ТекстСообщения = "Данные в строке " + Выборка.НомерСтроки + " задвоены";
			Поле = ИмяТабЧасти + "[" + (Выборка.НомерСтроки - 1) + "]" + "." + МассивКолонок[0];
			ОбщегоНазначенияСервер.СообщитьПользователю(ТекстСообщения, ДокументОбъект, Поле);
		КонецЕсли;
	КонецЦикла;
	
	Возврат (ДанныеЗадвоены);
	
КонецФункции

// Процедура выполняет проведение документов перед формированием печатной формы.
//
// Параметры:
//	Документы                - Массив - документы, которые необходимо провести.
//  ТипПроведенныхДокументов - Тип    - возвращает тип документов в массиве.
//
// Возвращаемое значение:
//	Массив - документы, которые провести не удалось, и описания ошибок.
Функция ПровестиДокументы(Документы, ТипПроведенныхДокументов) Экспорт
	
	ИмяДокумента = РазложитьСтрокуВМассивПодстрок(
	Документы[0].Метаданные().ПолноеИмя(), ".")[1];
	ТипПроведенныхДокументов = ТипЗнч(Документы[0]);
	НепроведенныеДокументы = Новый Массив;
	
	Для Каждого ДокументСсылка Из Документы Цикл
		
		ВыполненоУспешно = Ложь;
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		Если ДокументОбъект.ПроверитьЗаполнение() Тогда
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				ВыполненоУспешно = Истина;
			Исключение
				ПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				ТекстСообщенияОбОшибке = НСтр("ru='Ошибка при попытке проведения документа: %1';en='Ошибка при попытке проведения документа: %1'");
				ТекстСообщенияОбОшибке = ПодставитьПараметрыВСтроку(ТекстСообщенияОбОшибке, ПредставлениеОшибки);
				ЗаписьЖурналаРегистрации(НСтр("ru='Проведение документов при печати';en='Проведение документов при печати'"),
				УровеньЖурналаРегистрации.Информация, ДокументОбъект.Метаданные(), ДокументСсылка, 
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		Иначе
			ПредставлениеОшибки = НСтр("ru='Поля документа не заполнены.';en='Поля документа не заполнены.'");
		КонецЕсли;
		
		Если Не ВыполненоУспешно Тогда
			НепроведенныеДокументы.Добавить(Новый Структура("Ссылка,ОписаниеОшибки", ДокументСсылка, ПредставлениеОшибки));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НепроведенныеДокументы;
	
КонецФункции

// Выполняет установку колонтитулов в табличном документе (используется для установки
//	колонтитулов в отчетах и печатных формах).
//
// Параметры:
//	ТабличныйДокумент - тип: ТабличныйДокумент, для которого необходимо выполнить установку колонтитулов.
Процедура ВывестиКолонтитулыВТабличныйДокумент (ТабличныйДокумент) Экспорт
	
	ТабличныйДокумент.НижнийКолонтитул.Выводить = истина;
	ТабличныйДокумент.НижнийКолонтитул.ТекстСлева = "1С:Селекция в животноводстве. Свиноводство [&Дата] [&Время]";
	ТабличныйДокумент.НижнийКолонтитул.ТекстСправа = "стр. [&НомерСтраницы] из [&СтраницВсего]";
	
КонецПроцедуры

// Выполняет расчет коэффициента инбридинга потомков по Райту для полученных родителей.
//
// Параметры:
//	Мать - ссылка на справочник сжсвСвиноматки.
//	Отец - ссылка на спровчник сжсвХряки.
//
// Возврат:
//	Значение коэффициента.
Функция РасчетКИРайтПотомства(Мать, Отец) Экспорт
	Потомок = Новый Структура; 
	Потомок.Вставить("Мать", Мать);
	Потомок.Вставить("Отец", Отец);
	КИРайт = ОбщегоНазначенияСервер.РасчетКИРайт(Потомок);
	Возврат КИРайт;
КонецФункции

// Рассчитывает коэффициент инбридинга на основе данных о предках четырех поколений.
// Используется при отборе ремонтного молодняка.
//
// Параметры:
//	Элемент - потомок, СправочникСсылка.Свиноматки или СправочникСсылка.Хряки.
//  
// Возврат:
//	Число - коэффициент инбридинга по Райт.
Функция РасчетКИРайт(Элемент) Экспорт
	
	КИРайт = 0;
	
	ТаблицаМатерей = Новый ТаблицаЗначений;
	ТаблицаМатерей.Колонки.Добавить("Мать");
	ТаблицаМатерей.Колонки.Добавить("Уровень");
	
	ТаблицаОтцов = Новый ТаблицаЗначений;
	ТаблицаОтцов.Колонки.Добавить("Отец");
	ТаблицаОтцов.Колонки.Добавить("Уровень");
	
	СписокДетей = Новый СписокЗначений;
	СписокДетей.Добавить(Элемент);
	
	СписокРодителей = Новый СписокЗначений;
	
	// формируем список матерей и отцов
	Для Сч = 1 По 4 Цикл
		Для Сч2 = 1 По СписокДетей.Количество() Цикл
			к=1;
			ТекущаяМать = ?(ЗначениеЗаполнено(СписокДетей[Сч2-1].Значение), СписокДетей[Сч2-1].Значение.Мать, Справочники.сжсвСвиноматки.ПустаяСсылка());
			ТекущийОтец = ?(ЗначениеЗаполнено(СписокДетей[Сч2-1].Значение), СписокДетей[Сч2-1].Значение.Отец, Справочники.сжсвХряки.ПустаяСсылка());
			СписокРодителей.Добавить(ТекущаяМать);
			СписокРодителей.Добавить(ТекущийОтец);
			// добавляем матерей и отцов
			НоваяМать = ТаблицаМатерей.Добавить();
			НоваяМать.Мать = ТекущаяМать;
			НоваяМать.Уровень = Сч-1;
			
			НовыйОтец = ТаблицаОтцов.Добавить();
			НовыйОтец.Отец = ТекущийОтец;
			НовыйОтец.Уровень = Сч-1;
		КонецЦикла;
		СписокДетей = СписокРодителей.Скопировать();
		СписокРодителей.Очистить();
	КонецЦикла;
	
	
	// проверяем список матерей на наличие повторов
	Для Сч = 1 По (ТаблицаМатерей.Количество()-1) Цикл
		Для Сч2 = (Сч+1) По ТаблицаМатерей.Количество() Цикл
			Если (ТаблицаМатерей[Сч-1].Мать = ТаблицаМатерей[Сч2-1].Мать) И (ТаблицаМатерей[Сч-1].Мать <> Справочники.сжсвСвиноматки.ПустаяСсылка()) Тогда
				КИРайт = КИРайт + POW(1/2,ТаблицаМатерей[Сч-1].Уровень + ТаблицаМатерей[Сч2-1].Уровень + 1);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// проверяем список отцов на наличие повторов
	Для Сч = 1 По (ТаблицаОтцов.Количество()-1) Цикл
		Для Сч2 = (Сч+1) По ТаблицаОтцов.Количество() Цикл
			Если (ТаблицаОтцов[Сч-1].Отец = ТаблицаОтцов[Сч2-1].Отец) И (ТаблицаОтцов[Сч-1].Отец <> "") И (ТаблицаОтцов[Сч-1].Отец <> Справочники.сжсвХряки.ПустаяСсылка()) Тогда
				КИРайт = КИРайт + POW(1/2,ТаблицаОтцов[Сч-1].Уровень + ТаблицаОтцов[Сч2-1].Уровень + 1);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат КИРайт;
КонецФункции

// Выполняет расчет коэффициента инбридинга потомков по Шапоружу для полученных родителей.
//
// Параметры:
//	Мать - ссылка на справочник сжсвСвиноматки.
//	Отец - ссылка на спровчник сжсвХряки.
//
// Возврат:
//	Значение коэффициента.
Функция РасчетКИШапоружПотомства(Мать, Отец) Экспорт
	Потомок = Новый Структура; 
	Потомок.Вставить("Мать", Мать);
	Потомок.Вставить("Отец", Отец);
	КИРайт = ОбщегоНазначенияСервер.РасчетКИШапоруж(Потомок);
	Возврат КИРайт;
КонецФункции

// Рассчитывает коэффициент инбридинга по Шапоружу на основе данных о предках четырех поколений.
// Используется при отборе ремонтного молодняка.
//
// Параметры:
//	Элемент - потомок, СправочникСсылка.Свиноматки или СправочникСсылка.Хряки.
//  
// Возврат:
//	Число - коэффициент инбридинга по Райт.
Функция РасчетКИШапоруж(Элемент) Экспорт
	
	КИШапоруж = "";
	
	ТаблицаМатерей = Новый ТаблицаЗначений;
	ТаблицаМатерей.Колонки.Добавить("Мать");
	ТаблицаМатерей.Колонки.Добавить("Уровень");
	ТаблицаМатерей.Колонки.Добавить("Половина");
	
	ТаблицаОтцов = Новый ТаблицаЗначений;
	ТаблицаОтцов.Колонки.Добавить("Отец");
	ТаблицаОтцов.Колонки.Добавить("Уровень");
	ТаблицаОтцов.Колонки.Добавить("Половина");
	
	СписокДетей = Новый ТаблицаЗначений;
	СписокДетей.Колонки.Добавить("Элемент");
	СписокДетей.Колонки.Добавить("Половина");
	НоваяСтрока = СписокДетей.Добавить();
	НоваяСтрока.Элемент = Элемент;
	НоваяСтрока.Половина = Неопределено;
	
	СписокРодителей = Новый ТаблицаЗначений;
	СписокРодителей.Колонки.Добавить("Элемент");
	СписокРодителей.Колонки.Добавить("Половина");
	
	// формируем список матерей и отцов
	Для Сч = 1 По 4 Цикл
		Для Сч2 = 1 По СписокДетей.Количество() Цикл
			ТекущаяМать = ?(ЗначениеЗаполнено(СписокДетей[Сч2-1].Элемент), СписокДетей[Сч2-1].Элемент.Мать, Справочники.сжсвСвиноматки.ПустаяСсылка());
			ТекущийОтец = ?(ЗначениеЗаполнено(СписокДетей[Сч2-1].Элемент), СписокДетей[Сч2-1].Элемент.Отец, Справочники.сжсвХряки.ПустаяСсылка());
			ТекущаяПоловина = ?(ЗначениеЗаполнено(СписокДетей[Сч2-1].Элемент), СписокДетей[Сч2-1].Половина, Неопределено);
			НовыйРодитель = СписокРодителей.Добавить();
			НовыйРодитель.Элемент = ТекущаяМать;
			Если ТекущаяПоловина = Неопределено Тогда
				НовыйРодитель.Половина = "м";
			Иначе
				НовыйРодитель.Половина = ТекущаяПоловина;
			КонецЕсли;
			НовыйРодитель = СписокРодителей.Добавить();
			НовыйРодитель.Элемент = ТекущийОтец;
			Если ТекущаяПоловина = Неопределено Тогда
				НовыйРодитель.Половина = "о";
			Иначе
				НовыйРодитель.Половина = ТекущаяПоловина;
			КонецЕсли;
			
			// добавляем матерей и отцов
			НоваяМать = ТаблицаМатерей.Добавить();
			НоваяМать.Мать = ТекущаяМать;
			НоваяМать.Уровень = Сч-1;
			Если ТекущаяПоловина = Неопределено Тогда
				НоваяМать.Половина = "м";
			Иначе
				НоваяМать.Половина = ТекущаяПоловина;
			КонецЕсли;
			НовыйОтец = ТаблицаОтцов.Добавить();
			НовыйОтец.Отец = ТекущийОтец;
			НовыйОтец.Уровень = Сч-1;
			Если ТекущаяПоловина = Неопределено Тогда
				НовыйОтец.Половина = "о";
			Иначе
				НовыйОтец.Половина = ТекущаяПоловина;
			КонецЕсли;
		КонецЦикла;
		СписокДетей = СписокРодителей.Скопировать();
		СписокРодителей.Очистить();
	КонецЦикла;
	
	// проверяем список матерей на наличие повторов
	ТаблицаМатерей.Сортировать("Половина");
	Для Сч = 1 По (ТаблицаМатерей.Количество()-1) Цикл
		ЕстьПовторы = Ложь;
		Если ТаблицаМатерей[Сч-1].Половина = "м" Тогда
			НовоеСовпадение = "" + Уровень(ТаблицаМатерей[Сч-1].Уровень);
			ПредыдущаяМать = "м";
		Иначе
			НовоеСовпадение = "0-"+ Уровень(ТаблицаМатерей[Сч-1].Уровень);
			ПредыдущаяМать = "о";
		КонецЕсли;
		Для Сч2 = (Сч+1) По ТаблицаМатерей.Количество() Цикл
			Если (ТаблицаМатерей[Сч-1].Мать = ТаблицаМатерей[Сч2-1].Мать) И (ТаблицаМатерей[Сч-1].Мать <> Справочники.сжсвСвиноматки.ПустаяСсылка())Тогда
				Если ТаблицаМатерей[Сч2-1].Половина = "м" Тогда
					НовоеСовпадение = НовоеСовпадение + "," + Уровень(ТаблицаМатерей[Сч2-1].Уровень);
					ПредыдущаяМать = "м";
				Иначе
					Если ПредыдущаяМать = "м" Тогда
						НовоеСовпадение = НовоеСовпадение + "-" + Уровень(ТаблицаМатерей[Сч2-1].Уровень);
					Иначе
						НовоеСовпадение = НовоеСовпадение + "," + Уровень(ТаблицаМатерей[Сч2-1].Уровень);
					КонецЕсли;
					ПредыдущаяМать = "о";
				КонецЕсли;
				ЕстьПовторы = Истина;
				ТаблицаМатерей[Сч2-1].Мать = Справочники.сжсвСвиноматки.ПустаяСсылка();
			КонецЕсли;
		КонецЦикла;
		Разделитель = Найти(НовоеСовпадение, ";");
		Подстрока = Сред(НовоеСовпадение,Разделитель+1);
		Если Найти(Подстрока, "-")=0 Тогда
			НовоеСовпадение = НовоеСовпадение + "-0";
		КонецЕсли;
		
		Если ЕстьПовторы Тогда
			Если КИШапоруж = "" Тогда
				КИШапоруж = НовоеСовпадение;
			Иначе
				КИШапоруж = КИШапоруж + "; " + НовоеСовпадение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// проверяем список отцов на наличие повторов
	ТаблицаОтцов.Сортировать("Половина");
	Для Сч = 1 По (ТаблицаОтцов.Количество()-1) Цикл
		ЕстьПовторы = Ложь;
		Если ТаблицаОтцов[Сч-1].Половина = "м" Тогда
			НовоеСовпадение = "" + Уровень(ТаблицаОтцов[Сч-1].Уровень);
			ПредыдущийОтец = "м";
		Иначе
			НовоеСовпадение = "0-"+ Уровень(ТаблицаОтцов[Сч-1].Уровень);
			ПредыдущийОтец = "о";
		КонецЕсли;
		Для Сч2 = (Сч+1) По ТаблицаОтцов.Количество() Цикл
			Если (ТаблицаОтцов[Сч-1].Отец = ТаблицаОтцов[Сч2-1].Отец) И (ТаблицаОтцов[Сч-1].Отец <> Справочники.сжсвХряки.ПустаяСсылка()) Тогда
				Если ТаблицаОтцов[Сч2-1].Половина = "м" Тогда
					НовоеСовпадение = НовоеСовпадение + "," + Уровень(ТаблицаОтцов[Сч2-1].Уровень);
					ПредыдущийОтец = "м";
				Иначе
					Если ПредыдущийОтец = "м" Тогда
						НовоеСовпадение = НовоеСовпадение + "-" + Уровень(ТаблицаОтцов[Сч2-1].Уровень);
					Иначе
						НовоеСовпадение = НовоеСовпадение + "," + Уровень(ТаблицаОтцов[Сч2-1].Уровень);
					КонецЕсли;
					ПредыдущийОтец = "о";
				КонецЕсли;
				
				ЕстьПовторы = Истина;
				ТаблицаОтцов[Сч2-1].Отец = Справочники.сжсвХряки.ПустаяСсылка();
			КонецЕсли;
		КонецЦикла;
		Разделитель = Найти(НовоеСовпадение, ";");
		Подстрока = Сред(НовоеСовпадение,Разделитель+1);
		Если Найти(Подстрока, "-")=0 Тогда
			НовоеСовпадение = НовоеСовпадение + "-0";
		КонецЕсли;
		
		Если ЕстьПовторы Тогда
			Если КИШапоруж = "" Тогда
				КИШапоруж = НовоеСовпадение;
			Иначе
				КИШапоруж = КИШапоруж +"; " + НовоеСовпадение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат КИШапоруж;
КонецФункции

// Возвращает представление уровня родственности.
//
// Параметры:
// НомерУровня - ссылка на номер уровня.
//
// Возврат:
// Строка - представление уровня.
Функция Уровень(НомерУровня) 
	
	Если НомерУровня = 0 Тогда
		Возврат "I";
	ИначеЕсли НомерУровня = 1 Тогда
		Возврат "II";
	ИначеЕсли НомерУровня = 2 Тогда
		Возврат "III";
	ИначеЕсли НомерУровня = 3 Тогда
		Возврат "IV";
	КонецЕсли;	
	Возврат "X";
	
КонецФункции

// Формирует таблицу производственных циклов с характеристиками осеменений, результатов непродуктивного осеменения,
// опоросов, отъемов. 
//
// Параметры:
//  Свиноматка - ссылка на свиноматку, по которой необходимо собрать данные.
//
// Возврат:
//	Таблица значений, строки которой соответствуют производственным циклам, 
//  	а столбцы - характеристикам отдельных циклов.
Функция СформироватьТаблицуПроизводственныхЦиклов(Свиноматка)Экспорт
	
	отЧислоЦел = Новый ОписаниеТипов ("Число", Новый КвалификаторыЧисла(5));
	отЧислоДроб = Новый ОписаниеТипов ("Число", Новый КвалификаторыЧисла(12,2));
	отДата = Новый ОписаниеТипов ("Дата",,, Новый КвалификаторыДаты());
	отСтрока = Новый ОписаниеТипов ("Строка",, Новый КвалификаторыСтроки(200));
	МассивТиповДокументов = Новый Массив;
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.сжсвВводПроизводственныхЦикловЗагрузка"));
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.сжсвКорректировкаДвижений"));
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.сжсвОпорос"));
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.Опыление"));
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.Осмотр"));
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.сжсвОценкаОтъем"));
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.сжсвПереводИзФермыНаФерму"));
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.сжсвПеремещение"));
	отДокументы = Новый ОписаниеТипов (МассивТиповДокументов);
	
	ТаблицаЦиклов = Новый ТаблицаЗначений;
	ТаблицаЦиклов.Колонки.Добавить("Номер", отЧислоЦел);
	ТаблицаЦиклов.Колонки.Добавить("ДатаПостановки", отДата);
	ТаблицаЦиклов.Колонки.Добавить("Осеменение", отДокументы);			// В колонку записывается по последнему осеменению
	ТаблицаЦиклов.Колонки.Добавить("ДатаОсеменения", отДата);		// В колонку записывается по последнему осеменению
	
	ТаблицаЦиклов.Колонки.Добавить("ДатаОсеменения1", отДата);
	ТаблицаЦиклов.Колонки.Добавить("ДатаОсеменения2", отДата);
	ТаблицаЦиклов.Колонки.Добавить("ДатаОсеменения3", отДата);
	ТаблицаЦиклов.Колонки.Добавить("КоличествоОсеменений", отЧислоЦел);
	
	ТаблицаЦиклов.Колонки.Добавить("НомерХряка", отСтрока);			// В колонку записывается по последнему осеменению
	ТаблицаЦиклов.Колонки.Добавить("НомерХряка2", отСтрока);			// В колонку записывается по последнему осеменению
	ТаблицаЦиклов.Колонки.Добавить("НомерХряка3", отСтрока);			// В колонку записывается по последнему осеменению
	ТаблицаЦиклов.Колонки.Добавить("Хряк", Новый ОписаниеТипов ("СправочникСсылка.сжсвХряки"));					// В колонку записывается по последнему осеменению
	ТаблицаЦиклов.Колонки.Добавить("Осеменатор", Новый ОписаниеТипов ("СправочникСсылка.Сотрудники"));		// В колонку записывается по последнему осеменению
	ТаблицаЦиклов.Колонки.Добавить("Опорос", отДокументы);
	ТаблицаЦиклов.Колонки.Добавить("ДатаОпороса", отДата);
	ТаблицаЦиклов.Колонки.Добавить("Всего", отЧислоЦел);
	ТаблицаЦиклов.Колонки.Добавить("ГоловОп", отЧислоЦел);
	ТаблицаЦиклов.Колонки.Добавить("МертвОп", отЧислоЦел);
	ТаблицаЦиклов.Колонки.Добавить("МумифОп", отЧислоЦел);
	ТаблицаЦиклов.Колонки.Добавить("СлабыхОп", отЧислоЦел);
	ТаблицаЦиклов.Колонки.Добавить("МассаОп", отЧислоДроб);
	ТаблицаЦиклов.Колонки.Добавить("НомерГнезда", отЧислоЦел);
	ТаблицаЦиклов.Колонки.Добавить("Оценка21", отДокументы);
	ТаблицаЦиклов.Колонки.Добавить("ДатаОценки21", отДата);
	ТаблицаЦиклов.Колонки.Добавить("Голов21", отЧислоЦел);
	ТаблицаЦиклов.Колонки.Добавить("Масса21", отЧислоДроб);
	ТаблицаЦиклов.Колонки.Добавить("Отъем", отДокументы);
	ТаблицаЦиклов.Колонки.Добавить("ДатаОтъема", отДата);
	ТаблицаЦиклов.Колонки.Добавить("ГоловОт", отЧислоЦел);
	ТаблицаЦиклов.Колонки.Добавить("МассаОт", отЧислоДроб);
	ТаблицаЦиклов.Колонки.Добавить("Отсад", отЧислоЦел);
	ТаблицаЦиклов.Колонки.Добавить("Подсад", отЧислоЦел);
	ТаблицаЦиклов.Колонки.Добавить("Событие", отДокументы);
	ТаблицаЦиклов.Колонки.Добавить("Вид", Новый ОписаниеТипов ("ПеречислениеСсылка.сжсвСобытия"));
	ТаблицаЦиклов.Колонки.Добавить("ДатаСобытия", отДата);
	ТаблицаЦиклов.Колонки.Добавить("Примечание", отСтрока);
	ТаблицаЦиклов.Колонки.Добавить("КоличествоОхот", отЧислоЦел);
	ТаблицаЦиклов.Колонки.Добавить("ДатаПоследнейОхоты", отДата);
	ТаблицаЦиклов.Колонки.Добавить("Охота", отДокументы);
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
	|	сжсвПроизводственныйЦикл.Период КАК Период,
	|	сжсвПроизводственныйЦикл.Регистратор,
	|	сжсвПроизводственныйЦикл.НомерСтроки,
	|	сжсвПроизводственныйЦикл.Активность,
	|	сжсвПроизводственныйЦикл.Свиноматка,
	|	сжсвПроизводственныйЦикл.Событие,
	|	сжсвПроизводственныйЦикл.ДатаСобытия,
	|	сжсвПроизводственныйЦикл.НомерОхоты,
	|	сжсвПроизводственныйЦикл.НомерОсеменения,
	|	сжсвПроизводственныйЦикл.НомерЦикла,
	|	сжсвПроизводственныйЦикл.Всего,
	|	сжсвПроизводственныйЦикл.Голов,
	|	сжсвПроизводственныйЦикл.Мертворожденных,
	|	сжсвПроизводственныйЦикл.Мумифицированных,
	|	сжсвПроизводственныйЦикл.Слабых,
	|	сжсвПроизводственныйЦикл.Масса,
	|	сжсвПроизводственныйЦикл.Хряк,
	|	сжсвПроизводственныйЦикл.НомерГнезда,
	|	сжсвПроизводственныйЦикл.Осеменатор,
	|	сжсвПроизводственныйЦикл.Отсад,
	|	сжсвПроизводственныйЦикл.Подсад,
	|	сжсвПроизводственныйЦикл.Хряк2,
	|	сжсвПроизводственныйЦикл.Хряк3,
	|	сжсвПроизводственныйЦикл.Хряк.Наименование КАК ХрякНомер,
	|	сжсвПроизводственныйЦикл.Хряк2.Наименование КАК Хряк2Номер,
	|	сжсвПроизводственныйЦикл.Хряк3.Наименование КАК Хряк3Номер
	|ИЗ
	|	РегистрСведений.сжсвПроизводственныйЦикл КАК сжсвПроизводственныйЦикл
	|ГДЕ
	|	сжсвПроизводственныйЦикл.Свиноматка = &Свиноматка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	сжсвОценка21.Период,
	|	сжсвОценка21.Регистратор,
	|	сжсвОценка21.НомерСтроки,
	|	сжсвОценка21.Активность,
	|	сжсвОценка21.Свиноматка,
	|	ЗНАЧЕНИЕ(Перечисление.сжсвСобытия.Оценка21),
	|	сжсвОценка21.ДатаСобытия,
	|	NULL,
	|	NULL,
	|	сжсвОценка21.НомерЦикла,
	|	NULL,
	|	сжсвОценка21.Голов,
	|	NULL,
	|	NULL,
	|	NULL,
	|	сжсвОценка21.Масса,
	|	NULL,
	|	сжсвОценка21.НомерГнезда,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	РегистрСведений.сжсвОценка21 КАК сжсвОценка21
	|ГДЕ
	|	сжсвОценка21.Свиноматка = &Свиноматка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	Запрос.УстановитьПараметр("Свиноматка", Свиноматка);
	Запрос.Текст = ТекстЗапроса;
	События = Запрос.Выполнить().Выбрать();
	
	НоваяСтрока = ТаблицаЦиклов.Добавить();
	Номер = 1;
	НоваяСтрока.Номер = Номер;
	КоличествоОхот = 0;
	ВторойОтъемВТекущемЦикле = ложь;
	ДатаПоследнейОхоты = '000101010000';
	КоличествоОсеменений = 0;
	ДатаПоследнегоОсеменения = '00010101';
	ИнтервалПЦ = Константы.сжсвИнтервалПроизводственногоЦикла.Получить();
	Отбор = Новый Структура("Свиноматка", Свиноматка);
	
	Пока События.Следующий() Цикл
		Если События.Событие = Перечисления.сжсвСобытия.Охота Тогда
			ДатаОп = ?(НоваяСтрока.ДатаОпороса = Неопределено, '00010101', НоваяСтрока.ДатаОпороса);
			ДатаОт = ?(НоваяСтрока.ДатаОтъема = Неопределено, '00010101', НоваяСтрока.ДатаОтъема);
			ДатаСоб = ?(НоваяСтрока.ДатаСобытия = Неопределено, '00010101', НоваяСтрока.ДатаСобытия);
			пДата = МАКС (ДатаОп, ДатаОт, ДатаСоб);
			если НЕ пДата = '00010101' И События.ДатаСобытия > пДата тогда
				НоваяСтрока = ТаблицаЦиклов.Добавить();
				Номер = Номер + 1;
				НоваяСтрока.Номер = Номер;
				КоличествоОхот = 0;
				КоличествоОсеменений = 0;
				ВторойОтъемВТекущемЦикле = ложь;
			иначеЕсли ВторойОтъемВТекущемЦикле тогда
				НоваяСтрока = ТаблицаЦиклов.Добавить();
				Номер = Номер + 1;
				НоваяСтрока.Номер = Номер;
				КоличествоОхот = 0;
				КоличествоОсеменений = 0;
				ВторойОтъемВТекущемЦикле = ложь;
			КонецЕсли;
			
			КоличествоОхот = КоличествоОхот + 1;
			НоваяСтрока.КоличествоОхот = КоличествоОхот;
			НоваяСтрока.ДатаПоследнейОхоты = События.ДатаСобытия;
			НоваяСтрока.Охота = События.Регистратор;
		ИначеЕсли События.Событие = Перечисления.сжсвСобытия.Постановка Тогда
			если ЗначениеЗаполнено (НоваяСтрока.ДатаОсеменения) тогда
				Разница = (НачалоДня (События.ДатаСобытия)-НачалоДня (НоваяСтрока.ДатаОсеменения))/86400;
				Разница = ? (Разница>0, Разница, Разница * -1);
				если Разница  > ИнтервалПЦ тогда
					НоваяСтрока = ТаблицаЦиклов.Добавить();
					Номер = Номер + 1;
					НоваяСтрока.Номер = Номер;
					КоличествоОхот = 0;
					КоличествоОсеменений = 0;
					ВторойОтъемВТекущемЦикле = ложь;
				КонецЕсли;
			иначеЕсли ВторойОтъемВТекущемЦикле тогда
				НоваяСтрока = ТаблицаЦиклов.Добавить();
				Номер = Номер + 1;
				НоваяСтрока.Номер = Номер;
				КоличествоОхот = 0;
				КоличествоОсеменений = 0;
				ВторойОтъемВТекущемЦикле = ложь;
			иначе
				Разница = (НачалоДня (События.ДатаСобытия)-НачалоДня (События.ДатаСобытия))/86400;
				Разница = ? (Разница>0, Разница, Разница * -1);
				если Разница  > ИнтервалПЦ тогда
					НоваяСтрока = ТаблицаЦиклов.Добавить();
					Номер = Номер + 1;
					НоваяСтрока.Номер = Номер;
					КоличествоОхот = 0;
					КоличествоОсеменений = 0;
					ВторойОтъемВТекущемЦикле = ложь;
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрока.ДатаПостановки = События.ДатаСобытия;
		ИначеЕсли События.Событие = Перечисления.сжсвСобытия.Осеменение Тогда
			Если НоваяСтрока.Осеменение <> Неопределено Тогда
				Разница = (НачалоДня (События.ДатаСобытия)-НачалоДня (НоваяСтрока.ДатаОсеменения))/86400;
				Разница = ? (Разница>0, Разница, Разница * -1);
				если Разница  > ИнтервалПЦ тогда
					НоваяСтрока = ТаблицаЦиклов.Добавить();
					Номер = Номер + 1;
					НоваяСтрока.Номер = Номер;
					КоличествоОхот = 0;
					КоличествоОсеменений = 0;
					ВторойОтъемВТекущемЦикле = ложь;
				КонецЕсли;
			иначеЕсли ВторойОтъемВТекущемЦикле тогда
				НоваяСтрока = ТаблицаЦиклов.Добавить();
				Номер = Номер + 1;
				НоваяСтрока.Номер = Номер;
				КоличествоОхот = 0;
				КоличествоОсеменений = 0;
				ВторойОтъемВТекущемЦикле = ложь;
			КонецЕсли;
			
			если НЕ ЗначениеЗаполнено(НоваяСтрока.ДатаОсеменения1) тогда
				НоваяСтрока.ДатаОсеменения1 = События.ДатаСобытия;
			иначеЕсли НЕ ЗначениеЗаполнено(НоваяСтрока.ДатаОсеменения2) тогда
				НоваяСтрока.ДатаОсеменения2 = События.ДатаСобытия;
			иначе
				НоваяСтрока.ДатаОсеменения3 = События.ДатаСобытия;
			КонецЕсли;
			КоличествоОсеменений = КоличествоОсеменений + 1;
			НоваяСтрока.КоличествоОсеменений = КоличествоОсеменений;
			ДатаПоследнегоОсеменения = События.ДатаСобытия;
			
			НоваяСтрока.Осеменение = События.Регистратор;
			НоваяСтрока.ДатаОсеменения = События.ДатаСобытия;
			НоваяСтрока.НомерХряка = События.ХрякНомер;
			НоваяСтрока.НомерХряка2 = События.Хряк2Номер;
			НоваяСтрока.НомерХряка3 = События.Хряк3Номер;
			НоваяСтрока.Хряк = События.Хряк;
			НоваяСтрока.Осеменатор = События.Осеменатор;
			
			если НЕ НоваяСтрока.ДатаСобытия = Неопределено И НачалоДня (НоваяСтрока.ДатаСобытия) <= НачалоДня (ДатаПоследнегоОсеменения) тогда
				НоваяСтрока.Событие = Документы.Опыление.ПустаяСсылка();
				НоваяСтрока.Вид = Перечисления.сжсвСобытия.ПустаяСсылка();
				НоваяСтрока.ДатаСобытия = '00010101';
			КонецЕсли;
		ИначеЕсли События.Событие = Перечисления.сжсвСобытия.Опорос Тогда
			НоваяСтрока.Опорос = События.Регистратор;
			НоваяСтрока.ДатаОпороса = События.ДатаСобытия;
			НоваяСтрока.Всего = События.Всего;
			НоваяСтрока.ГоловОп = События.Голов;
			НоваяСтрока.СлабыхОп = События.Слабых;
			НоваяСтрока.МассаОп = События.Масса;
			НоваяСтрока.НомерГнезда = События.НомерГнезда;
			НоваяСтрока.МертвОп = События.Мертворожденных;
			НоваяСтрока.МумифОп = События.Мумифицированных;
			НоваяСтрока.Отсад = События.Отсад;
			НоваяСтрока.Подсад = События.Подсад;
		ИначеЕсли События.Событие = Перечисления.сжсвСобытия.Оценка21 Тогда
			НоваяСтрока.Оценка21 = События.Регистратор;
			НоваяСтрока.ДатаОценки21 = События.ДатаСобытия;
			НоваяСтрока.Голов21 = События.Голов;
			НоваяСтрока.Масса21 = События.Масса;
		ИначеЕсли События.Событие = Перечисления.сжсвСобытия.Отъем ИЛИ События.Событие = Перечисления.сжсвСобытия.РаннийОтъем Тогда
			если НЕ ВторойОтъемВТекущемЦикле тогда
				НоваяСтрока.Отъем = События.Регистратор;
				НоваяСтрока.ДатаОтъема = События.ДатаСобытия;
				НоваяСтрока.ГоловОт = События.Голов;
				НоваяСтрока.МассаОт = События.Масса;
				НоваяСтрока.Отсад = События.Отсад;
				НоваяСтрока.Подсад = События.Подсад;
				ВторойОтъемВТекущемЦикле = истина;
			иначе
				НоваяСтрока = ТаблицаЦиклов.Добавить();
				НоваяСтрока.Номер = Номер;
				НоваяСтрока.Отъем = События.Регистратор;
				НоваяСтрока.ДатаОтъема = События.ДатаСобытия;
				НоваяСтрока.ГоловОт = События.Голов;
				НоваяСтрока.МассаОт = События.Масса;
				НоваяСтрока.Отсад = События.Отсад;
				НоваяСтрока.Подсад = События.Подсад;
			КонецЕсли;
		ИначеЕсли НЕ События.Событие = Перечисления.сжсвСобытия.Осмотр И События.ДатаСобытия > ДатаПоследнегоОсеменения  Тогда
			НоваяСтрока.Событие = События.Регистратор;
			НоваяСтрока.Вид = События.Событие;
			НоваяСтрока.ДатаСобытия = События.ДатаСобытия;
		КонецЕсли;
		Если НоваяСтрока.ДатаОтъема = Дата(1,1,1) И НЕ НоваяСтрока.ДатаОпороса=Дата(1,1,1) Тогда
			ЗапросОтсадПодсад = Новый Запрос;
			ЗапросОтсадПодсад.Текст = "ВЫБРАТЬ
			|	сжсвГнездаВНаличииОбороты.НомерГнезда,
			|	сжсвГнездаВНаличииОбороты.КоличествоПриход КАК ГоловПодсад,
			|	сжсвГнездаВНаличииОбороты.Свиноматка
			|ПОМЕСТИТЬ ГнездаПредвПодсад
			|ИЗ
			|	РегистрНакопления.сжсвГнездаВНаличии.Обороты(
			|			,
			|			,
			|			Регистратор,
			|			Свиноматка = &Свиноматка
			|				И НомерГнезда = &Гнездо) КАК сжсвГнездаВНаличииОбороты
			|ГДЕ
			|	сжсвГнездаВНаличииОбороты.КоличествоПриход > 0
			|	И сжсвГнездаВНаличииОбороты.Регистратор ССЫЛКА Документ.сжсвОтсадПодсад
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	сжсвГнездаВНаличииОбороты.НомерГнезда,
			|	сжсвГнездаВНаличииОбороты.Свиноматка,
			|	сжсвГнездаВНаличииОбороты.КоличествоРасход КАК ГоловОтсад
			|ПОМЕСТИТЬ ГнездаПредвОтсад
			|ИЗ
			|	РегистрНакопления.сжсвГнездаВНаличии.Обороты(
			|			,
			|			,
			|			Регистратор,
			|			Свиноматка = &Свиноматка
			|				И НомерГнезда = &Гнездо) КАК сжсвГнездаВНаличииОбороты
			|ГДЕ
			|	сжсвГнездаВНаличииОбороты.КоличествоРасход > 0
			|	И сжсвГнездаВНаличииОбороты.Регистратор ССЫЛКА Документ.сжсвОтсадПодсад
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ГнездаПредвОтсад.НомерГнезда,
			|	ГнездаПредвОтсад.Свиноматка,
			|	ЕСТЬNULL(ГнездаПредвПодсад.ГоловПодсад, 0) КАК ГоловПодсад,
			|	ЕСТЬNULL(ГнездаПредвОтсад.ГоловОтсад, 0) КАК ГоловОтсад
			|ИЗ
			|	ГнездаПредвПодсад КАК ГнездаПредвПодсад
			|		ПОЛНОЕ СОЕДИНЕНИЕ ГнездаПредвОтсад КАК ГнездаПредвОтсад
			|		ПО ГнездаПредвПодсад.НомерГнезда = ГнездаПредвОтсад.НомерГнезда
			|			И ГнездаПредвПодсад.Свиноматка = ГнездаПредвОтсад.Свиноматка";
			ЗапросОтсадПодсад.УстановитьПараметр("Свиноматка", Свиноматка);
			ЗапросОтсадПодсад.УстановитьПараметр("Гнездо", НоваяСтрока.НомерГнезда);
			ВыборкаОтсПодс = ЗапросОтсадПодсад.Выполнить().Выбрать();
			Если ВыборкаОтсПодс.Количество()>0 Тогда
				ВыборкаОтсПодс.Следующий();
				НоваяСтрока.Отсад = НоваяСтрока.Отсад + ВыборкаОтсПодс.ГоловОтсад;
				НоваяСтрока.Подсад = НоваяСтрока.Подсад + ВыборкаОтсПодс.ГоловПодсад;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаЦиклов;
	
КонецФункции

// Функция возвращает ставку НДС.
//
// Параметры:
//  Валюта - СправочникСсылка.Валюты, валюта, по которой необходимо получить курс.
//  ДатаКурса - Дата, календарная дата, на которую необходимо получить курс валюты.
//
// Возвращаемое значение:
//	Курс переданной валюты на переданную дату, 1 в случае отсутствия значения.
Функция ПолучитьСтавкуНДС(СтавкаНДС) Экспорт
	
	Если СтавкаНДС = Перечисления.сжсвСтавкиНДС.НДС20 ИЛИ СтавкаНДС = Перечисления.сжсвСтавкиНДС.НДС20_120 Тогда
		Возврат 20;
		
	ИначеЕсли СтавкаНДС = Перечисления.сжсвСтавкиНДС.НДС10 ИЛИ СтавкаНДС = Перечисления.сжсвСтавкиНДС.НДС10_110 Тогда
		Возврат 10;
		
	ИначеЕсли СтавкаНДС = Перечисления.сжсвСтавкиНДС.НДС18 ИЛИ СтавкаНДС = Перечисления.сжсвСтавкиНДС.НДС18_118 Тогда
		Возврат 18;
		
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции // ПолучитьСтавкуНДС()

// Рассчитывает сумму НДС исходя из суммы и флагов налогообложения.
//
// Параметры: 
//  Сумма            - число, сумма от которой надо рассчитывать налоги, 
//  УчитыватьНДС     - булево, признак учета НДС в сумме, 
//  СуммаВключаетНДС - булево, признак включения НДС в сумму ("внутри" или "сверху"),
//  СтавкаНДС        - число , процентная ставка НДС.
//
// Возвращаемое значение:
//  Число, полученная сумма НДС.
Функция РассчитатьСуммуНДС(Сумма, УчитыватьНДС, СуммаВключаетНДС, СтавкаНДС) Экспорт
	
	Если (УчитыватьНДС) И (СуммаВключаетНДС) Тогда
		СуммаБезНДС = 100 * Сумма / (100 + СтавкаНДС);
		СуммаНДС = Сумма - СуммаБезНДС;
	Иначе
		СуммаБезНДС = Сумма;
	КонецЕсли;
	
	Если УчитыватьНДС Тогда 
		Если НЕ СуммаВключаетНДС Тогда
			СуммаНДС = СуммаБезНДС * СтавкаНДС / 100;
		КонецЕсли;
	Иначе
		СуммаНДС = 0;
	КонецЕсли;
	
	Возврат СуммаНДС;
	
КонецФункции // РассчитатьСуммуНДС()

// Позволяет определить есть ли среди реквизитов шапки документа
// реквизит с переданным именем.
//
// Параметры: 
//  ИмяРеквизита - строковое имя искомого реквизита, 
//  МетаданныеОбъекта - объект описания метаданных документа, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
Функция ЕстьРеквизитОбъекта(ИмяРеквизита, МетаданныеОбъекта) Экспорт
	
	Если МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита) = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли; 
	
КонецФункции // ЕстьРеквизитОбъекта()

// Определяет событие, по которому свиноматка стала холостой.
//
// Параметры:
//  ДнейОтОсеменения - количество дней от осеменения до результата непр. осеменения.
//  ПредыдущееСостояние - состояние свиноматки, до момента установления состояния "холостая".
//
// Возврат:
//	ПеречислениеСсылка.Событие - событие, по которому свиноматка стала холостой.
Функция СобытиеХолостойСвиноматки(ДнейОтОсеменения, ПредыдущееСостояние) Экспорт
	
	Если ПредыдущееСостояние = Перечисления.сжсвСостоянияСвиноматки.Подсосная Тогда
		Возврат Перечисления.сжсвСобытия.РаннийОтъем;
	ИначеЕсли (ПредыдущееСостояние = Перечисления.сжсвСостоянияСвиноматки.Супоросная)
		ИЛИ (ПредыдущееСостояние = Перечисления.сжсвСостоянияСвиноматки.ТяжелоСупоросная)Тогда
		Возврат Перечисления.сжсвСобытия.Аборт;
	ИначеЕсли ПредыдущееСостояние = Перечисления.сжсвСостоянияСвиноматки.УсловноСупоросная Тогда
		Если ДнейОтОсеменения < Константы.сжсвДлительностьФазыУсловноСупоросные.Получить() Тогда
			Возврат Перечисления.сжсвСобытия.Перегул;
		ИначеЕсли ДнейОтОсеменения < (Константы.сжсвДлительностьФазыУсловноСупоросные.Получить()+10) Тогда
			Возврат Перечисления.сжсвСобытия.Прохолост;
		Иначе
			Возврат Перечисления.сжсвСобытия.Аборт;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Перечисления.сжсвСобытия.ПустаяСсылка();
	
КонецФункции 	

// Функция проверяет, существуют ли ссылки на единицу измерения в движениях регистров накопления.
// Если есть - нельзя менять коэффицент.
//
// Параметры:
//  Ссылка - ссылка на единицу измерения.
//
// Возвращаемое значение:
//  Истина - если есть движения, Ложь - если нет.
Функция Номенклатура_СуществуютСсылки(Ссылка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("ТекущийВладелец", Ссылка);
	
	ТипВетПрепараты = Тип("СправочникСсылка.Препараты");
	ТипКорма = Тип("СправочникСсылка.Удобрения");
	
	Запрос.Текст = "";
	
	Для Каждого РегистрНакопления Из Метаданные.РегистрыНакопления Цикл
		Для Каждого РеквизитРегистра Из РегистрНакопления.Измерения Цикл
			Если РеквизитРегистра.Тип.СодержитТип(ТипВетПрепараты) ИЛИ (РеквизитРегистра.Тип.СодержитТип(ТипКорма)) Тогда
				Если Запрос.Текст <> "" Тогда
					Запрос.Текст = Запрос.Текст + "
					|ОБЪЕДИНИТЬ ВСЕ
					|";
				КонецЕсли;
				Запрос.Текст = Запрос.Текст + "
				|ВЫБРАТЬ ПЕРВЫЕ 1
				|	1 КАК Результат
				|ИЗ
				|	РегистрНакопления." + РегистрНакопления.Имя + " КАК Рег
				|ГДЕ
				|	Рег." + РеквизитРегистра.Имя + " = &ТекущийВладелец
				|";
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции //  СуществуютСсылки()	

// Возвращает значение константы сжсвУчетДвиженияГнезд.
//
// Возврат:
//	значение типа Булево.
Функция ПолучитьПризнакВеденияУчетаПоГнездам() Экспорт
	
	Возврат Константы.сжсвУчетДвиженияГнезд.Получить();
	
КонецФункции

// Выполняет проверку возможности выполнения записи документа, в зависимости от значения даты
//	запрета редактирования документов.
//
// Параметры:
//	Источник - тип: документ объект, для которого выполняется запись.
//	Отказ - признак отказа от записи документа.
//	РежимЗаписи - текущий режим записи документа.
//	РежимПроведения - текущий режим проведения.
Процедура ПроверитьДатуЗапретаРедактированияДокументов(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	Иначе
		ДатаЗапретаРедактирования = Константы.сжсвДатаРедактирования.Получить();
		если ЗначениеЗаполнено(ДатаЗапретаРедактирования) И 
			НачалоДня(Источник.Дата) <= ДатаЗапретаРедактирования тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Дата документа меньше либо равна дате запрета редактирования (" +
			Формат (ДатаЗапретаРедактирования, "ДФ=dd.MM.yyyy") + ")";
			Сообщение.Сообщить();
			Отказ = истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	

// Проверяет необходимость первоначального заполнения базы.
//
// Возврат:
//	значение типа Булево.
Функция ПроверитьНеобходимостьОбновления() Экспорт
	Если НЕ ПустаяСтрока(Метаданные.Версия) И (Метаданные.Версия <> Константы.сжсвТекущаяВерсияКонфигурации.Получить()) Тогда
		Если ПустаяСтрока (Константы.сжсвТекущаяВерсияКонфигурации.Получить()) Тогда
			Возврат Истина;	
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
КонецФункции

// Устанавливает значение константы сжсвТекущаяВерсияКонфигурации.
Процедура УстановитьВерсию() Экспорт
	
	Константы.сжсвТекущаяВерсияКонфигурации.Установить(Метаданные.Версия);	
	
КонецПроцедуры

// Проверяет необходимость обновления базы.
Функция ПроверитьОбновление() Экспорт
	Если НЕ ПустаяСтрока(Метаданные.Версия) И (Метаданные.Версия <> Константы.сжсвТекущаяВерсияКонфигурации.Получить()) Тогда
		Если ПустаяСтрока (Константы.сжсвТекущаяВерсияКонфигурации.Получить()) Тогда
			Возврат Ложь;	
		Иначе
			Возврат Истина;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
КонецФункции

// Возвращает последний использованный административный номер животного.
Функция НазначитьАдминистративныйНомер() экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	МАКСИМУМ(сжсвСвиноматки.НомерEDI) КАК НомерEDI
	|ПОМЕСТИТЬ Макс
	|ИЗ
	|	Справочник.сжсвСвиноматки КАК сжсвСвиноматки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(сжсвХряки.НомерEDI)
	|ИЗ
	|	Справочник.сжсвХряки КАК сжсвХряки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ЕСТЬNULL(Макс.НомерEDI, 0)) КАК НомерEDI
	|ИЗ
	|	Макс КАК Макс";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка.НомерEDI;
КонецФункции

// Возвращает список животных, удовлетворяющих введенному тексту поиска,  
// используется при автоподборе в документы.
//
// Параметры:
//	Имя справочника - имя справочника, по которому производится поиск "сжсвХряки" или "сжсвСвиноматки"
//	Текст - текст поиска
//	ДатаСреза - дата, на которую получаются актуальные данные о животных  
//	Ферма - ферма, по которой производится поиск животных.
//
// Возврат:
//	Список значений - список животных, удовлетворяющих введенному тексту,
//  в котором представление строится Номер животного + состояние + дней от установки состояния.
Функция ПолучитьДанныеВыбораЖивотного(ИмяСправочника, Текст, ДатаСреза, Ферма = Неопределено) Экспорт
	
	ДанныеВыбора = Новый СписокЗначений; 
	Если НЕ Текст = "" Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Спр.Ссылка,
		|	Спр.Код,
		|	Спр.Наименование КАК Наименование";
		Если ИмяСправочника = "сжсвСвиноматки" Тогда
			Запрос.Текст = Запрос.Текст + ",
			|	сжсвСостоянияСвиноматокСрезПоследних.Состояние,
			|	РАЗНОСТЬДАТ(сжсвСостоянияСвиноматокСрезПоследних.Период, &ДатаСреза, ДЕНЬ) КАК Дней";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|ИЗ
		|	РегистрНакопления.сжсвЖивотныеВНаличии.Остатки(&ДатаСреза, ";
		Если ЗначениеЗаполнено(Ферма) Тогда
			Запрос.Текст = Запрос.Текст + "Ферма = &Ферма";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + ") КАК сжсвЖивотныеВНаличииОстатки
		|		ПОЛНОЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочника + " КАК Спр
		|		ПО сжсвЖивотныеВНаличииОстатки.";
		Если ИмяСправочника = "сжсвСвиноматки" Тогда
			Запрос.Текст = Запрос.Текст + "Свиноматка";
		Иначе
			Запрос.Текст = Запрос.Текст + "Хряк";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "= Спр.Ссылка";
		Если ИмяСправочника = "сжсвСвиноматки" Тогда
			Запрос.Текст = Запрос.Текст + "
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.сжсвСостоянияСвиноматок.СрезПоследних(&ДатаСреза) КАК сжсвСостоянияСвиноматокСрезПоследних
			|		ПО сжсвЖивотныеВНаличииОстатки.Свиноматка = сжсвСостоянияСвиноматокСрезПоследних.Свиноматка";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|ГДЕ
		|	Спр.Наименование ПОДОБНО """ + Текст + "%""
		|    И ";
		Если ИмяСправочника = "сжсвСвиноматки" Тогда
			Запрос.Текст = Запрос.Текст + "сжсвЖивотныеВНаличииОстатки.КоличествоОстаток >0";
		Иначе
			Запрос.Текст = Запрос.Текст + "(сжсвЖивотныеВНаличииОстатки.КоличествоОстаток >0
			|ИЛИ Спр.Семя = Истина)";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|УПОРЯДОЧИТЬ ПО
		|Спр.Наименование";
		Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
		Запрос.УстановитьПараметр("Ферма", Ферма);
		Результат = Запрос.Выполнить().Выбрать();
		
		
		Пока Результат.Следующий() Цикл
			Представление = Результат.Наименование + " (";
			Если ИмяСправочника = "сжсвСвиноматки" Тогда
				Если Результат.Состояние = Перечисления.сжсвСостоянияСвиноматки.ТяжелоСупоросная Тогда
					Состояние = "Тяж-суп";
				ИначеЕсли Результат.Состояние = Перечисления.сжсвСостоянияСвиноматки.УсловноСупоросная Тогда
					Состояние = "Усл-суп";
				ИначеЕсли Результат.Состояние = Перечисления.сжсвСостоянияСвиноматки.Супоросная Тогда
					Состояние = "Супор";
				Иначе
					Состояние = Результат.Состояние;
				КонецЕсли;
				
				Представление = Представление + Состояние + " " + Результат.Дней + "дн)";
			Иначе
				Представление = Представление + Результат.Код + ")";
			КонецЕсли;
			
			ДанныеВыбора.Добавить(Результат.Ссылка, Представление);
		КонецЦикла;
	Иначе
		ДанныеВыбора.Добавить(Справочники[ИмяСправочника].ПустаяСсылка());
	КонецЕсли;	
	//ДанныеВыбора.ЗагрузитьЗначения(Результат.ВыгрузитьКолонку("Ссылка"));
	Возврат ДанныеВыбора;
	
	
КонецФункции

// Возвращает список животных, удовлетворяющих введенному тексту поиска,  
// используется при автоподборе в документы. производится отбор только животных, имеющихся в наличии на дату среза.
//
// Параметры:
//	Имя справочника - имя справочника, по которому производится поиск "сжсвХряки" или "сжсвСвиноматки".
//	Текст - текст поиска.
//	ДатаСреза - дата, на которую получаются актуальные данные о животных.  
//	Ферма - ферма, по которой производится поиск животных.
//
// Возврат:
//	Список значений - список животных, удовлетворяющих введенному тексту,
//  в котором представление строится Номер животного + состояние + дней от установки состояния.
Функция ПолучитьДанныеВыбораЖивотногоДляКВУ(ИмяСправочника, Текст, ДатаСреза, Ферма = Неопределено) Экспорт
	
	ДанныеВыбора = Новый СписокЗначений; 
	Если НЕ Текст = "" Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Спр.Ссылка,
		|	Спр.Код,
		|	Спр.Наименование КАК Наименование";
		Если ИмяСправочника = "сжсвСвиноматки" Тогда
			Запрос.Текст = Запрос.Текст + ",
			|	сжсвСостоянияСвиноматокСрезПоследних.Состояние,
			|	РАЗНОСТЬДАТ(сжсвСостоянияСвиноматокСрезПоследних.Период, &ДатаСреза, ДЕНЬ) КАК Дней";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|ИЗ
		|	РегистрНакопления.сжсвЖивотныеВНаличии.Остатки(&ДатаСреза, ";
		Если ЗначениеЗаполнено(Ферма) Тогда
			Запрос.Текст = Запрос.Текст + "Ферма=&Ферма";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + ") КАК сжсвЖивотныеВНаличииОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочника + " КАК Спр
		|		ПО сжсвЖивотныеВНаличииОстатки.";
		Если ИмяСправочника = "сжсвСвиноматки" Тогда
			Запрос.Текст = Запрос.Текст + "Свиноматка";
		Иначе
			Запрос.Текст = Запрос.Текст + "Хряк";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "= Спр.Ссылка";
		Если ИмяСправочника = "сжсвСвиноматки" Тогда
			Запрос.Текст = Запрос.Текст + "
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.сжсвСостоянияСвиноматок.СрезПоследних(&ДатаСреза) КАК сжсвСостоянияСвиноматокСрезПоследних
			|		ПО сжсвЖивотныеВНаличииОстатки.Свиноматка = сжсвСостоянияСвиноматокСрезПоследних.Свиноматка";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|ГДЕ
		|	Спр.Наименование ПОДОБНО """ + Текст + "%""
		|    И ";
		Запрос.Текст = Запрос.Текст + "сжсвЖивотныеВНаличииОстатки.КоличествоОстаток >0";
		Запрос.Текст = Запрос.Текст + "
		|УПОРЯДОЧИТЬ ПО
		|Спр.Наименование";
		Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
		Запрос.УстановитьПараметр("Ферма", Ферма);
		Результат = Запрос.Выполнить().Выбрать();
		
		ДанныеВыбора = Новый СписокЗначений; 
		Пока Результат.Следующий() Цикл
			Представление = Результат.Наименование + " (";
			Если ИмяСправочника = "сжсвСвиноматки" Тогда
				Если Результат.Состояние = Перечисления.сжсвСостоянияСвиноматки.ТяжелоСупоросная Тогда
					Состояние = "Тяж-суп";
				ИначеЕсли Результат.Состояние = Перечисления.сжсвСостоянияСвиноматки.УсловноСупоросная Тогда
					Состояние = "Усл-суп";
				ИначеЕсли Результат.Состояние = Перечисления.сжсвСостоянияСвиноматки.Супоросная Тогда
					Состояние = "Супор";
				Иначе
					Состояние = Результат.Состояние;
				КонецЕсли;
				
				Представление = Представление + Состояние + " " + Результат.Дней + "дн)";
			Иначе
				Представление = Представление + Результат.Код + ")";
			КонецЕсли;
			
			ДанныеВыбора.Добавить(Результат.Ссылка, Представление);
		КонецЦикла;
	Иначе
		ДанныеВыбора.Добавить(Справочники[ИмяСправочника].ПустаяСсылка());
	КонецЕсли;
	
	//ДанныеВыбора.ЗагрузитьЗначения(Результат.ВыгрузитьКолонку("Ссылка"));
	Возврат ДанныеВыбора;
	
	
КонецФункции

#КонецОбласти

#Область РасчетСтатистическихПоказателей

// Возвращает данные, необходимые для расчета коэффициента наследуемости.
//
// Возврат:
//	Таблица значений - результаты оценки животных.
Функция ПолучитьДанныеДляРассчетаКоэффициентов() Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Животное");
	Результат.Колонки.Добавить("Показатель");
	Результат.Колонки.Добавить("Значение");
	//НоваяСтрока = Результат.Добавить();
	//НоваяСтрока.Показатель = Перечисления.КритерииОценки.ТолщинаШпига;
	//НоваяСтрока.Значение = 10;
	//НоваяСтрока = Результат.Добавить();
	//НоваяСтрока.Показатель = Перечисления.КритерииОценки.ТолщинаШпига;
	//НоваяСтрока.Значение = 13;
	//НоваяСтрока = Результат.Добавить();
	//НоваяСтрока.Показатель = Перечисления.КритерииОценки.ТолщинаШпига;
	//НоваяСтрока.Значение = 13;
	//НоваяСтрока = Результат.Добавить();
	//НоваяСтрока.Показатель = Перечисления.КритерииОценки.ТолщинаШпига;
	//НоваяСтрока.Значение = 8;
	//НоваяСтрока = Результат.Добавить();
	//НоваяСтрока.Показатель = Перечисления.КритерииОценки.ТолщинаШпига;
	//НоваяСтрока.Значение = 10;
	//НоваяСтрока = Результат.Добавить();
	//НоваяСтрока.Показатель = Перечисления.КритерииОценки.ТолщинаШпига;
	//НоваяСтрока.Значение = 10;
	//НоваяСтрока = Результат.Добавить();
	//НоваяСтрока.Показатель = Перечисления.КритерииОценки.ТолщинаШпига;
	//НоваяСтрока.Значение = 11;
	//НоваяСтрока = Результат.Добавить();
	//НоваяСтрока.Показатель = Перечисления.КритерииОценки.ТолщинаШпига;
	//НоваяСтрока.Значение = 6;
	//НоваяСтрока = Результат.Добавить();
	//НоваяСтрока.Показатель = Перечисления.КритерииОценки.ТолщинаШпига;
	//НоваяСтрока.Значение = 12;
	//НоваяСтрока = Результат.Добавить();
	//НоваяСтрока.Показатель = Перечисления.КритерииОценки.ТолщинаШпига;
	//НоваяСтрока.Значение = 13;
	//НоваяСтрока = Результат.Добавить();
	//НоваяСтрока.Показатель = Перечисления.КритерииОценки.ТолщинаШпига;
	//НоваяСтрока.Значение = 12;
	//НоваяСтрока = Результат.Добавить();
	//НоваяСтрока.Показатель = Перечисления.КритерииОценки.ТолщинаШпига;
	//НоваяСтрока.Значение = 12;
	//НоваяСтрока = Результат.Добавить();
	//НоваяСтрока.Показатель = Перечисления.КритерииОценки.ТолщинаШпига;
	//НоваяСтрока.Значение = 10;
	//НоваяСтрока = Результат.Добавить();
	//НоваяСтрока.Показатель = Перечисления.КритерииОценки.ТолщинаШпига;
	//НоваяСтрока.Значение = 10;
	//НоваяСтрока = Результат.Добавить();
	//НоваяСтрока.Показатель = Перечисления.КритерииОценки.ТолщинаШпига;
	//НоваяСтрока.Значение = 10;
	//НоваяСтрока = Результат.Добавить();
	//НоваяСтрока.Показатель = Перечисления.КритерииОценки.ТолщинаШпига;
	//НоваяСтрока.Значение = 10;
	//НоваяСтрока = Результат.Добавить();
	//НоваяСтрока.Показатель = Перечисления.КритерииОценки.ТолщинаШпига;
	//НоваяСтрока.Значение = 15;
	//НоваяСтрока = Результат.Добавить();
	//НоваяСтрока.Показатель = Перечисления.КритерииОценки.ТолщинаШпига;
	//НоваяСтрока.Значение = 12;
	//НоваяСтрока = Результат.Добавить();
	//НоваяСтрока.Показатель = Перечисления.КритерииОценки.ТолщинаШпига;
	//НоваяСтрока.Значение = 9;
	//НоваяСтрока = Результат.Добавить();
	//НоваяСтрока.Показатель = Перечисления.КритерииОценки.ТолщинаШпига;
	//НоваяСтрока.Значение = 9;
	//НоваяСтрока = Результат.Добавить();
	//НоваяСтрока.Показатель = Перечисления.КритерииОценки.ТолщинаШпига;
	//НоваяСтрока.Значение = 9;
	//НоваяСтрока = Результат.Добавить();
	//НоваяСтрока.Показатель = Перечисления.КритерииОценки.ТолщинаШпига;
	//НоваяСтрока.Значение = 6;
	//НоваяСтрока = Результат.Добавить();
	//НоваяСтрока.Показатель = Перечисления.КритерииОценки.ТолщинаШпига;
	//НоваяСтрока.Значение = 6;
	//НоваяСтрока = Результат.Добавить();
	//НоваяСтрока.Показатель = Перечисления.КритерииОценки.ТолщинаШпига;
	//НоваяСтрока.Значение = 6;
	//НоваяСтрока = Результат.Добавить();
	//НоваяСтрока.Показатель = Перечисления.КритерииОценки.ТолщинаШпига;
	//НоваяСтрока.Значение = 6;
	//НоваяСтрока = Результат.Добавить();
	//НоваяСтрока.Показатель = Перечисления.КритерииОценки.ТолщинаШпига;
	//НоваяСтрока.Значение = 13;
	//НоваяСтрока = Результат.Добавить();
	//НоваяСтрока.Показатель = Перечисления.КритерииОценки.ТолщинаШпига;
	//НоваяСтрока.Значение = 9;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ОценкаСвиноматок.Период,
	|	ОценкаСвиноматок.Регистратор,
	|	ОценкаСвиноматок.НомерСтроки,
	|	ОценкаСвиноматок.Активность,
	|	ОценкаСвиноматок.Свиноматка,
	|	ОценкаСвиноматок.ТипОценки,
	|	ОценкаСвиноматок.Масса,
	|	ОценкаСвиноматок.ДлинаТуловища,
	|	ОценкаСвиноматок.Экстерьер,
	|	ОценкаСвиноматок.ТолщинаШпига,
	|	ОценкаСвиноматок.Возраст,
	|	ОценкаСвиноматок.КонверсияКорма,
	|	ОценкаСвиноматок.Привес,
	|	ОценкаСвиноматок.Кормодней,
	|	ОценкаСвиноматок.ТолщинаШпига1,
	|	ОценкаСвиноматок.ТолщинаШпига2,
	|	ОценкаСвиноматок.ГлубинаМышцы,
	|	ОценкаСвиноматок.Ферма
	|ПОМЕСТИТЬ РегистрОценкаСвиноматок
	|ИЗ
	|	РегистрСведений.ОценкаСвиноматок КАК ОценкаСвиноматок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОценкаХряков.Период,
	|	ОценкаХряков.Регистратор,
	|	ОценкаХряков.НомерСтроки,
	|	ОценкаХряков.Активность,
	|	ОценкаХряков.Хряк,
	|	ОценкаХряков.ТипОценки,
	|	ОценкаХряков.Масса,
	|	ОценкаХряков.ДлинаТуловища,
	|	ОценкаХряков.Экстерьер,
	|	ОценкаХряков.Возраст,
	|	ОценкаХряков.ТолщинаШпига,
	|	ОценкаХряков.КонверсияКорма,
	|	ОценкаХряков.общийВид,
	|	ОценкаХряков.ГоловаШея,
	|	ОценкаХряков.ПлечиХолкаГрудь,
	|	ОценкаХряков.СпинаПоясницаБока,
	|	ОценкаХряков.КрестецОкорока,
	|	ОценкаХряков.НогиПередние,
	|	ОценкаХряков.НогиЗадние,
	|	ОценкаХряков.СоскиВымя,
	|	ОценкаХряков.ПоловыеОрганы,
	|	ОценкаХряков.Привес,
	|	ОценкаХряков.Кормодней,
	|	ОценкаХряков.ТолщинаШпига1,
	|	ОценкаХряков.ТолщинаШпига2,
	|	ОценкаХряков.ГлубинаМышцы,
	|	ОценкаХряков.Ферма
	|ПОМЕСТИТЬ РегистрОценкаХряков
	|ИЗ
	|	РегистрСведений.ОценкаХряков КАК ОценкаХряков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроизводственныйЦикл.Свиноматка КАК Животное,
	|	ЗНАЧЕНИЕ(Перечисление.КритерииОценки.Многоплодие) КАК Показатель,
	|	СРЕДНЕЕ(ПроизводственныйЦикл.Голов) КАК Значение
	|ИЗ
	|	РегистрСведений.ПроизводственныйЦикл КАК ПроизводственныйЦикл
	|ГДЕ
	|	ПроизводственныйЦикл.Событие = ЗНАЧЕНИЕ(Перечисление.События.Опорос)
	|	И ПроизводственныйЦикл.Голов <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроизводственныйЦикл.Свиноматка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РегистрОценкаСвиноматок.Свиноматка,
	|	ЗНАЧЕНИЕ(Перечисление.КритерииОценки.ДлинаТуловищаВ100Кг),
	|	МАКСИМУМ(РегистрОценкаСвиноматок.ДлинаТуловища)
	|ИЗ
	|	РегистрОценкаСвиноматок КАК РегистрОценкаСвиноматок
	|ГДЕ
	|	РегистрОценкаСвиноматок.ДлинаТуловища <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	РегистрОценкаСвиноматок.Свиноматка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РегистрОценкаХряков.Хряк,
	|	ЗНАЧЕНИЕ(Перечисление.КритерииОценки.ДлинаТуловищаВ100Кг),
	|	МАКСИМУМ(РегистрОценкаХряков.ДлинаТуловища)
	|ИЗ
	|	РегистрОценкаХряков КАК РегистрОценкаХряков
	|ГДЕ
	|	РегистрОценкаХряков.ДлинаТуловища <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	РегистрОценкаХряков.Хряк
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РегистрОценкаСвиноматок.Свиноматка,
	|	ЗНАЧЕНИЕ(Перечисление.КритерииОценки.ТолщинаШпига),
	|	СРЕДНЕЕ(РегистрОценкаСвиноматок.ТолщинаШпига)
	|ИЗ
	|	РегистрОценкаСвиноматок КАК РегистрОценкаСвиноматок
	|ГДЕ
	|	РегистрОценкаСвиноматок.ТолщинаШпига <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	РегистрОценкаСвиноматок.Свиноматка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РегистрОценкаХряков.Хряк,
	|	ЗНАЧЕНИЕ(Перечисление.КритерииОценки.ТолщинаШпига),
	|	СРЕДНЕЕ(РегистрОценкаХряков.ТолщинаШпига)
	|ИЗ
	|	РегистрОценкаХряков КАК РегистрОценкаХряков
	|ГДЕ
	|	РегистрОценкаХряков.ТолщинаШпига <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	РегистрОценкаХряков.Хряк
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РегистрОценкаСвиноматок.Свиноматка,
	|	ЗНАЧЕНИЕ(Перечисление.КритерииОценки.ВозрастВ100Кг),
	|	МИНИМУМ(РегистрОценкаСвиноматок.Возраст)
	|ИЗ
	|	РегистрОценкаСвиноматок КАК РегистрОценкаСвиноматок
	|ГДЕ
	|	РегистрОценкаСвиноматок.ТипОценки = ЗНАЧЕНИЕ(Перечисление.ТипОценки.В100кг)
	|	И РегистрОценкаСвиноматок.Возраст <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	РегистрОценкаСвиноматок.Свиноматка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РегистрОценкаХряков.Хряк,
	|	ЗНАЧЕНИЕ(Перечисление.КритерииОценки.ВозрастВ100Кг),
	|	МИНИМУМ(РегистрОценкаХряков.Возраст)
	|ИЗ
	|	РегистрОценкаХряков КАК РегистрОценкаХряков
	|ГДЕ
	|	РегистрОценкаХряков.ТипОценки = ЗНАЧЕНИЕ(Перечисление.ТипОценки.В100кг)
	|	И РегистрОценкаХряков.Возраст <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	РегистрОценкаХряков.Хряк
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПроизводственныйЦикл.Свиноматка,
	|	ЗНАЧЕНИЕ(Перечисление.КритерииОценки.Молочность30),
	|	МАКСИМУМ(ПроизводственныйЦикл.Масса)
	|ИЗ
	|	РегистрСведений.ПроизводственныйЦикл КАК ПроизводственныйЦикл
	|ГДЕ
	|	(ПроизводственныйЦикл.Событие = ЗНАЧЕНИЕ(Перечисление.События.Отъем)
	|			ИЛИ ПроизводственныйЦикл.Событие = ЗНАЧЕНИЕ(Перечисление.События.РаннийОтъем))
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроизводственныйЦикл.Свиноматка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОценкаСвиноматокСрезПоследних.Свиноматка,
	|	ЗНАЧЕНИЕ(Перечисление.КритерииОценки.КонверсияКорма),
	|	ВЫБОР
	|		КОГДА ОценкаСвиноматокСрезПоследних100.Масса - ОценкаСвиноматокСрезПоследних.Масса = 0
	|			ТОГДА 0
	|		ИНАЧЕ РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ОценкаСвиноматокСрезПоследних.Период, ДЕНЬ), НАЧАЛОПЕРИОДА(ОценкаСвиноматокСрезПоследних100.Период, ДЕНЬ), ДЕНЬ) * &НормаКормленияМолодняка / (ОценкаСвиноматокСрезПоследних100.Масса - ОценкаСвиноматокСрезПоследних.Масса)
	|	КОНЕЦ
	|ИЗ
	|	РегистрСведений.ОценкаСвиноматок.СрезПоследних(, ТипОценки = ЗНАЧЕНИЕ(Перечисление.ТипОценки.НаВыращивании)) КАК ОценкаСвиноматокСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОценкаСвиноматок.СрезПоследних(, ТипОценки = ЗНАЧЕНИЕ(Перечисление.ТипОценки.В100кг)) КАК ОценкаСвиноматокСрезПоследних100
	|		ПО ОценкаСвиноматокСрезПоследних.Свиноматка = ОценкаСвиноматокСрезПоследних100.Свиноматка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОценкаХряковСрезПоследних.Хряк,
	|	ЗНАЧЕНИЕ(Перечисление.КритерииОценки.КонверсияКорма),
	|	ВЫБОР
	|		КОГДА ОценкаХряковСрезПоследних100.Масса - ОценкаХряковСрезПоследних.Масса = 0
	|			ТОГДА 0
	|		ИНАЧЕ РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ОценкаХряковСрезПоследних.Период, ДЕНЬ), НАЧАЛОПЕРИОДА(ОценкаХряковСрезПоследних100.Период, ДЕНЬ), ДЕНЬ) * &НормаКормленияМолодняка / (ОценкаХряковСрезПоследних100.Масса - ОценкаХряковСрезПоследних.Масса)
	|	КОНЕЦ
	|ИЗ
	|	РегистрСведений.ОценкаХряков.СрезПоследних(, ТипОценки = ЗНАЧЕНИЕ(Перечисление.ТипОценки.НаВыращивании)) КАК ОценкаХряковСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОценкаХряков.СрезПоследних(, ТипОценки = ЗНАЧЕНИЕ(Перечисление.ТипОценки.В100кг)) КАК ОценкаХряковСрезПоследних100
	|		ПО ОценкаХряковСрезПоследних.Хряк = ОценкаХряковСрезПоследних100.Хряк";
	//Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	//Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("НормаКормленияМолодняка", Константы.НормаКормленияРемонтногоМолодняка.Получить());
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат;
	
КонецФункции

// ПоказателиНаследуемости: Тип - ТаблицаЗначений(Показатель, КоэффициентНаследуемости, КритерийФишера)
// ТаблицаПоказателей: Тип - ТаблицаЗначений(Животное, Показатель, значение.)
Функция РассчитатьСтатистическиеКоэффициенты(ТаблицаПоказателей, ПоказателиНаследуемости) Экспорт
	
	КЧ = Новый КвалификаторыЧисла(10,3);
	Массив = Новый Массив;
	Массив.Добавить(Тип("ПеречислениеСсылка.КритерииОценки"));
	ОписаниеТиповП = Новый ОписаниеТипов(Массив);
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Показатель", ОписаниеТиповП);
	Массив.Очистить();
	Массив.Добавить(Тип("Число"));
	ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , ,КЧ);
	Результат.Колонки.Добавить("Среднее", ОписаниеТиповЧ);
	Результат.Колонки.Добавить("Дисперсия");
	Результат.Колонки.Добавить("СтандартноеОтклонение");
	Результат.Колонки.Добавить("КоэффициентВариации");
	Результат.Колонки.Добавить("СредняяОшибка");
	Результат.Колонки.Добавить("КоэффициентНаследуемости");
	Результат.Колонки.Добавить("КритерийФишера");
	Результат.Колонки.Добавить("СреднееПоВедущейГруппе");
	Результат.Колонки.Добавить("СелекционныйДифферинциал");
	Результат.Колонки.Добавить("ЭффектСелекции");
	Результат.Колонки.Добавить("ЦелевойСтандарт");
	ТаблицаПоказателей.Сортировать("Показатель");
	Сумма = 0;
	СуммаКвадратов = 0;
	Количество = 0;
	ПредПоказатель = Перечисления.КритерииОценки.ПустаяСсылка();
	Для каждого СтрокаТаблицы Из ТаблицаПоказателей Цикл
		Если Не ЗначениеЗаполнено(ПредПоказатель) Тогда
			ПредПоказатель = СтрокаТаблицы.Показатель;
		КонецЕсли;
		Если НЕ СтрокаТаблицы.Показатель=ПредПоказатель Тогда
			НоваяСтрока = Результат.Добавить();
			НоваяСтрока.Показатель = ПредПоказатель;
			НоваяСтрока.Среднее = ?(Количество=0, 0, Сумма/Количество);
			НоваяСтрока.Дисперсия = ?(Количество=0, 0, СуммаКвадратов-(Pow(Сумма, 2)/Количество)); 
			НоваяСтрока.СтандартноеОтклонение = ?(Количество<=1,0,SQRT(НоваяСтрока.Дисперсия/(Количество-1)));
			НоваяСтрока.КоэффициентВариации = ?(НоваяСтрока.Среднее=0,0,(НоваяСтрока.СтандартноеОтклонение/НоваяСтрока.Среднее)*100);
			НоваяСтрока.СредняяОшибка = ?(Количество=0,0,НоваяСтрока.СтандартноеОтклонение/SQRT(Количество));
			НаследуемостьПоПоказателю = ПоказателиНаследуемости.Найти(ПредПоказатель, "Показатель");
			если НЕ НаследуемостьПоПоказателю = Неопределено Тогда
				НоваяСтрока.КоэффициентНаследуемости = НаследуемостьПоПоказателю.КоэффициентНаследуемости;
				НоваяСтрока.КритерийФишера = НаследуемостьПоПоказателю.КритерийФишера;
			КонецЕсли;
			ПредПоказатель = СтрокаТаблицы.Показатель;
			Сумма = 0;
			СуммаКвадратов = 0;
			Количество = 0;
		КонецЕсли;
		Сумма = Сумма + СтрокаТаблицы.Значение;
		СуммаКвадратов = СуммаКвадратов + Pow(СтрокаТаблицы.Значение, 2);
		Количество = Количество + 1;
	КонецЦикла;
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.Показатель = ПредПоказатель;
	НоваяСтрока.Среднее = ?(Количество=0, 0, Сумма/Количество);
	НоваяСтрока.Дисперсия = ?(Количество=0, 0, СуммаКвадратов-(Pow(Сумма, 2)/Количество)); 
	НоваяСтрока.СтандартноеОтклонение = ?(Количество<=1,0,SQRT(НоваяСтрока.Дисперсия/(Количество-1)));
	НоваяСтрока.КоэффициентВариации = ?(НоваяСтрока.Среднее=0,0,(НоваяСтрока.СтандартноеОтклонение/НоваяСтрока.Среднее)*100);
	НоваяСтрока.СредняяОшибка = ?(Количество=0,0,НоваяСтрока.СтандартноеОтклонение/SQRT(Количество));
	НаследуемостьПоПоказателю = ПоказателиНаследуемости.Найти(ПредПоказатель, "Показатель");
	если НЕ НаследуемостьПоПоказателю = Неопределено Тогда
		НоваяСтрока.КоэффициентНаследуемости = НаследуемостьПоПоказателю.КоэффициентНаследуемости;
		НоваяСтрока.КритерийФишера = НаследуемостьПоПоказателю.КритерийФишера;
	КонецЕсли;
	
	СреднееПоВедущейГруппе = ПолучитьЗначенияПоВедущейГруппе(ТаблицаПоказателей, Результат);
	Для каждого СтрокаВед Из СреднееПоВедущейГруппе Цикл
		Отбор = Новый Структура;
		Отбор.Вставить("Показатель", СтрокаВед.Показатель);
		СтрокаПоказателя = Результат.НайтиСтроки(Отбор);
		Если СтрокаПоказателя.Количество() > 0 Тогда
			СтрокаПоказателя[0].СреднееПоВедущейГруппе = СтрокаВед.Значение;
			СтрокаПоказателя[0].СелекционныйДифферинциал = СтрокаПоказателя[0].СреднееПоВедущейГруппе - СтрокаПоказателя[0].Среднее;
			Если Не СтрокаПоказателя[0].КоэффициентНаследуемости = Неопределено Тогда 
				СтрокаПоказателя[0].ЭффектСелекции = СтрокаПоказателя[0].КоэффициентНаследуемости*СтрокаПоказателя[0].СелекционныйДифферинциал;
				СтрокаПоказателя[0].ЦелевойСтандарт = СтрокаПоказателя[0].Среднее + СтрокаПоказателя[0].ЭффектСелекции;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает значения воспроизводственных показателей животных,
// находящихся в ведущей группу.
//
// Параметры:
//	Таблица показателей - таблица значений, содержащая данные о средних значениях
//						  показателей всех животных.
//	ТаблицаСредних - таблица значений, содержащая средние показатели по стаду.
//
// Возврат:
//	Таблица значений - таблица средних значений показателей животных, находящихся в ведущей группе.
Функция ПолучитьЗначенияПоВедущейГруппе(ТаблицаПоказателей, ТаблицаСредних)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаПоказателей.Показатель,
	|	ТаблицаПоказателей.Значение
	|ПОМЕСТИТЬ Показатели
	|ИЗ
	|	&ТаблицаПоказателей КАК ТаблицаПоказателей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСредних.Показатель,
	|	ТаблицаСредних.Среднее
	|ПОМЕСТИТЬ Средние
	|ИЗ
	|	&ТаблицаСредних КАК ТаблицаСредних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Показатели.Показатель,
	|	СРЕДНЕЕ(Показатели.Значение) КАК Значение,
	|	СУММА(1) КАК Количество
	|ИЗ
	|	Показатели КАК Показатели
	|		ЛЕВОЕ СОЕДИНЕНИЕ Средние КАК Средние
	|		ПО Показатели.Показатель = Средние.Показатель
	|ГДЕ
	|	ВЫБОР
	|			КОГДА Показатели.Показатель = ЗНАЧЕНИЕ(Перечисление.КритерииОценки.КонверсияКорма)
	|					ИЛИ Показатели.Показатель = ЗНАЧЕНИЕ(Перечисление.КритерииОценки.ВозрастВ100кг)
	|				ТОГДА Показатели.Значение < Средние.Среднее
	|			ИНАЧЕ Показатели.Значение > Средние.Среднее
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	Показатели.Показатель";
	Запрос.УстановитьПараметр("ТаблицаПоказателей", ТаблицаПоказателей);
	Запрос.УстановитьПараметр("ТаблицаСредних", ТаблицаСредних);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

// Возвращает усредненное значение воспроизводственных показателей животных,
// находящихся в ведущей группу.
//
// Параметры:
//	Таблица показателей - таблица значений, содержащая данные о средних значениях
//						  показателей животных ведущей группы.
//	Среднее - среднее значение показателя по стаду.
//
// Возврат:
//	Число - среднее значение показателя по ведущей группе.
Функция ПолучитьЗначениеПоВедущейГруппеСреднее(ТаблицаПоказателей, Среднее) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаПоказателей.Значение КАК Значение
	|ПОМЕСТИТЬ ТаблицаПоказателей
	|ИЗ
	|	&ТаблицаПоказателей КАК ТаблицаПоказателей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СРЕДНЕЕ(ЕСТЬNULL(ТаблицаПоказателей.Значение,0)) КАК Значение,
	|	СУММА(1) КАК Количество
	|ИЗ
	|	ТаблицаПоказателей КАК ТаблицаПоказателей
	|ГДЕ
	|	ТаблицаПоказателей.Значение > &Среднее";
	Запрос.УстановитьПараметр("ТаблицаПоказателей", ТаблицаПоказателей);
	Запрос.УстановитьПараметр("Среднее", Среднее);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Результат = ?(ЗначениеЗаполнено(Выборка.Значение), Выборка.Значение, 0);
	Возврат Результат;
	
КонецФункции

// Возвращает количество животных, находящихся в ведущей группе по показателю.
//
// Параметры:
//	Таблица показателей - таблица значений, содержащая данные о средних значениях
//						  показателей животных ведущей группы.
//	Среднее - среднее значение показателя по стаду.
//
// Возврат:
//	Число - среднее значение показателя по ведущей группе.
Функция ПолучитьЗначениеПоВедущейГруппеКоличество(ТаблицаПоказателей, Среднее)  Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаПоказателей.Значение КАК Значение
	|ПОМЕСТИТЬ ТаблицаПоказателей
	|ИЗ
	|	&ТаблицаПоказателей КАК ТаблицаПоказателей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СРЕДНЕЕ(ТаблицаПоказателей.Значение) КАК Значение,
	|	СУММА(1) КАК Количество
	|ИЗ
	|	ТаблицаПоказателей КАК ТаблицаПоказателей
	|ГДЕ
	|	ТаблицаПоказателей.Значение > &Среднее";
	Запрос.УстановитьПараметр("ТаблицаПоказателей", ТаблицаПоказателей);
	Запрос.УстановитьПараметр("Среднее", Среднее);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Результат = Выборка.Количество;
	Возврат Результат;
	
КонецФункции

// Функция предназначена для формирования таблицы значений для определения коэффициента наследуемости.
Функция СоздатьТаблицуНаследуемостиМногоплодие() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Потомки.Потомок,
	|	Потомки.Свиноматка КАК Хряк
	|ПОМЕСТИТЬ Потомки
	|ИЗ
	|	РегистрСведений.Потомки КАК Потомки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РезультатыОсеменений.Свиноматка,
	|	СРЕДНЕЕ(РезультатыОсеменений.ГоловОп) КАК Живых
	|ПОМЕСТИТЬ Многоплодие
	|ИЗ
	|	Потомки КАК Потомки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РезультатыОсеменений КАК РезультатыОсеменений
	|		ПО Потомки.Потомок = РезультатыОсеменений.Свиноматка
	|ГДЕ
	|	РезультатыОсеменений.Опорос = 1
	|	И РезультатыОсеменений.ВсегоОп > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	РезультатыОсеменений.Свиноматка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(Многоплодие.Живых) КАК Показатель,
	|	СУММА(Многоплодие.Живых * Многоплодие.Живых) КАК ПоказательКвадрат,
	|	СУММА(1) КАК Количество,
	|	Потомки.Хряк КАК Животное
	|ИЗ
	|	Потомки КАК Потомки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Многоплодие КАК Многоплодие
	|		ПО Потомки.Потомок = Многоплодие.Свиноматка
	|ГДЕ
	|	Потомки.Хряк <> ЗНАЧЕНИЕ(Справочник.Свиноматки.ПустаяСсылка)
	|	И Потомки.Хряк <> ЗНАЧЕНИЕ(Справочник.Хряки.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	Потомки.Хряк";
	Возврат Запрос.Выполнить().Выгрузить();
	
	//Тз = Новый ТаблицаЗначений;
	//Тз.Колонки.Добавить("Показатель");
	//Тз.Колонки.Добавить("ПоказательКвадрат");
	//Тз.Колонки.Добавить("Количество");
	//Тз.Колонки.Добавить("Животное");
	//НоваяСтрока = Тз.Добавить();
	//НоваяСтрока.Показатель = 207+200+169+205+172+180+157+172;
	//НоваяСтрока.ПоказательКвадрат = 207*207+200*200+169*169+205*205+172*172+180*180+157*157+172*172;
	//НоваяСтрока.Количество = 8;
	//
	//НоваяСтрока = Тз.Добавить();
	//НоваяСтрока.Показатель = 187+188+177+191+172+232+200+206+200+219+179+207;
	//НоваяСтрока.ПоказательКвадрат = 187*187+188*188+177*177+191*191+172*172+232*232+200*200+206*206+200*200+219*219+179*179+207*207;
	//НоваяСтрока.Количество = 12;
	
	//НоваяСтрока = Тз.Добавить();
	//НоваяСтрока.Показатель = 210+178+164+155+129;
	//НоваяСтрока.ПоказательКвадрат = 210*210+178*178+164*164+155*155+129*129;
	//НоваяСтрока.Количество = 5;
	
	//НоваяСтрока = Тз.Добавить();
	//НоваяСтрока.Показатель = 192+213+218+198+183+221+188+210;
	//НоваяСтрока.ПоказательКвадрат = 192*192+213*213+218*218+198*198+183*183+221*221+188*188+210*210;
	//НоваяСтрока.Количество = 8;
	
	//НоваяСтрока = Тз.Добавить();
	//НоваяСтрока.Показатель = 193+188+211+226+197+199+214+224;
	//НоваяСтрока.ПоказательКвадрат = 193*193+188*188+211*211+226*226+197*197+199*199+214*214+224*224;
	//НоваяСтрока.Количество = 8;
	
	//Возврат Тз;
	
КонецФункции

// Функция предназначена для формирования таблицы значений для определения коэффициента наследуемости.
Функция СоздатьТаблицуНаследуемостиМолочность() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Потомки.Потомок,
	|	Потомки.Свиноматка.Кличка КАК Хряк
	|ПОМЕСТИТЬ Потомки
	|ИЗ
	|	РегистрСведений.Потомки КАК Потомки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РезультатыОсеменений.Свиноматка,
	|	РезультатыОсеменений.МассаОт
	|ПОМЕСТИТЬ Молочность
	|ИЗ
	|	Потомки КАК Потомки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РезультатыОсеменений КАК РезультатыОсеменений
	|		ПО Потомки.Потомок = РезультатыОсеменений.Свиноматка
	|ГДЕ
	|	РезультатыОсеменений.Отъем = 1
	|	И РезультатыОсеменений.МассаОт > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(1) КАК Количество,
	|	Потомки.Хряк КАК Животное,
	|	СУММА(Молочность.МассаОт) КАК Показатель,
	|	СУММА(Молочность.МассаОт * Молочность.МассаОт) КАК ПоказательКвадрат
	|ИЗ
	|	Потомки КАК Потомки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Молочность КАК Молочность
	|		ПО Потомки.Потомок = Молочность.Свиноматка
	|ГДЕ
	|	Потомки.Хряк <> ЗНАЧЕНИЕ(Справочник.Свиноматки.ПустаяСсылка)
	|	И Потомки.Хряк <> ЗНАЧЕНИЕ(Справочник.Хряки.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	Потомки.Хряк";
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Функция предназначена для формирования таблицы значений для определения коэффициента наследуемости.
Функция СоздатьТаблицуНаследуемостиКонверсия() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Потомки.Потомок,
	|	Потомки.Свиноматка.Кличка КАК Хряк
	|ПОМЕСТИТЬ Потомки
	|ИЗ
	|	РегистрСведений.Потомки КАК Потомки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ОценкаСвиноматокСрезПоследних100.Масса - ОценкаСвиноматокСрезПоследних.Масса = 0
	|			ТОГДА 0
	|		ИНАЧЕ РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ОценкаСвиноматокСрезПоследних.Период, ДЕНЬ), НАЧАЛОПЕРИОДА(ОценкаСвиноматокСрезПоследних100.Период, ДЕНЬ), ДЕНЬ) * &НормаКормленияМолодняка / (ОценкаСвиноматокСрезПоследних100.Масса - ОценкаСвиноматокСрезПоследних.Масса)
	|	КОНЕЦ КАК Показатель,
	|	Потомки.Потомок КАК Животное,
	|	ВЫБОР
	|		КОГДА ОценкаСвиноматокСрезПоследних100.Масса - ОценкаСвиноматокСрезПоследних.Масса = 0
	|			ТОГДА 0
	|		ИНАЧЕ РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ОценкаСвиноматокСрезПоследних.Период, ДЕНЬ), НАЧАЛОПЕРИОДА(ОценкаСвиноматокСрезПоследних100.Период, ДЕНЬ), ДЕНЬ) * &НормаКормленияМолодняка / (ОценкаСвиноматокСрезПоследних100.Масса - ОценкаСвиноматокСрезПоследних.Масса) * (РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ОценкаСвиноматокСрезПоследних.Период, ДЕНЬ), НАЧАЛОПЕРИОДА(ОценкаСвиноматокСрезПоследних100.Период, ДЕНЬ), ДЕНЬ) * &НормаКормленияМолодняка / (ОценкаСвиноматокСрезПоследних100.Масса - ОценкаСвиноматокСрезПоследних.Масса))
	|	КОНЕЦ КАК ПоказательКвадрат
	|ПОМЕСТИТЬ КонверсияКорма
	|ИЗ
	|	Потомки КАК Потомки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОценкаСвиноматок.СрезПоследних(
	|				,
	|				ТипОценки = ЗНАЧЕНИЕ(Перечисление.ТипОценки.НаВыращивании)
	|					И Масса <> 0) КАК ОценкаСвиноматокСрезПоследних
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОценкаСвиноматок.СрезПоследних(
	|					,
	|					ТипОценки = ЗНАЧЕНИЕ(Перечисление.ТипОценки.В100кг)
	|						И Масса <> 0) КАК ОценкаСвиноматокСрезПоследних100
	|			ПО ОценкаСвиноматокСрезПоследних.Свиноматка = ОценкаСвиноматокСрезПоследних100.Свиноматка
	|		ПО Потомки.Потомок = ОценкаСвиноматокСрезПоследних.Свиноматка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ОценкаХряковСрезПоследних100.Масса - ОценкаХряковСрезПоследних.Масса = 0
	|			ТОГДА 0
	|		ИНАЧЕ РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ОценкаХряковСрезПоследних.Период, ДЕНЬ), НАЧАЛОПЕРИОДА(ОценкаХряковСрезПоследних100.Период, ДЕНЬ), ДЕНЬ) * &НормаКормленияМолодняка / (ОценкаХряковСрезПоследних100.Масса - ОценкаХряковСрезПоследних.Масса)
	|	КОНЕЦ,
	|	Потомки.Потомок,
	|	ВЫБОР
	|		КОГДА ОценкаХряковСрезПоследних100.Масса - ОценкаХряковСрезПоследних.Масса = 0
	|			ТОГДА 0
	|		ИНАЧЕ РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ОценкаХряковСрезПоследних.Период, ДЕНЬ), НАЧАЛОПЕРИОДА(ОценкаХряковСрезПоследних100.Период, ДЕНЬ), ДЕНЬ) * &НормаКормленияМолодняка / (ОценкаХряковСрезПоследних100.Масса - ОценкаХряковСрезПоследних.Масса) * (РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ОценкаХряковСрезПоследних.Период, ДЕНЬ), НАЧАЛОПЕРИОДА(ОценкаХряковСрезПоследних100.Период, ДЕНЬ), ДЕНЬ) * &НормаКормленияМолодняка / (ОценкаХряковСрезПоследних100.Масса - ОценкаХряковСрезПоследних.Масса))
	|	КОНЕЦ
	|ИЗ
	|	Потомки КАК Потомки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОценкаХряков.СрезПоследних(
	|				,
	|				ТипОценки = ЗНАЧЕНИЕ(Перечисление.ТипОценки.НаВыращивании)
	|					И Масса <> 0) КАК ОценкаХряковСрезПоследних
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОценкаХряков.СрезПоследних(
	|					,
	|					ТипОценки = ЗНАЧЕНИЕ(Перечисление.ТипОценки.В100кг)
	|						И Масса <> 0) КАК ОценкаХряковСрезПоследних100
	|			ПО (ОценкаХряковСрезПоследних100.Хряк = ОценкаХряковСрезПоследних.Хряк)
	|		ПО Потомки.Потомок = ОценкаХряковСрезПоследних.Хряк
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(1) КАК Количество,
	|	Потомки.Хряк КАК Животное,
	|	СУММА(КонверсияКорма.Показатель) КАК Показатель,
	|	СУММА(КонверсияКорма.ПоказательКвадрат) КАК ПоказательКвадрат
	|ИЗ
	|	Потомки КАК Потомки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КонверсияКорма КАК КонверсияКорма
	|		ПО Потомки.Потомок = КонверсияКорма.Животное
	|ГДЕ
	|	Потомки.Хряк <> ЗНАЧЕНИЕ(Справочник.Свиноматки.ПустаяСсылка)
	|	И Потомки.Хряк <> ЗНАЧЕНИЕ(Справочник.Хряки.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	Потомки.Хряк";
	Запрос.УстановитьПараметр("НормаКормленияМолодняка", Константы.НормаКормленияРемонтногоМолодняка.Получить());
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Функция предназначена для формирования таблицы значений для определения коэффициента наследуемости.
Функция СоздатьТаблицуНаследуемостиВозраст100() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Потомки.Потомок,
	|	Потомки.Хряк.КЛичка КАК Хряк
	|ПОМЕСТИТЬ Потомки
	|ИЗ
	|	РегистрСведений.Потомки КАК Потомки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОценкаСвиноматокСрезПоследних.Возраст,
	|	Потомки.Потомок
	|ПОМЕСТИТЬ Возраст100
	|ИЗ
	|	Потомки КАК Потомки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОценкаСвиноматок.СрезПоследних(, ТипОценки = ЗНАЧЕНИЕ(Перечисление.ТипОценки.В100кг)) КАК ОценкаСвиноматокСрезПоследних
	|		ПО Потомки.Потомок = ОценкаСвиноматокСрезПоследних.Свиноматка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(1) КАК Количество,
	|	Потомки.Хряк КАК Животное,
	|	СУММА(Возраст100.Возраст) КАК Показатель,
	|	СУММА(Возраст100.Возраст * Возраст100.Возраст) КАК ПоказательКвадрат
	|ИЗ
	|	Потомки КАК Потомки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Возраст100 КАК Возраст100
	|		ПО Потомки.Потомок = Возраст100.Потомок
	|ГДЕ
	|	Потомки.Хряк <> ЗНАЧЕНИЕ(Справочник.Свиноматки.ПустаяСсылка)
	|	И Потомки.Хряк <> ЗНАЧЕНИЕ(Справочник.Хряки.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	Потомки.Хряк";
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Функция предназначена для формирования таблицы значений для определения коэффициента наследуемости.
Функция СоздатьТаблицуНаследуемостиДлинаТуловища() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Потомки.Потомок,
	|	Потомки.Хряк.Кличка КАК Хряк
	|ПОМЕСТИТЬ Потомки
	|ИЗ
	|	РегистрСведений.Потомки КАК Потомки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Потомки.Потомок,
	|	ОценкаСвиноматокСрезПоследних.ДлинаТуловища
	|ПОМЕСТИТЬ Длина
	|ИЗ
	|	Потомки КАК Потомки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОценкаСвиноматок.СрезПоследних(
	|				,
	|				ТипОценки = ЗНАЧЕНИЕ(Перечисление.ТипОценки.В100кг)
	|					И ДлинаТуловища <> 0) КАК ОценкаСвиноматокСрезПоследних
	|		ПО Потомки.Потомок = ОценкаСвиноматокСрезПоследних.Свиноматка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(1) КАК Количество,
	|	Потомки.Хряк КАК Животное,
	|	СУММА(Длина.ДлинаТуловища) КАК Показатель,
	|	СУММА(Длина.ДлинаТуловища * Длина.ДлинаТуловища) КАК ПоказательКвадрат
	|ИЗ
	|	Потомки КАК Потомки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Длина КАК Длина
	|		ПО Потомки.Потомок = Длина.Потомок
	|ГДЕ
	|	Потомки.Хряк <> ЗНАЧЕНИЕ(Справочник.Свиноматки.ПустаяСсылка)
	|	И Потомки.Хряк <> ЗНАЧЕНИЕ(Справочник.Хряки.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	Потомки.Хряк";
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Функция предназначена для формирования таблицы значений для определения коэффициента наследуемости.
Функция СоздатьТаблицуНаследуемостиТолщинаШпига() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Потомки.Потомок,
	|	Потомки.Хряк.Кличка КАК Хряк
	|ПОМЕСТИТЬ Потомки
	|ИЗ
	|	РегистрСведений.Потомки КАК Потомки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Потомки.Потомок,
	|	ОценкаСвиноматокСрезПоследних.ТолщинаШпига
	|ПОМЕСТИТЬ Шпиг
	|ИЗ
	|	Потомки КАК Потомки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОценкаСвиноматок.СрезПоследних(
	|				,
	|				ТипОценки = ЗНАЧЕНИЕ(Перечисление.ТипОценки.В100кг)
	|					И ТолщинаШпига <> 0) КАК ОценкаСвиноматокСрезПоследних
	|		ПО Потомки.Потомок = ОценкаСвиноматокСрезПоследних.Свиноматка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(1) КАК Количество,
	|	Потомки.Хряк КАК Животное,
	|	СУММА(Шпиг.ТолщинаШпига) КАК Показатель,
	|	СУММА(Шпиг.ТолщинаШпига * Шпиг.ТолщинаШпига) КАК ПоказательКвадрат
	|ИЗ
	|	Потомки КАК Потомки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Шпиг КАК Шпиг
	|		ПО Потомки.Потомок = Шпиг.Потомок
	|ГДЕ
	|	Потомки.Хряк <> ЗНАЧЕНИЕ(Справочник.Свиноматки.ПустаяСсылка)
	|	И Потомки.Хряк <> ЗНАЧЕНИЕ(Справочник.Хряки.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	Потомки.Хряк";
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Функция предназначена для расчета коэффициента наследуемости.
//
// Параметры:
// ТаблицаНаследуемости, тип: Таблица значений со следующими колонками:
// Показатель - сумма значений показателей по одному фактору.
// ПоказательКвадрат - квадрат показателя.
// Количество - количество наблюдений по одному фактору (для различных факторов количество наблюдений может быть различным.
// Животное - Фактор (животные, по котоорым рассчитывается коэффициент наследуемости).
//
// Возврат:
// ПоказателиНаследуемости, Тип - Структура со следующими колонками:
// Коэффициент наследуемости и Критерий фишера.
Функция РассчитатьКоэффициентНаследуемости(ТаблицаНаследуемости) Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Животное"); // Животное
	Таблица.Колонки.Добавить("n"); // количество
	Таблица.Колонки.Добавить("Sx"); // сумма значений
	Таблица.Колонки.Добавить("Sx2"); // квадрат суммы
	Таблица.Колонки.Добавить("h"); // подсобные величины
	Таблица.Колонки.Добавить("S2x"); // сумма квадратов
	r = 0;
	Для каждого Выборка Из ТаблицаНаследуемости Цикл
		Если Выборка.Количество>1 Тогда 
		НоваяСтрока = Таблица.Добавить(); 
		НоваяСтрока.Животное = Выборка.Животное;
		НоваяСтрока.n = Выборка.Количество;
		НоваяСтрока.Sx = Выборка.Показатель;
		НоваяСтрока.Sx2 = Выборка.Показатель*Выборка.Показатель;
		НоваяСтрока.h = (Выборка.Показатель*Выборка.Показатель)/Выборка.Количество;
		НоваяСтрока.S2x = Выборка.ПоказательКвадрат;
		r = r+1;
		КонецЕсли;
	КонецЦикла;
	ИтоговыеЗначения = Новый Структура;
	ИтоговыеЗначения.Вставить("Количество", Таблица.Итог("n"));
	ИтоговыеЗначения.Вставить("Сумма", Таблица.Итог("Sx"));
	ИтоговыеЗначения.Вставить("СуммаВКвадрате", Таблица.Итог("Sx")*Таблица.Итог("Sx"));
	ИтоговыеЗначения.Вставить("СуммаПодсобных", Таблица.Итог("h"));
	ИтоговыеЗначения.Вставить("СуммаКвадратов", Таблица.Итог("S2x"));
	ИтоговыеЗначения.Вставить("ОбщаяПодсобная", (Таблица.Итог("Sx")*Таблица.Итог("Sx"))/Таблица.Итог("n"));
	ПоказателиНаследуемости = Новый Структура;
	ПоказателиНаследуемости.Вставить("КоэффициентНаследуемости", (ИтоговыеЗначения.СуммаПодсобных - ИтоговыеЗначения.ОбщаяПодсобная)/(ИтоговыеЗначения.СуммаКвадратов - ИтоговыеЗначения.ОбщаяПодсобная));
	ПоказателиНаследуемости.Вставить("КритерийФишера", ((ИтоговыеЗначения.СуммаПодсобных - ИтоговыеЗначения.ОбщаяПодсобная)/(r - 1))/((ИтоговыеЗначения.СуммаКвадратов - ИтоговыеЗначения.СуммаПодсобных)/(ИтоговыеЗначения.Количество - r)));
	Возврат ПоказателиНаследуемости;
КонецФункции

// Функция предназначена для расчета коэффициента наследуемости.
//
// Параметры:
// ТаблицаНаследуемости, тип: Таблица значений со следующими колонками:
// Показатель - сумма значений показателей по одному фактору.
// ПоказательКвадрат - квадрат показателя.
// Количество - количество наблюдений по одному фактору (для различных факторов количество наблюдений может быть различным.
// Животное - Фактор (животные, по котоорым рассчитывается коэффициент наследуемости).
//
// Возвращаемое значение - ПоказателиНаследуемости, Тип - Структура со следующими колонками:
// Коэффициент наследуемости и Критерий фишера.
Функция ПолучитьКоэффициентНаследуемости(ТаблицаНаследуемости) Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Животное"); //Животное
	Таблица.Колонки.Добавить("n"); //количество
	Таблица.Колонки.Добавить("Sx"); // сумма значений
	Таблица.Колонки.Добавить("Sx2"); //квадрат суммы
	Таблица.Колонки.Добавить("h"); //подсобные величины
	Таблица.Колонки.Добавить("S2x"); //сумма квадратов
	r = 0;
	Для каждого Выборка Из ТаблицаНаследуемости Цикл
		Если Выборка.Количество>2 Тогда 
			НоваяСтрока = Таблица.Добавить(); 
			НоваяСтрока.Животное = Выборка.Животное;
			НоваяСтрока.n = Выборка.Количество;
			НоваяСтрока.Sx = Выборка.Показатель;
			НоваяСтрока.Sx2 = Выборка.Показатель*Выборка.Показатель;
			НоваяСтрока.h = (Выборка.Показатель*Выборка.Показатель)/Выборка.Количество;
			НоваяСтрока.S2x = Выборка.ПоказательКвадрат;
			r = r+1;
		КонецЕсли;
	КонецЦикла;
	Попытка
		ИтоговыеЗначения = Новый Структура;
		ИтоговыеЗначения.Вставить("Количество", Таблица.Итог("n"));
		ИтоговыеЗначения.Вставить("Сумма", Таблица.Итог("Sx"));
		ИтоговыеЗначения.Вставить("СуммаВКвадрате", Таблица.Итог("Sx")*Таблица.Итог("Sx"));
		ИтоговыеЗначения.Вставить("СуммаПодсобных", Таблица.Итог("h"));
		ИтоговыеЗначения.Вставить("СуммаКвадратов", Таблица.Итог("S2x"));
		//Если Таблица.Итог("n") = 0 Тогда 
		//	ИтоговыеЗначения.Вставить("ОбщаяПодсобная", 0); 
		//Иначе
		ИтоговыеЗначения.Вставить("ОбщаяПодсобная", (Таблица.Итог("Sx")*Таблица.Итог("Sx"))/Таблица.Итог("n"));
		//КонецЕсли;
	Исключение
		КоэффициентНаследуемости = 0;
		КритерийФишера = 0;
	КонецПопытки;
	Попытка
		КоэффициентНаследуемости = (ИтоговыеЗначения.СуммаПодсобных - ИтоговыеЗначения.ОбщаяПодсобная)/(ИтоговыеЗначения.СуммаКвадратов - ИтоговыеЗначения.ОбщаяПодсобная);
	Исключение КоэффициентНаследуемости=0;
	КонецПопытки;
	Попытка
		КритерийФишера = ((ИтоговыеЗначения.СуммаПодсобных - ИтоговыеЗначения.ОбщаяПодсобная)/(r - 1))/((ИтоговыеЗначения.СуммаКвадратов - ИтоговыеЗначения.СуммаПодсобных)/(ИтоговыеЗначения.Количество - r));
	Исключение
		КритерийФишера = 0;
	КонецПопытки;
	Возврат КоэффициентНаследуемости;
	
КонецФункции

// Функция предназначена для расчета коэффициента наследуемости
//
// Параметры:
// ТаблицаНаследуемости, тип: Таблица значений со следующими колонками:
// Показатель - сумма значений показателей по одному фактору.
// ПоказательКвадрат - квадрат показателя.
// Количество - количество наблюдений по одному фактору (для различных факторов количество наблюдений может быть различным .
// Животное - Фактор (животные, по котоорым рассчитывается коэффициент наследуемости).
// Возврат:
// ПоказателиНаследуемости, Тип - Структура со следующими колонками:
// Коэффициент наследуемости и Критерий фишера.
Функция ПолучитьКритерийФишера(ТаблицаНаследуемости) Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Животное"); //Животное
	Таблица.Колонки.Добавить("n"); //количество
	Таблица.Колонки.Добавить("Sx"); // сумма значений
	Таблица.Колонки.Добавить("Sx2"); //квадрат суммы
	Таблица.Колонки.Добавить("h"); //подсобные величины
	Таблица.Колонки.Добавить("S2x"); //сумма квадратов
	r = 0;
	Для каждого Выборка Из ТаблицаНаследуемости Цикл
		Если Выборка.Количество>2 Тогда 
			НоваяСтрока = Таблица.Добавить(); 
			НоваяСтрока.Животное = Выборка.Животное;
			НоваяСтрока.n = Выборка.Количество;
			НоваяСтрока.Sx = Выборка.Показатель;
			НоваяСтрока.Sx2 = Выборка.Показатель*Выборка.Показатель;
			НоваяСтрока.h = (Выборка.Показатель*Выборка.Показатель)/Выборка.Количество;
			НоваяСтрока.S2x = Выборка.ПоказательКвадрат;
			r = r+1;
		КонецЕсли;
	КонецЦикла;
	Попытка
		ИтоговыеЗначения = Новый Структура;
		ИтоговыеЗначения.Вставить("Количество", Таблица.Итог("n"));
		ИтоговыеЗначения.Вставить("Сумма", Таблица.Итог("Sx"));
		ИтоговыеЗначения.Вставить("СуммаВКвадрате", Таблица.Итог("Sx")*Таблица.Итог("Sx"));
		ИтоговыеЗначения.Вставить("СуммаПодсобных", Таблица.Итог("h"));
		ИтоговыеЗначения.Вставить("СуммаКвадратов", Таблица.Итог("S2x"));
		ИтоговыеЗначения.Вставить("ОбщаяПодсобная", (Таблица.Итог("Sx")*Таблица.Итог("Sx"))/Таблица.Итог("n"));
		КоэффициентНаследуемости = (ИтоговыеЗначения.СуммаПодсобных - ИтоговыеЗначения.ОбщаяПодсобная)/(ИтоговыеЗначения.СуммаКвадратов - ИтоговыеЗначения.ОбщаяПодсобная);
	Исключение КоэффициентНаследуемости=0;
	КонецПопытки;
	Попытка
		КритерийФишера = ((ИтоговыеЗначения.СуммаПодсобных - ИтоговыеЗначения.ОбщаяПодсобная)/(r - 1))/((ИтоговыеЗначения.СуммаКвадратов - ИтоговыеЗначения.СуммаПодсобных)/(ИтоговыеЗначения.Количество - r));
	Исключение
		КритерийФишера = 0;
	КонецПопытки;
	
	Возврат КритерийФишера;
	
КонецФункции

// ТаблицаПар: ПоказательПредка, ПоказательПотомка.
Функция РассчитатьКоэффициентКорреляции(ТаблицаПар) Экспорт
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ПоказательПредка", 0);
	ПустыеСтроки = ТаблицаПар.НайтиСтроки(СтруктураПоиска);
	Для Каждого ПустаяСтрока Из ПустыеСтроки Цикл
		ТаблицаПар.Удалить(ПустаяСтрока);
	КонецЦикла;
		
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ПоказательПотомка", 0);
	ПустыеСтроки = ТаблицаПар.НайтиСтроки(СтруктураПоиска);
	Для Каждого ПустаяСтрока Из ПустыеСтроки Цикл
		ТаблицаПар.Удалить(ПустаяСтрока);
	КонецЦикла;

	s2x = 0;
	s2y = 0;
	d=0;
	xy=0;
	dkv=0;
	Для каждого Пара Из ТаблицаПар Цикл
		s2x = s2x + Пара.ПоказательПредка*Пара.ПоказательПредка;
		s2y = s2y + Пара.ПоказательПотомка*Пара.ПоказательПотомка;
		d = d + (Пара.ПоказательПредка-Пара.ПоказательПотомка);
		xy = xy + Пара.ПоказательПредка*Пара.ПоказательПотомка;
		dkv = dkv + (Пара.ПоказательПредка-Пара.ПоказательПотомка)*(Пара.ПоказательПредка-Пара.ПоказательПотомка);
	КонецЦикла;
	Попытка
		ИтоговыеЗначения = Новый Структура;
		ИтоговыеЗначения.Вставить("n", ТаблицаПар.Количество()); //количество
		ИтоговыеЗначения.Вставить("Sx", ТаблицаПар.Итог("ПоказательПредка")); // сумма значений предка
		ИтоговыеЗначения.Вставить("Sy", ТаблицаПар.Итог("ПоказательПотомка")); // сумма значений потомка
		ИтоговыеЗначения.Вставить("S2x", s2x); //Сумма квадратов предка
		ИтоговыеЗначения.Вставить("S2y", s2y); //Сумма квадратов потомка
		ИтоговыеЗначения.Вставить("d", d); //Числовая разность значений предка и потомка
		ИтоговыеЗначения.Вставить("dkv", dkv); //Сумма квадратов числовой расности
		ИтоговыеЗначения.Вставить("xy", xy); //произведение значений предка и потомка
		
		Cx = ИтоговыеЗначения.S2x -  (ИтоговыеЗначения.Sx*ИтоговыеЗначения.Sx)/ИтоговыеЗначения.n;
		Cy = ИтоговыеЗначения.S2y -  (ИтоговыеЗначения.Sy*ИтоговыеЗначения.Sy)/ИтоговыеЗначения.n;
		Cd = ИтоговыеЗначения.dkv -  (ИтоговыеЗначения.d*ИтоговыеЗначения.d)/ИтоговыеЗначения.n;
		r = (Cx + Cy - Cd)/(2*Sqrt(Cx*Cy));
	Исключение
		r=0;
	КонецПопытки;
	Возврат r;
	
КонецФункции

// ТаблицаПар: ПоказательПредка, ПоказательПотомка.
Функция РассчитатьОшибкуКорреляции(ТаблицаПар) Экспорт
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ПоказательПредка", 0);
	ПустыеСтроки = ТаблицаПар.НайтиСтроки(СтруктураПоиска);
	Для Каждого ПустаяСтрока Из ПустыеСтроки Цикл
		ТаблицаПар.Удалить(ПустаяСтрока);
	КонецЦикла;
		
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ПоказательПотомка", 0);
	ПустыеСтроки = ТаблицаПар.НайтиСтроки(СтруктураПоиска);
	Для Каждого ПустаяСтрока Из ПустыеСтроки Цикл
		ТаблицаПар.Удалить(ПустаяСтрока);
	КонецЦикла;

	s2x = 0;
	s2y = 0;
	d=0;
	xy=0;
	dkv=0;
	Для каждого Пара Из ТаблицаПар Цикл
		s2x = s2x + Пара.ПоказательПредка*Пара.ПоказательПредка;
		s2y = s2y + Пара.ПоказательПотомка*Пара.ПоказательПотомка;
		d = d + (Пара.ПоказательПредка-Пара.ПоказательПотомка);
		xy = xy + Пара.ПоказательПредка*Пара.ПоказательПотомка;
		dkv = dkv + (Пара.ПоказательПредка-Пара.ПоказательПотомка)*(Пара.ПоказательПредка-Пара.ПоказательПотомка);
	КонецЦикла;
	Попытка
		ИтоговыеЗначения = Новый Структура;
		ИтоговыеЗначения.Вставить("n", ТаблицаПар.Количество()); //количество
		ИтоговыеЗначения.Вставить("Sx", ТаблицаПар.Итог("ПоказательПредка")); // сумма значений предка
		ИтоговыеЗначения.Вставить("Sy", ТаблицаПар.Итог("ПоказательПотомка")); // сумма значений потомка
		ИтоговыеЗначения.Вставить("S2x", s2x); //Сумма квадратов предка
		ИтоговыеЗначения.Вставить("S2y", s2y); //Сумма квадратов потомка
		ИтоговыеЗначения.Вставить("d", d); //Числовая разность значений предка и потомка
		ИтоговыеЗначения.Вставить("dkv", dkv); //Сумма квадратов числовой расности
		ИтоговыеЗначения.Вставить("xy", xy); //произведение значений предка и потомка
		
		Cx = ИтоговыеЗначения.S2x -  (ИтоговыеЗначения.Sx*ИтоговыеЗначения.Sx)/ИтоговыеЗначения.n;
		Cy = ИтоговыеЗначения.S2y -  (ИтоговыеЗначения.Sy*ИтоговыеЗначения.Sy)/ИтоговыеЗначения.n;
		Cd = ИтоговыеЗначения.dkv -  (ИтоговыеЗначения.d*ИтоговыеЗначения.d)/ИтоговыеЗначения.n;
		r = (Cx + Cy - Cd)/(2*Sqrt(Cx*Cy));
		mr = (1-r*r)/Sqrt(ИтоговыеЗначения.n);
	Исключение
		r=0;
		mr=0;
	КонецПопытки;
	Возврат mr;
	
КонецФункции

// Функция предназначена для создания таблицы корреляции.
//
// Возврат:
// Таблица - Таблица значений с колонками:
// Показатель предка, показатель потомка.
Функция СоздатьТаблицуДляКорреляции() Экспорт
	
	Таблица = новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ПоказательПредка");
	Таблица.Колонки.Добавить("ПоказательПотомка");
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ПоказательПредка = 3.8;
	НоваяСтрока.ПоказательПотомка = 4.1;
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ПоказательПредка = 4.3;
	НоваяСтрока.ПоказательПотомка = 3.7;
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ПоказательПредка = 3.4;
	НоваяСтрока.ПоказательПотомка = 4;
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ПоказательПредка = 4.1;
	НоваяСтрока.ПоказательПотомка = 3.8;
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ПоказательПредка = 4.6;
	НоваяСтрока.ПоказательПотомка = 3.6;
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ПоказательПредка = 5.1;
	НоваяСтрока.ПоказательПотомка = 3.6;
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ПоказательПредка = 3.9;
	НоваяСтрока.ПоказательПотомка = 3.9;
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ПоказательПредка = 4.9;
	НоваяСтрока.ПоказательПотомка = 3.7;
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ПоказательПредка = 4.5;
	НоваяСтрока.ПоказательПотомка = 3.7;
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ПоказательПредка = 4.7;
	НоваяСтрока.ПоказательПотомка = 3.7;
	Возврат Таблица;
	
КонецФункции

// Функция предназначена для расчета коэффициента наследуемости.
//
// Параметры:
// ТаблицаНаследуемости - таблица значений.
// Показатель - сумма значений показателей по одному фактору.
// ПоказательКвадрат - квадрат показателя.
// Количество - количество наблюдений по одному фактору (для различных факторов количество наблюдений может быть различным.
// Животное - Фактор (животные, по котоорым рассчитывается коэффициент наследуемости.)
//
// Возврат:
// ПоказателиНаследуемости - Структура с колонками: 
// Коэффициент наследуемости и Критерий фишера.
Функция РассчитатьФенотипическуюИзменчивость(ТаблицаНаследуемости) Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Животное"); //Животное
	Таблица.Колонки.Добавить("n"); //количество
	Таблица.Колонки.Добавить("Sx"); // сумма значений
	Таблица.Колонки.Добавить("Sx2"); //квадрат суммы
	Таблица.Колонки.Добавить("h"); //подсобные величины
	Таблица.Колонки.Добавить("S2x"); //сумма квадратов
	r = 0;
	Для каждого Выборка Из ТаблицаНаследуемости Цикл
		Если Выборка.Количество>1 Тогда 
		НоваяСтрока = Таблица.Добавить(); 
		НоваяСтрока.Животное = Выборка.Животное;
		НоваяСтрока.n = Выборка.Количество;
		НоваяСтрока.Sx = Выборка.Показатель;
		НоваяСтрока.Sx2 = Выборка.Показатель*Выборка.Показатель;
		НоваяСтрока.h = (Выборка.Показатель*Выборка.Показатель)/Выборка.Количество;
		НоваяСтрока.S2x = Выборка.ПоказательКвадрат;
		r = r+1;
		КонецЕсли;
	КонецЦикла;
	ИтоговыеЗначения = Новый Структура;
	ИтоговыеЗначения.Вставить("Количество", Таблица.Итог("n"));
	ИтоговыеЗначения.Вставить("Сумма", Таблица.Итог("Sx"));
	ИтоговыеЗначения.Вставить("СуммаВКвадрате", Таблица.Итог("Sx")*Таблица.Итог("Sx"));
	ИтоговыеЗначения.Вставить("СуммаПодсобных", Таблица.Итог("h"));
	ИтоговыеЗначения.Вставить("СуммаКвадратов", Таблица.Итог("S2x"));
	ИтоговыеЗначения.Вставить("ОбщаяПодсобная", (Таблица.Итог("Sx")*Таблица.Итог("Sx"))/Таблица.Итог("n"));
	ФенотипическаяИзменчивость = ИтоговыеЗначения.СуммаКвадратов - ИтоговыеЗначения.ОбщаяПодсобная;

	Возврат ФенотипическаяИзменчивость;
КонецФункции

// ТаблицаПоказателей: Тип - Массив(значение).
Функция РассчитатьСтандартноеОтклонение(ТаблицаПоказателей) Экспорт
	
	КЧ = Новый КвалификаторыЧисла(10,3);
	Массив = Новый Массив;
	
	Результат = Новый ТаблицаЗначений;
	Массив.Очистить();
	Массив.Добавить(Тип("Число"));
	ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , ,КЧ);
	Результат.Колонки.Добавить("Среднее", ОписаниеТиповЧ);
	Результат.Колонки.Добавить("Дисперсия");
	Результат.Колонки.Добавить("СтандартноеОтклонение");
	Результат.Колонки.Добавить("КоэффициентВариации");
	Результат.Колонки.Добавить("СредняяОшибка");
	Сумма = 0;
	СуммаКвадратов = 0;
	Количество = 0;
	Для каждого СтрокаТаблицы Из ТаблицаПоказателей Цикл
			//Сумма = 0;
			//СуммаКвадратов = 0;
			//Количество = 0;
		Сумма = Сумма + СтрокаТаблицы;
		СуммаКвадратов = СуммаКвадратов + Pow(СтрокаТаблицы, 2);
		Количество = Количество + 1;
	КонецЦикла;
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.Среднее = ?(Количество=0, 0, Сумма/Количество);
	НоваяСтрока.Дисперсия = ?(Количество=0, 0, СуммаКвадратов-(Pow(Сумма, 2)/Количество)); 
	НоваяСтрока.СтандартноеОтклонение = ?(Количество<=1,0,SQRT(НоваяСтрока.Дисперсия/(Количество-1)));
	НоваяСтрока.КоэффициентВариации = ?(НоваяСтрока.Среднее=0,0,(НоваяСтрока.СтандартноеОтклонение/НоваяСтрока.Среднее)*100);
	НоваяСтрока.СредняяОшибка = ?(Количество=0,0,НоваяСтрока.СтандартноеОтклонение/SQRT(Количество));
	
	Возврат Результат[0].СтандартноеОтклонение;
	
КонецФункции

#КонецОбласти