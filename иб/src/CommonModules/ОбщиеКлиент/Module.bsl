//////////////////////////////////////////////
// Общая интерфейсная функция для получения файла из Интернет по протоколу http(s)
// либо ftp и сохранения его во временное хранилище.
//
// Параметры:
// URL*           - строка - url файла в формате:
//                 [Протокол://]<Сервер>/<Путь к файлу на сервере>
// ПараметрыПолучения* - структура с ключами:
//         ПутьДляСохранения  - строка - путь на клиенте (включая имя файла), сохранения
//         Пользователь  - строка - пользователь от имени которого установлено соединение
//         Пароль        - строка - пароль пользователя от которого установлено соединение
//         Порт          - число  - порт сервера с которым установлено соединение
//         ЗащищенноеСоединение - Булево - для случая http загрузки флаг указывает,
//                                  что соединение должно производиться через https
//         ПассивноеСоединение -  - Булево - для случая ftp загрузки флаг указывает,
//                                  что соединение должно пассивным (или активным)
//
// помеченные знаком '*' являются обязательными
//
// Возвращаемое значение:
// структура
// Статус - Булево - ключ присутствует в структуре всегда, значения
//                   Истина - вызов функции успешно завершен
//                   Ложь   - вызов функции завершен неудачно
// Путь - Строка - путь к файлу на клиенте, ключ используется только
//                 если статус Истина
// СообщениеОбОшибке - Строка - сообщение об ошибке, если статус Ложь
//
Функция СкачатьФайлНаКлиенте(знач URL,
	знач ПараметрыПолучения = Неопределено) Экспорт
	
	// Объявление переменных перед первым использованием в качестве
	// параметра метода Свойство, при анализе параметров получения файлов
	// из ПараметрыПолучения. Содержат значения переданных параметров получения файла
	Перем ПутьДляСохранения, Пользователь, Пароль, Порт,
	ЗащищенноеСоединение, ПассивноеСоединение;
	
	// Получаем параметры получения файла
	
	Если ПараметрыПолучения = Неопределено Тогда
		ПараметрыПолучения = Новый Структура;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("ПутьДляСохранения", ПутьДляСохранения) Тогда
		ПутьДляСохранения = Неопределено;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("Пользователь", Пользователь) Тогда
		Пользователь = Неопределено;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("Пароль", Пароль) Тогда
		Пароль = Неопределено;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("Порт", Порт) Тогда
		Порт = Неопределено;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("ЗащищенноеСоединение", ЗащищенноеСоединение) Тогда
		ЗащищенноеПассивноеСоединение = Неопределено;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("ПассивноеСоединение", ПассивноеСоединение) Тогда
		ЗащищенноеПассивноеСоединение = Неопределено;
	КонецЕсли;
	
	НастройкаСохранения = Новый Соответствие;
	НастройкаСохранения.Вставить("МестоХранения", "Клиент");
	НастройкаСохранения.Вставить("Путь", ПутьДляСохранения);
	
	Результат = ФункцииКлиентСервер.ПодготовитьПолучениеФайла(
	URL,
	Пользователь,
	Пароль,
	Порт,
	ЗащищенноеСоединение,
	ПассивноеСоединение,
	НастройкаСохранения);
	
	Возврат Результат;
	
КонецФункции

/////////////////////////////////////////////////////////////
Функция ДобавитьФайлКартинки(ВладелецФайла) Экспорт
	
	Если ПодключитьРасширениеРаботыСФайлами() Тогда
		ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ВыборФайла.МножественныйВыбор = Ложь;
		ВыборФайла.Заголовок = НСтр("ru = 'Выбор файла'");
		ВыборФайла.Фильтр = НСтр("ru = 'Все файлы (*.*)|*.*'");
		
		Если ВыборФайла.Выбрать() Тогда
			ПолноеИмяФайла = ВыборФайла.ВыбранныеФайлы[0];
			ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
			ОбщиеСервер.ЗаписатьФайлВРегистр(ВладелецФайла, ДвоичныеДанные);
			Возврат	ДвоичныеДанные;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ДобавитьФайлПроекта(УникальныйИдентификатор) Экспорт
	
	Если ПодключитьРасширениеРаботыСФайлами() Тогда
		
		ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ВыборФайла.МножественныйВыбор = Ложь;
		ВыборФайла.Заголовок = НСтр("ru = 'Выбор файла'");
		ВыборФайла.Фильтр = НСтр("ru = 'Все файлы (*.*)|*.*'");
		
		Если ВыборФайла.Выбрать() Тогда
			ПолноеИмяФайла=ВыборФайла.ВыбранныеФайлы[0];
			Файл = Новый Файл(ПолноеИмяФайла);
			
			ПомещаемыеФайлы = Новый Массив;
			Описание = Новый ОписаниеПередаваемогоФайла(Файл.ПолноеИмя, "");
			ПомещаемыеФайлы.Добавить(Описание);
			ПомещенныеФайлы = Новый Массив;
			Если НЕ ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы, , Ложь, УникальныйИдентификатор) Тогда
				////Продолжить;
			КонецЕсли;
			АдресВременногоХранилищаФайла = ПомещенныеФайлы[0].Хранение;
			///////////////////////////////			
			РасширениеБезТочки=Прав(Файл.Имя,3);
			
			СтруктураФайла = Новый Структура;
			СтруктураФайла.Вставить("ИмяБезРасширения",СтрЗаменить(Файл.Имя,"."+РасширениеБезТочки,""));
			СтруктураФайла.Вставить("РасширениеБезТочки",РасширениеБезТочки);
			СтруктураФайла.Вставить("ВремяИзменения",ТекущаяДата());
			СтруктураФайла.Вставить("ВремяИзмененияУниверсальное",Файл.ПолучитьУниверсальноеВремяИзменения());
			СтруктураФайла.Вставить("Размер",Файл.Размер());
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилищаФайла);
			СтруктураФайла.Вставить("ДвоичныеДанные",ДвоичныеДанные);
			
			Возврат СтруктураФайла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Функция ОткрытьФайл(ДанныеФайла,ВладелецФайла) Экспорт
	РабочийКаталогПользователя = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ЛокальныеФайлы", "ПутьКаталогаФайлов");
	ПолноеИмяФайлаНаКлиенте = РабочийКаталогПользователя + ДанныеФайла.ИмяФайла;
	
	ФайлНаДиске = Новый Файл(ПолноеИмяФайлаНаКлиенте);
	Если ФайлНаДиске.Существует() Тогда
		ФайлМожноОткрывать = Истина;
	Иначе
		ФайлМожноОткрывать = ПолучитьФайлВРабочийКаталог(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла,
		ДанныеФайла.ИмяФайла,
		ПолноеИмяФайлаНаКлиенте,
		РабочийКаталогПользователя);
	КонецЕсли;
	
	Если   ФайлМожноОткрывать Тогда
		ОткрытьФайлПриложением(ПолноеИмяФайлаНаКлиенте);
	КонецЕсли;
	Возврат ПолноеИмяФайлаНаКлиенте;
КонецФункции

Функция ПолучитьФайлВРабочийКаталог(СсылкаНаДвоичныеДанныеФайла,
	ИмяФайла,
	ПолноеИмяФайлаНаКлиенте,
	РабочийКаталогПользователя) 
	
	КаталогСохранения = РабочийКаталогПользователя;// + ОтносительныйПуть;
	Попытка
		СоздатьКаталог(КаталогСохранения);
	Исключение
		СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Ложь;
	КонецПопытки;
	
	Файл = Новый Файл(КаталогСохранения + ИмяФайла);
	Если Файл.Существует() Тогда
		Файл.УстановитьТолькоЧтение(Ложь);
		УдалитьФайлы(КаталогСохранения + ИмяФайла);
	КонецЕсли;
	
	ПолучаемыйФайл = Новый ОписаниеПередаваемогоФайла(КаталогСохранения + ИмяФайла, СсылкаНаДвоичныеДанныеФайла);
	ПолучаемыеФайлы = Новый Массив;
	ПолучаемыеФайлы.Добавить(ПолучаемыйФайл);
	
	ПолученныеФайлы = Новый Массив;
	
	Если ПолучитьФайлы(ПолучаемыеФайлы, ПолученныеФайлы, , Ложь) Тогда
		ПолноеИмяФайлаНаКлиенте = ПолученныеФайлы[0].Имя;
		Файл = Новый Файл(ПолноеИмяФайлаНаКлиенте);
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ОткрытьФайлПриложением(ИмяОткрываемогоФайла)
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	Если РасширениеПодключено Тогда
		// Открыть Файл
		Попытка
			ЗапуститьПриложение(ИмяОткрываемогоФайла,,Ложь);//не дожидаемся завершения приложения
		Исключение
			Инфо = ИнформацияОбОшибке();
			Предупреждение(ФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Описание=""%1""'"),
			Инфо.Описание));
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

Функция ВопросОбИзмененииКартинки(Объект,АдресКартинки,УникальныйИдентификатор) Экспорт 
	Если Не АдресКартинки="" Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Вопрос("Заменить картинку?", Режим, 0);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат АдресКартинки;
		КонецЕсли;
	КонецЕсли;
	ОбщиеКлиент.ДобавитьФайлКартинки(Объект.Ссылка);
	Модифицированность=Истина;
	Возврат ОбщиеСервер.ПолучитьДанныеКартинки(Объект.Ссылка,УникальныйИдентификатор).СсылкаНаДвоичныеДанныеФайла;
КонецФункции

Процедура ЗаполнитьСтроку(Док,Стр,ВыбранноеЗначение,ОпределитьОстаток) Экспорт
	
	Стр.Номенклатура=ВыбранноеЗначение.Товар;
	Стр.Количество=ВыбранноеЗначение.Количество;
	Цена=ВыбранноеЗначение.Цена;
	Валюта=ВыбранноеЗначение.Валюта;
	Если Не ЗначениеЗаполнено(Валюта) Тогда
		Валюта=Док.Валюта;
	КонецЕсли;
	Если Валюта=Док.Валюта Тогда
		Курс=1;
	Иначе
		Курс=ОбщиеСервер.ПолучитьКурсВалюты(Валюта,Док.Валюта,Док.Дата);//курс валюты
	КонецЕсли;
	Стр.Цена=Цена*Курс;
	Стр.Сумма=Стр.Количество*Стр.Цена;
	
	Если ОпределитьОстаток Тогда
		Стр.НаСкладе=ОбщегоНазначения.ОпределитьОстатокНаСкладе(Док.Дата,ВыбранноеЗначение.Товар);
	КонецЕсли;
	ОбщиеСервер.ПолучитьСписокСкладов(Стр.МестоХранения,Стр.Номенклатура);
КонецПроцедуры

Функция ВыбратьПутьКРабочемуКаталогу(ИмяКаталога, Заголовок, РабочийКаталогВладельца) Экспорт
	
		Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
		ДиалогОткрытияФайла.ПолноеИмяФайла = "";
		ДиалогОткрытияФайла.Каталог = ИмяКаталога;
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		ДиалогОткрытияФайла.Заголовок = Заголовок;
		Если ДиалогОткрытияФайла.Выбрать() Тогда
			
			ИмяКаталога = ДиалогОткрытияФайла.Каталог;
			ДобавитьСлешЕслиНужно(ИмяКаталога,ТипПлатформыКлиента());
			
			// Создать каталог для файлов
			Попытка
				СоздатьКаталог(ИмяКаталога);
				ИмяКаталогаТестовое = ИмяКаталога + "ПроверкаДоступа\";
				СоздатьКаталог(ИмяКаталогаТестовое);
				УдалитьФайлы(ИмяКаталогаТестовое);
			Исключение
				// нет прав на создание каталога, или такой путь отсутствует
				
				ТекстОшибки 
					= ФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неверный путь или отсутствуют права на запись в каталог ""%1""'"),
					ИмяКаталога);
				Предупреждение(ТекстОшибки);
				Возврат Ложь;
			КонецПопытки;
			
			
			Возврат Истина;
		КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции	

// добавляет в конце "\" или "/"
Процедура ДобавитьСлешЕслиНужно(НовыйПуть, ТипПлатформыТекущий) Экспорт
	
	Если СтрДлина(НовыйПуть) = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Если Прав(НовыйПуть, 1) <> "\" И Прав(НовыйПуть,1) <> "/" Тогда
		
		Если ТипПлатформыТекущий = ТипПлатформы.Windows_x86 ИЛИ ТипПлатформыТекущий = ТипПлатформы.Windows_x86_64 Тогда
			НовыйПуть = НовыйПуть + "\";
		Иначе	
			НовыйПуть = НовыйПуть + "/";
		КонецЕсли;			
	КонецЕсли;
	
КонецПроцедуры	
// Возвращает тип платформы клиента
Функция ТипПлатформыКлиента() Экспорт
	СистемнаяИнфо = Новый СистемнаяИнформация;
	Возврат СистемнаяИнфо.ТипПлатформы;
КонецФункции	


