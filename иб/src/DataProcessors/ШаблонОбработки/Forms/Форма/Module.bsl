
&НаКлиенте
Процедура ВыполнитьОбработку(Команда)
	ТонкийКлиент = Истина;
	#Если ТолстыйКлиентУправляемоеПриложение Тогда
		ТонкийКлиент = Ложь;
	#КонецЕсли
	
	Состояние("Выполнение запроса...");
	КоличествоЭлементов = ВыполнитьЗапрос(ТонкийКлиент);
	Если КоличествоЭлементов = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	Индикатор = ПолучитьИндикаторПроцесса(КоличествоЭлементов);
	Для сч = 0 По КоличествоЭлементов - 1 Цикл
		ОбработатьРезультатЗапроса(сч, ТонкийКлиент);
		ОбработатьИндикатор(Индикатор, сч + 1);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ВыполнитьЗапрос(ТонкийКлиент = Ложь)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Спр.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Спр";
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Если НЕ ТонкийКлиент Тогда
		РезультатЗапроса = ТЗ;
	Иначе
		РезультатЗапроса = ТаблицуЗначенийВСписок(ТЗ);
	КонецЕсли;
	
	Возврат ТЗ.Количество();
КонецФункции

&НаСервере
Процедура ОбработатьРезультатЗапроса(Индекс, ТонкийКлиент = Ложь)
	Если ТонкийКлиент Тогда
		Стр = РезультатЗапроса[Индекс].Значение;
	Иначе
		Стр = РезультатЗапроса[Индекс];
	КонецЕсли;
	
	Сообщить(Стр.Ссылка);
КонецПроцедуры

&НаСервере
Функция ТаблицуЗначенийВСписок(ТЗ) Экспорт
	Список = Новый СписокЗначений();
	
	Всего = ТЗ.Колонки.Количество() - 1;
	Для Каждого Стр Из ТЗ Цикл
		СтрокаТЗ = Новый Структура;
		Для сч = 0 По Всего Цикл
			СтрокаТЗ.Вставить(ТЗ.Колонки[сч].Имя, Стр[сч]);
		КонецЦикла;
		
		Список.Добавить(СтрокаТЗ);
	КонецЦикла;
	
	Возврат Список;
КонецФункции

&НаКлиенте
Функция ПолучитьИндикаторПроцесса(КоличествоПроходов, ПредставлениеПроцесса = "Выполнено", ВнутреннийСчетчик = Истина,
	КоличествоОбновлений = 100, ЛиВыводитьВремя = Истина, РазрешитьПрерывание = Истина) Экспорт 
	
	Индикатор = Новый Структура;
	Индикатор.Вставить("КоличествоПроходов", КоличествоПроходов);
	Индикатор.Вставить("ДатаНачалаПроцесса", ТекущаяДата());
	Индикатор.Вставить("ПредставлениеПроцесса", ПредставлениеПроцесса);
	Индикатор.Вставить("ЛиВыводитьВремя", ЛиВыводитьВремя);
	Индикатор.Вставить("РазрешитьПрерывание", РазрешитьПрерывание);
	Индикатор.Вставить("ВнутреннийСчетчик", ВнутреннийСчетчик);
	Индикатор.Вставить("Шаг", КоличествоПроходов / КоличествоОбновлений);
	Индикатор.Вставить("СледующийСчетчик", 0);
	Индикатор.Вставить("Счетчик", 0);
	Возврат Индикатор;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьИндикатор(Индикатор, Счетчик = 0) Экспорт 
	
	Если Индикатор.ВнутреннийСчетчик Тогда
		Индикатор.Счетчик = Индикатор.Счетчик + 1;
		Счетчик = Индикатор.Счетчик;
	КонецЕсли;
	Если Индикатор.РазрешитьПрерывание Тогда
		ОбработкаПрерыванияПользователя();
	КонецЕсли;
	
	Если Счетчик > Индикатор.СледующийСчетчик Тогда
		Индикатор.СледующийСчетчик = Цел(Счетчик + Индикатор.Шаг);
		Если Индикатор.ЛиВыводитьВремя Тогда
			ПрошлоВремени = ТекущаяДата() - Индикатор.ДатаНачалаПроцесса;
			Осталось = ПрошлоВремени * (Индикатор.КоличествоПроходов / Счетчик - 1);
			Часов = Цел(Осталось / 3600);
			Осталось = Осталось - (Часов * 3600);
			Минут = Цел(Осталось / 60);
			Секунд = Цел(Цел(Осталось - (Минут * 60)));
			ОсталосьВремени = Формат(Часов, "ЧЦ=2; ЧН=00; ЧВН=") + ":" 
			+ Формат(Минут, "ЧЦ=2; ЧН=00; ЧВН=") + ":" 
			+ Формат(Секунд, "ЧЦ=2; ЧН=00; ЧВН=");
			ТекстОсталось = "Осталось: ~" + ОсталосьВремени;
		Иначе
			ТекстОсталось = "";
		КонецЕсли;
		
		Если Индикатор.КоличествоПроходов > 0 Тогда
			ТекстСостояния = ТекстОсталось;
		Иначе
			ТекстСостояния = "";
		КонецЕсли;
		
		Состояние(Индикатор.ПредставлениеПроцесса, Счетчик / Индикатор.КоличествоПроходов * 100, ТекстСостояния);
	КонецЕсли;
	
	Если Счетчик = Индикатор.КоличествоПроходов Тогда
		Состояние(Индикатор.ПредставлениеПроцесса, 100, ТекстСостояния);
	КонецЕсли;
	
КонецПроцедуры
