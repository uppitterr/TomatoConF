
&НаСервере
Процедура РассчитатьНаСервере()
	тОбъект = РеквизитФормыВЗначение("Объект");
	Объект.ГраницыИнтервалов.Загрузить(тОбъект.ПосчитатьГраницы(Объект.ВходнаяВыборка.Выгрузить()));

КонецПроцедуры

&НаКлиенте
Процедура Рассчитать(Команда)
	РассчитатьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаСетиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	РежимДиалога								  = РежимДиалогаВыбораФайла.Сохранение;	
	ДиалогВыбораФайла 							  = Новый ДиалогВыбораФайла(РежимДиалога);	
	ДиалогВыбораФайла.Фильтр                      = "Синапсы (*.mlp)|*.mlp";
	ДиалогВыбораФайла.Заголовок                   = Заголовок;
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	ДиалогВыбораФайла.ПолноеИмяФайла              = Объект.ИмяФайлаСети;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Ложь;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		Объект.ИмяФайлаСети 							  = ДиалогВыбораФайла.ПолноеИмяФайла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаГраницыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	РежимДиалога								  = РежимДиалогаВыбораФайла.Сохранение;	
	ДиалогВыбораФайла 							  = Новый ДиалогВыбораФайла(РежимДиалога);	
	ДиалогВыбораФайла.Фильтр                      = "Границы интервалов (*.par)|*.par";
	ДиалогВыбораФайла.Заголовок                   = Заголовок;
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	ДиалогВыбораФайла.ПолноеИмяФайла              = Объект.ИмяФайлаГраницы;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Ложь;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		Объект.ИмяФайлаГраницы 							  = ДиалогВыбораФайла.ПолноеИмяФайла;
	КонецЕсли;


КонецПроцедуры
Процедура ПриИзмененииПараметровСети()
	Элементы.ВходнаяВыборка.ПодчиненныеЭлементы.ВходнаяВыборка1.ПодчиненныеЭлементы.ВходнаяВыборка1Группа1.Видимость=Ложь;
	Элементы.ВходнаяВыборка.ПодчиненныеЭлементы.ВходнаяВыборка1.ПодчиненныеЭлементы.ВходнаяВыборка1Группа2.Видимость=Ложь;
	Элементы.ВходнаяВыборка.ПодчиненныеЭлементы.ВходнаяВыборка1.ПодчиненныеЭлементы.ВходнаяВыборка1Группа3.Видимость=Ложь;
	Элементы.ВходнаяВыборка.ПодчиненныеЭлементы.ВходнаяВыборка1.ПодчиненныеЭлементы.ВходнаяВыборка1Группа4.Видимость=Ложь;
	Элементы.ВходнаяВыборка.ПодчиненныеЭлементы.ВходнаяВыборка1.ПодчиненныеЭлементы.ВходнаяВыборка1Группа5.Видимость=Ложь;
	
	Элементы.ВходнаяВыборка.ПодчиненныеЭлементы.ВходнаяВыборка1.ПодчиненныеЭлементы.ВходнаяВыборка1Группа6.Видимость=Ложь;
	Элементы.ВходнаяВыборка.ПодчиненныеЭлементы.ВходнаяВыборка1.ПодчиненныеЭлементы.ВходнаяВыборка1Группа7.Видимость=Ложь;
	Элементы.ВходнаяВыборка.ПодчиненныеЭлементы.ВходнаяВыборка1.ПодчиненныеЭлементы.ВходнаяВыборка1Группа8.Видимость=Ложь;
	
	Элементы.Результат.ПодчиненныеЭлементы.ВходнаяВыборка2.ПодчиненныеЭлементы.ВходнаяВыборка2Группа1.Видимость=Ложь;
	Элементы.Результат.ПодчиненныеЭлементы.ВходнаяВыборка2.ПодчиненныеЭлементы.ВходнаяВыборка2Группа2.Видимость=Ложь;
	Элементы.Результат.ПодчиненныеЭлементы.ВходнаяВыборка2.ПодчиненныеЭлементы.ВходнаяВыборка2Группа3.Видимость=Ложь;
	Элементы.Результат.ПодчиненныеЭлементы.ВходнаяВыборка2.ПодчиненныеЭлементы.ВходнаяВыборка2Группа4.Видимость=Ложь;
	Элементы.Результат.ПодчиненныеЭлементы.ВходнаяВыборка2.ПодчиненныеЭлементы.ВходнаяВыборка2Группа5.Видимость=Ложь;
	
	Элементы.Результат.ПодчиненныеЭлементы.ВходнаяВыборка2.ПодчиненныеЭлементы.ВходнаяВыборка2Группа6.Видимость=Ложь;
	Элементы.Результат.ПодчиненныеЭлементы.ВходнаяВыборка2.ПодчиненныеЭлементы.ВходнаяВыборка2Группа7.Видимость=Ложь;
	Элементы.Результат.ПодчиненныеЭлементы.ВходнаяВыборка2.ПодчиненныеЭлементы.ВходнаяВыборка2Группа8.Видимость=Ложь;
	
	Если Объект.КоличествоВходов=1 Тогда
		Элементы.ВходнаяВыборка.ПодчиненныеЭлементы.ВходнаяВыборка1.ПодчиненныеЭлементы.ВходнаяВыборка1Группа1.Видимость=Истина;
		Элементы.Результат.ПодчиненныеЭлементы.ВходнаяВыборка2.ПодчиненныеЭлементы.ВходнаяВыборка2Группа1.Видимость=Истина;

	ИначеЕсли Объект.КоличествоВходов=2 Тогда
		Элементы.ВходнаяВыборка.ПодчиненныеЭлементы.ВходнаяВыборка1.ПодчиненныеЭлементы.ВходнаяВыборка1Группа1.Видимость=Истина;
		Элементы.ВходнаяВыборка.ПодчиненныеЭлементы.ВходнаяВыборка1.ПодчиненныеЭлементы.ВходнаяВыборка1Группа2.Видимость=Истина;
		Элементы.Результат.ПодчиненныеЭлементы.ВходнаяВыборка2.ПодчиненныеЭлементы.ВходнаяВыборка2Группа1.Видимость=Истина;
		Элементы.Результат.ПодчиненныеЭлементы.ВходнаяВыборка2.ПодчиненныеЭлементы.ВходнаяВыборка2Группа2.Видимость=Истина;
	ИначеЕсли Объект.КоличествоВходов=3 Тогда
		Элементы.ВходнаяВыборка.ПодчиненныеЭлементы.ВходнаяВыборка1.ПодчиненныеЭлементы.ВходнаяВыборка1Группа1.Видимость=Истина;
		Элементы.ВходнаяВыборка.ПодчиненныеЭлементы.ВходнаяВыборка1.ПодчиненныеЭлементы.ВходнаяВыборка1Группа2.Видимость=Истина;
		Элементы.ВходнаяВыборка.ПодчиненныеЭлементы.ВходнаяВыборка1.ПодчиненныеЭлементы.ВходнаяВыборка1Группа3.Видимость=Истина;
		Элементы.Результат.ПодчиненныеЭлементы.ВходнаяВыборка2.ПодчиненныеЭлементы.ВходнаяВыборка2Группа1.Видимость=Истина;
		Элементы.Результат.ПодчиненныеЭлементы.ВходнаяВыборка2.ПодчиненныеЭлементы.ВходнаяВыборка2Группа2.Видимость=Истина;
		Элементы.Результат.ПодчиненныеЭлементы.ВходнаяВыборка2.ПодчиненныеЭлементы.ВходнаяВыборка2Группа3.Видимость=Истина;
		
	ИначеЕсли Объект.КоличествоВходов=4 Тогда
		Элементы.ВходнаяВыборка.ПодчиненныеЭлементы.ВходнаяВыборка1.ПодчиненныеЭлементы.ВходнаяВыборка1Группа1.Видимость=Истина;
		Элементы.ВходнаяВыборка.ПодчиненныеЭлементы.ВходнаяВыборка1.ПодчиненныеЭлементы.ВходнаяВыборка1Группа2.Видимость=Истина;
		Элементы.ВходнаяВыборка.ПодчиненныеЭлементы.ВходнаяВыборка1.ПодчиненныеЭлементы.ВходнаяВыборка1Группа3.Видимость=Истина;
		Элементы.ВходнаяВыборка.ПодчиненныеЭлементы.ВходнаяВыборка1.ПодчиненныеЭлементы.ВходнаяВыборка1Группа4.Видимость=Истина;
		Элементы.Результат.ПодчиненныеЭлементы.ВходнаяВыборка2.ПодчиненныеЭлементы.ВходнаяВыборка2Группа1.Видимость=Истина;
		Элементы.Результат.ПодчиненныеЭлементы.ВходнаяВыборка2.ПодчиненныеЭлементы.ВходнаяВыборка2Группа2.Видимость=Истина;
		Элементы.Результат.ПодчиненныеЭлементы.ВходнаяВыборка2.ПодчиненныеЭлементы.ВходнаяВыборка2Группа3.Видимость=Истина;
		Элементы.Результат.ПодчиненныеЭлементы.ВходнаяВыборка2.ПодчиненныеЭлементы.ВходнаяВыборка2Группа4.Видимость=Истина;
		
	ИначеЕсли Объект.КоличествоВходов>=5 Тогда
		Элементы.ВходнаяВыборка.ПодчиненныеЭлементы.ВходнаяВыборка1.ПодчиненныеЭлементы.ВходнаяВыборка1Группа1.Видимость=Истина;
		Элементы.ВходнаяВыборка.ПодчиненныеЭлементы.ВходнаяВыборка1.ПодчиненныеЭлементы.ВходнаяВыборка1Группа2.Видимость=Истина;
		Элементы.ВходнаяВыборка.ПодчиненныеЭлементы.ВходнаяВыборка1.ПодчиненныеЭлементы.ВходнаяВыборка1Группа3.Видимость=Истина;
		Элементы.ВходнаяВыборка.ПодчиненныеЭлементы.ВходнаяВыборка1.ПодчиненныеЭлементы.ВходнаяВыборка1Группа4.Видимость=Истина;
		Элементы.ВходнаяВыборка.ПодчиненныеЭлементы.ВходнаяВыборка1.ПодчиненныеЭлементы.ВходнаяВыборка1Группа5.Видимость=Истина;
		
		Элементы.Результат.ПодчиненныеЭлементы.ВходнаяВыборка2.ПодчиненныеЭлементы.ВходнаяВыборка2Группа1.Видимость=Истина;
		Элементы.Результат.ПодчиненныеЭлементы.ВходнаяВыборка2.ПодчиненныеЭлементы.ВходнаяВыборка2Группа2.Видимость=Истина;
		Элементы.Результат.ПодчиненныеЭлементы.ВходнаяВыборка2.ПодчиненныеЭлементы.ВходнаяВыборка2Группа3.Видимость=Истина;
		Элементы.Результат.ПодчиненныеЭлементы.ВходнаяВыборка2.ПодчиненныеЭлементы.ВходнаяВыборка2Группа4.Видимость=Истина;
		Элементы.Результат.ПодчиненныеЭлементы.ВходнаяВыборка2.ПодчиненныеЭлементы.ВходнаяВыборка2Группа5.Видимость=Истина;
	
	КонецЕсли;	
	
	Если Объект.КоличествоВыходов=1 Тогда
		Элементы.ВходнаяВыборка.ПодчиненныеЭлементы.ВходнаяВыборка1.ПодчиненныеЭлементы.ВходнаяВыборка1Группа6.Видимость=истина;
		Элементы.Результат.ПодчиненныеЭлементы.ВходнаяВыборка2.ПодчиненныеЭлементы.ВходнаяВыборка2Группа6.Видимость=Истина;
	ИначеЕсли Объект.КоличествоВыходов=2 Тогда
		Элементы.ВходнаяВыборка.ПодчиненныеЭлементы.ВходнаяВыборка1.ПодчиненныеЭлементы.ВходнаяВыборка1Группа6.Видимость=истина;
		Элементы.ВходнаяВыборка.ПодчиненныеЭлементы.ВходнаяВыборка1.ПодчиненныеЭлементы.ВходнаяВыборка1Группа7.Видимость=истина;
		Элементы.Результат.ПодчиненныеЭлементы.ВходнаяВыборка2.ПодчиненныеЭлементы.ВходнаяВыборка2Группа6.Видимость=Истина;
		Элементы.Результат.ПодчиненныеЭлементы.ВходнаяВыборка2.ПодчиненныеЭлементы.ВходнаяВыборка2Группа7.Видимость=Истина;
	ИначеЕсли Объект.КоличествоВыходов>=3 Тогда
		Элементы.ВходнаяВыборка.ПодчиненныеЭлементы.ВходнаяВыборка1.ПодчиненныеЭлементы.ВходнаяВыборка1Группа6.Видимость=истина;
		Элементы.ВходнаяВыборка.ПодчиненныеЭлементы.ВходнаяВыборка1.ПодчиненныеЭлементы.ВходнаяВыборка1Группа7.Видимость=истина;
		Элементы.ВходнаяВыборка.ПодчиненныеЭлементы.ВходнаяВыборка1.ПодчиненныеЭлементы.ВходнаяВыборка1Группа8.Видимость=истина;
		Элементы.Результат.ПодчиненныеЭлементы.ВходнаяВыборка2.ПодчиненныеЭлементы.ВходнаяВыборка2Группа6.Видимость=Истина;
		Элементы.Результат.ПодчиненныеЭлементы.ВходнаяВыборка2.ПодчиненныеЭлементы.ВходнаяВыборка2Группа7.Видимость=Истина;
		Элементы.Результат.ПодчиненныеЭлементы.ВходнаяВыборка2.ПодчиненныеЭлементы.ВходнаяВыборка2Группа8.Видимость=Истина;
	КонецЕсли;	

	
	
КонецПроцедуры	
	
&НаКлиенте
Процедура КоличествоВходовПриИзменении(Элемент)
	ПриИзмененииПараметровСети();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Объект.КоличествоВходов=2;
	Объект.КоличествоНейроновСкрытогоСлоя=15;
	Объект.КоличествоВыходов=1;
	ПриИзмененииПараметровСети();
	
	Объект.КоличествоИтераций=10000;
КонецПроцедуры

&НаКлиенте
Процедура КоличествоВыходовПриИзменении(Элемент)
	ПриИзмененииПараметровСети();

КонецПроцедуры

&НаСервере
Процедура ЗапуститьОбучениеНаСервере(АдресФайлСети,АдресФайлГраницы)

	Если Не значениеЗаполнено(Объект.ИмяФайлаГраницы) Тогда
		Сообщить("Не указан файл с границами.");
		Возврат;
	КонецЕсли;	
	
	Если Не значениеЗаполнено(Объект.ИмяФайлаГраницы) Тогда
		Сообщить("Не указан файл с обученной сетью.");
		Возврат;
	КонецЕсли;	
	
	Если Объект.ГраницыИнтервалов.Количество()=0 Тогда
		Сообщить("Не заполнены границы интервалов");
		Возврат;
	КонецЕсли;	

		тОбъект = РеквизитФормыВЗначение("Объект");

	
		//проводим нормализацию входов и выходов
		
	Для каждого стр из Объект.ВходнаяВыборка Цикл
		для н=1 по Объект.КоличествоВходов Цикл
		
		
		Если ЗначениеЗаполнено(стр["Вход"+СокрЛП(н)]) и Не значениеЗаполнено(тОбъект.ПолучитьМаксимум("Вход"+СокрЛП(н))) Тогда
			Сообщить("Не заполнен максимум в строке "+СокрЛП(н));
			Возврат;
		КонецЕсли;	
		
		стр["Вход"+СокрЛП(н)] = тОбъект.normalize(стр["Вход"+СокрЛП(н)+"Сигнал"],тОбъект.ПолучитьМинимум("Вход"+СокрЛП(н)),тОбъект.ПолучитьМаксимум("Вход"+СокрЛП(н)));
		
		
		
		КонецЦикла;
	КонецЦикла;	
	
		
	Для каждого стр из Объект.ВходнаяВыборка Цикл
		для н=1 по Объект.КоличествоВыходов Цикл
	
	
		Если ЗначениеЗаполнено(стр["ОжидаемыйВыход"+СокрЛП(н)]) и Не значениеЗаполнено(тОбъект.ПолучитьМаксимум("ОжидаемыйВыход"+СокрЛП(н))) Тогда
			Сообщить("Не заполнен максимум в строке "+СокрЛП(н));
			Возврат;
		КонецЕсли;	

		стр["ОжидаемыйВыход"+СокрЛП(н)] = тОбъект.normalize(стр["ОжидаемыйВыход"+СокрЛП(н)+"Сигнал"],тОбъект.ПолучитьМинимум("ОжидаемыйВыход"+СокрЛП(н)),тОбъект.ПолучитьМаксимум("ОжидаемыйВыход"+СокрЛП(н)));

	КонецЦикла;
	
	КонецЦикла;
		
	
	//создаем сеть
	Сеть = тОбъект.СоздатьСеть(Объект.КоличествоВходов,Объект.КоличествоНейроновСкрытогоСлоя,Объект.КоличествоВыходов);
	
    Для н = 1 по Объект.КоличествоИтераций Цикл
  
		Для каждого стр из Объект.ВходнаяВыборка Цикл
			   //вычисление на прямом проходе
    		   тОбъект.feedforward(сеть,стр);
			   //обучение
    		   тОбъект.ОбратноеРаспостранениеИОбучение(Сеть,стр);
    	КонецЦикла;
    КонецЦикла;	

	ИмяВременногоФайлаСеть = ПолучитьИмяВременногоФайла();
	ИмяВременногоФайлаГраницы = ПолучитьИмяВременногоФайла();
	
    ЗначениеВФайл(ИмяВременногоФайлаСеть,Сеть);
	ЗначениеВФайл(ИмяВременногоФайлаГраницы,Объект.ГраницыИнтервалов.Выгрузить());
	
	АдресФайлСети =    ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайлаСеть), УникальныйИдентификатор);
	АдресФайлГраницы =    ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайлаГраницы), УникальныйИдентификатор);

	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьОбучение(Команда)
	Перем АдресФайлСети,АдресФайлГраницы;
	ЗапуститьОбучениеНаСервере(АдресФайлСети,АдресФайлГраницы);
 	ПолучитьФайл(АдресФайлСети, Объект.ИмяФайлаСети);
	ПолучитьФайл(АдресФайлГраницы, Объект.ИмяФайлаГраницы);

КонецПроцедуры

&НаСервере
Процедура ПрогнозироватьНаСервере(АдресСети,АдресГраницы)
	Если Не значениеЗаполнено(Объект.ИмяФайлаГраницы) Тогда
		Сообщить("Не указан файл с границами. Обязательно введите их вручную");
	КонецЕсли;	
	
	Если Не значениеЗаполнено(Объект.ИмяФайлаГраницы) Тогда
		Сообщить("Не указан файл с обученной сетью.");
		Возврат;
	КонецЕсли;	

	тОбъект = РеквизитФормыВЗначение("Объект");

	
	ИмяВременногоФайлаГраницы = ПолучитьИмяВременногоФайла();


	ФайлИзХранилища = ПолучитьИзВременногоХранилища(Строка(АдресГраницы));
	ФайлИзХранилища.Записать(ИмяВременногоФайлаГраницы);

	
	ТабГраницы = ЗначениеИзФайла(ИмяВременногоФайлаГраницы);
	Объект.ГраницыИнтервалов.Загрузить(ТабГраницы);
	
	н = 0;
	Для каждого стр из Объект.ВходнаяВыборка1 Цикл
		для н=1 по Объект.КоличествоВходов Цикл

		Если ЗначениеЗаполнено(стр["Вход"+СокрЛП(н)]) и Не значениеЗаполнено(тОбъект.ПолучитьМаксимумП(ТабГраницы,"Вход"+СокрЛП(н))) Тогда
			Сообщить("Не заполнен максимум в строке "+СокрЛП(н));
			Возврат;
		КонецЕсли;	
		
		стр["Вход"+СокрЛП(н)] = тОбъект.normalize(стр["Вход"+СокрЛП(н)+"Сигнал"],тОбъект.ПолучитьМинимумП(ТабГраницы,"Вход"+СокрЛП(н)),тОбъект.ПолучитьМаксимумП(ТабГраницы,"Вход"+СокрЛП(н)));
		
		КонецЦикла;
	КонецЦикла;	

	
	ИмяВременногоФайлаСеть = ПолучитьИмяВременногоФайла();

	ФайлИзХранилища = ПолучитьИзВременногоХранилища(Строка(АдресСети));
    ФайлИзХранилища.Записать(ИмяВременногоФайлаСеть);

	
	Сеть = ЗначениеИзФайла(ИмяВременногоФайлаСеть);

	
	Для каждого стр из Объект.ВходнаяВыборка1 Цикл
	    тОбъект.feedforward(сеть,стр);
	   	Отбор = Новый Структура;
		Отбор.Вставить("Слой","Выходной");
    	ВыходныеСтроки = сеть.НайтиСтроки(Отбор);
		
		н = 0;
		Для каждого с из ВыходныеСтроки Цикл
			н = н+1;
			стр["ОжидаемыйВыход"+СокрЛП(н)] =  с.Нейрон.Выход;
			стр["ОжидаемыйВыход"+СокрЛП(н)+"Сигнал"] = тОбъект.deNormalize(стр["ОжидаемыйВыход"+СокрЛП(н)],тОбъект.ПолучитьМинимумП(ТабГраницы,"ОжидаемыйВыход"+СокрЛП(н)),тОбъект.ПолучитьМаксимумП(ТабГраницы,"ОжидаемыйВыход"+СокрЛП(н)));
		КонецЦикла;	
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура Пронозировать(Команда)
	Перем АдресХранищаСети, АдресХранищаГраницы;
	АдресХранищаСети     = ПоместитьВоВременноеХранилище(Объект.ИмяФайлаСети,);
	НачатьПомещениеФайла(,АдресХранищаСети,Объект.ИмяФайлаСети,ложь,);
	
	АдресХранищаГраницы     = ПоместитьВоВременноеХранилище(Объект.ИмяФайлаГраницы,);
	НачатьПомещениеФайла(,АдресХранищаГраницы,Объект.ИмяФайлаГраницы,ложь,);
	
	
	ПрогнозироватьНаСервере(АдресХранищаСети,АдресХранищаГраницы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПримеромЗапросаНаСервере()
	//Сюда можно подставить свой запрос или код. Заполнять надо колонки которые заканчиваются на "Сигнал"
	
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 30
		               |	Продажи.Период,
		               |	Продажи.КоличествоОборот КАК ОжидаемыйВыход1Сигнал,
		               |	ВЫБОР
		               |		КОГДА Продажи.КоличествоОборот > 0
		               |			ТОГДА Продажи.СуммаВыручкиОборот / Продажи.КоличествоОборот
		               |		ИНАЧЕ 0
		               |	КОНЕЦ КАК Вход1Сигнал,
		               |	ВЫБОР
		               |		КОГДА МЕСЯЦ(Продажи.Период) = 5
		               |				ИЛИ МЕСЯЦ(Продажи.Период) = 6
		               |				ИЛИ МЕСЯЦ(Продажи.Период) = 7
		               |				ИЛИ МЕСЯЦ(Продажи.Период) = 8
		               |			ТОГДА 1
		               |		ИНАЧЕ 0
		               |	КОНЕЦ КАК Вход2Сигнал
		               |ИЗ
		               |	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(&НачПериода, &КонПериода, Месяц, ) КАК Продажи";
		
	
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		Сообщить("Не заполнен текст запроса");
		Возврат;
	КонецЕсли;	
	
	З = Новый Запрос;
	З.Текст = ТекстЗапроса;
	З.УстановитьПараметр("НачПериода",Добавитьмесяц(ТекущаяДата(),-12));
	З.УстановитьПараметр("КонПериода",ТекущаяДата());
	
	Объект.ВходнаяВыборка.Загрузить(З.Выполнить().Выгрузить());

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПримеромЗапроса(Команда)
	ЗаполнитьПримеромЗапросаНаСервере();
КонецПроцедуры
