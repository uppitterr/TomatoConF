Функция ПолучитьСтруктуруРезультата()
	
	Возврат Новый Структура("Успешно, ИсходнаяСтрока, ОписаниеОшибки", Ложь, "", "")
	
КонецФункции

&НаСервереБезКонтекста
Функция ОбщийМодульСервер(Имя) Экспорт
	
	Возврат Вычислить(Имя);		
	
КонецФункции

&НаКлиенте
Функция ОбщийМодульКлиент(Имя) Экспорт
		
	Возврат Вычислить(Имя);	
	
КонецФункции
						   
&НаКлиенте
Процедура ПослеВыводаОшибки(ДопПараметры) Экспорт
	
	Если ДопПараметры.ЗакрыватьКонсоль Тогда
		ЗакрытьКонсоль();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиОшибку(Текст, ЗакрыватьКонсоль)
	
	ПоказатьПредупреждение(Новый ОписаниеОповещения("ПослеВыводаОшибки", ЭтаФорма, Новый Структура("ЗакрыватьКонсоль", ЗакрыватьКонсоль)), Текст);	
	
КонецПроцедуры

&НаКлиенте
Функция ИндексныйФайл()
	
	Возврат КаталогИсходников + Формат(ТекущаяУниверсальнаяДатаВМиллисекундах(), "ЧГ=0") + ".html";	
	
КонецФункции

&НаКлиенте
Процедура ПослеКопированияИндексногоФайла(СкопированныйФайл, ДопПараметры) Экспорт
	
	HTML = СкопированныйФайл;
	ИсходникиЗагружены = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиФайлаМакета(ДопПараметры) Экспорт
	
	Попытка
		Файл = Новый ЧтениеZipФайла(КаталогИсходников + "bsl_console.zip");
		Файл.ИзвлечьВсе(КаталогИсходников);
		Файл = Новый ЗаписьТекста(КаталогИсходников + ВерсияОбработки + ".ver");
		Файл.ЗаписатьСтроку(ТекущаяДата());
		Файл.Закрыть();
		ТочкаВхода = КаталогИсходников + "index.html";		
		ИндексныйФайл = ИндексныйФайл();		
		НачатьКопированиеФайла(Новый ОписаниеОповещения("ПослеКопированияИндексногоФайла", ЭтаФорма), ТочкаВхода, ИндексныйФайл);
	Исключение
		ВывестиОшибку("Не удалось извлечь исходники" + Символы.ПС + ОписаниеОшибки(), Истина);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУдаленияВременныхФайлов(ДопПараметры) Экспорт
	
	ИмяФайла = КаталогИсходников + "bsl_console.zip";
	ДанныеМакета = ПолучитьИзВременногоХранилища(АдресМакета);
	ДанныеМакета.НачатьЗапись(Новый ОписаниеОповещения("ПослеЗаписиФайлаМакета", ЭтаФорма), ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзвлечьИсходникиНаКлиенте()
	
	НачатьУдалениеФайлов(Новый ОписаниеОповещения("ПослеУдаленияВременныхФайлов", ЭтаФорма), КаталогИсходников, "*.*");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиСуществованияИндексногоФайла(Существует, ДопПараметры) Экспорт
	
	Если Существует Тогда		
		ИндексныйФайл = ИндексныйФайл();
		ТочкаВхода = КаталогИсходников + "index.html";		
		НачатьКопированиеФайла(Новый ОписаниеОповещения("ПослеКопированияИндексногоФайла", ЭтаФорма), ТочкаВхода, ИндексныйФайл);
	Иначе		
		ИзвлечьИсходникиНаКлиенте();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиСуществованияФайлаВерсии(Существует, ДопПараметры) Экспорт
	
	Если Существует Тогда	
		ФайлНаДиске = Новый Файл(КаталогИсходников + "index.html");
		ФайлНаДиске.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ПослеПроверкиСуществованияИндексногоФайла", ЭтаФорма));
	Иначе
		ИзвлечьИсходникиНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиСуществованияКаталога(Существует, ДопПараметры) Экспорт
	
	Если Существует Тогда		
		ФайлНаДиске = Новый Файл(КаталогИсходников + ВерсияОбработки + ".ver");
		ФайлНаДиске.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ПослеПроверкиСуществованияФайлаВерсии", ЭтаФорма));
	Иначе		
		ВывестиОшибку("Не удалось создать каталог для исходников", Истина);		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСозданияКаталога(ИмяКаталога, ДопПараметры) Экспорт
	
	ФайлНаДиске = Новый Файл(КаталогИсходников);
	ФайлНаДиске.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ПослеПроверкиСуществованияКаталога", ЭтаФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПолученииКаталогаВременныхФайлов(ИмяКаталога, ДопПараметры) Экспорт
	
	КаталогИсходников = ИмяКаталога + "bsl_console\";
	НачатьСозданиеКаталога(Новый ОписаниеОповещения("ПослеСозданияКаталога", ЭтаФорма), КаталогИсходников);
		
КонецПроцедуры

&НаКлиенте
Процедура ИзвлечьИсходники()
	
	Состояние("Инициализация...");
	#Если ВебКлиент Тогда
	HTML = "https://salexdv.github.io/bsl_console/src/index.html";
	ИсходникиЗагружены = Истина;
	#Иначе
	НачатьПолучениеКаталогаВременныхФайлов(Новый ОписаниеОповещения("ПриПолученииКаталогаВременныхФайлов", ЭтаФорма));	
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВозможностьюРедактирования()
	
	Элементы.ТолькоПросмотр.Пометка = НЕ ТолькоПросмотр;
	
	ДоступностьКнопок = НЕ ТолькоПросмотр И ДокументЗагружен;
	Элементы.КонструкторЗапроса.Доступность = ДоступностьКнопок;
	Элементы.ЗаменитьВхождения.Доступность = ДоступностьКнопок;	
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеЯзыкомПодсказок()
	
	Если АнглийскийЯзык Тогда
		Элементы.ЯзыкПодсказок.Заголовок = "Переключить подсказки на русский язык";
	Иначе
		Элементы.ЯзыкПодсказок.Заголовок = "Переключить подсказки на английский язык";
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция СкопироватьОбработкуНаСервер(АдресОбработки)

	ФайлОбработки = ПолучитьИмяВременногоФайла();
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресОбработки);
	ДвоичныеДанные.Записать(ФайлОбработки);
	
	Возврат ФайлОбработки;
	
КонецФункции

&НаКлиенте
Процедура ПроверкаЗагрузкиДокумента() Экспорт
	
	Если ДокументЗагружен Тогда
		ОтключитьОбработчикОжидания("ПроверкаЗагрузкиДокумента");
		ОбновитьМетаданные();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПолученияМетаданных(Результат, ДопПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
	
		Если Результат.Статус = "Выполнено" Тогда
			
			АдресМетаданных = Результат.АдресРезультата;
			
			Если ДокументЗагружен Тогда
				ОбновитьМетаданные();
			Иначе
				ПодключитьОбработчикОжидания("ПроверкаЗагрузкиДокумента", 1, Ложь);
			КонецЕсли;
			
		ИначеЕсли Результат.Статус = "Ошибка" Тогда
			
			ВывестиОшибку("Не удалось получить метаданные конфигурации:" + Символы.ПС + Результат.КраткоеПредставлениеОшибки + Символы.ПС + "Подсказка по метаданным будет недоступна.", Ложь);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НачатьПолучениеМетаданныхНаСервере(ПутьКОбработкеНаСервере)
			
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ИмяОбработки"		, ПутьКОбработкеНаСервере);
	ПараметрыЗадания.Вставить("ИмяМетода"			, "ЗаполнитьКоллекциюМетаданных");
	ПараметрыЗадания.Вставить("ПараметрыВыполнения"	, Неопределено);
	ПараметрыЗадания.Вставить("ЭтоВнешняяОбработка"	, Истина);
	
	Модуль = ОбщийМодульСервер("ДлительныеОперации");
	
	ПараметрыВыполнения = Модуль.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение метаданных конфигуркции'");
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.Вставить("ИдентификаторФормы", УникальныйИдентификатор); 		
	
	ВыполняемыйМетод = "ДлительныеОперации.ВыполнитьПроцедуруМодуляОбъектаОбработки";
	
	Возврат Модуль.ВыполнитьВФоне(ВыполняемыйМетод, ПараметрыЗадания, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура НачатьПолучениеМетаданных(ПутьКОбработкеНаСервере)
		
	Оповещение = Новый ОписаниеОповещения("ПроверкаПолученияМетаданных", ЭтотОбъект);
	
	ДлительнаяОперация = НачатьПолучениеМетаданныхНаСервере(ПутьКОбработкеНаСервере);
	
	Модуль = ОбщийМодульКлиент("ДлительныеОперацииКлиент");
	
	ПараметрыОжидания = Модуль.ПараметрыОжидания(ЭтотОбъект);	
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;	
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПроверкаПолученияМетаданных", ЭтотОбъект);
	Модуль.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеКопированияОбработки(ПомещенныеФайлы, ДопПараметры) Экспорт
	
	Если ПомещенныеФайлы <> Неопределено Тогда
		ПутьКОбработкеНаСервере = СкопироватьОбработкуНаСервер(ПомещенныеФайлы[0].Хранение);
		НачатьПолучениеМетаданных(ПутьКОбработкеНаСервере);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодключенияРасширенияДляРаботыСФайлами(Подключено, ДопПараметры) Экспорт
	
	Если Подключено Тогда
		
		Если ЕстьДлительныеОперации Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеКопированияОбработки", ЭтотОбъект);
	    	НачатьПомещениеФайлов(ОписаниеОповещения, ИмяФайлаОбработки, Ложь, ИдентификаторОбработки);
		КонецЕсли;
		
		УстановитьПометкуТемы("СветлаяТема");
		УправлениеВозможностьюРедактирования();
		УправлениеЯзыкомПодсказок();
		ИзвлечьИсходники();	
				
	Иначе
		
		#Если ВебКлиент Тогда
		Если ДопПараметры = Неопределено Тогда
			НачатьУстановкуРасширенияРаботыСФайлами(Новый ОписаниеОповещения("ПослеУстановкиРасширенияДляРаботыСФайлами", ЭтаФорма))	
		Иначе
			ПоказатьПредупреждение(, "К сожалению работа в веб-клиенте невозможна!");
		КонецЕсли;
		#КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУстановкиРасширенияДляРаботыСФайлами(ДопПараметры) Экспорт
	
	НачатьПодключениеРасширенияРаботыСФайлами(Новый ОписаниеОповещения("ПослеПодключенияРасширенияДляРаботыСФайлами", ЭтаФорма, Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	НачатьПодключениеРасширенияРаботыСФайлами(Новый ОписаниеОповещения("ПослеПодключенияРасширенияДляРаботыСФайлами", ЭтаФорма));	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуТемы(Тема)
	
	Для Каждого Элемент ИЗ Элементы.Тема.ПодчиненныеЭлементы Цикл		
		Элемент.Пометка = (Элемент.Имя = Тема);		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИмяТемы()
	
	ИмяТемы = Неопределено;
	
	Имена = Новый Соответствие();
	Имена.Вставить("СветлаяТема", "bsl-white");
	Имена.Вставить("ТемнаяТема", "bsl-dark");
	
	Для Каждого Элемент ИЗ Элементы.Тема.ПодчиненныеЭлементы Цикл				
		Если Элемент.Пометка Тогда
			ИмяТемы = Имена[Элемент.Имя];
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИмяТемы;
	
КонецФункции

&НаКлиенте
Процедура ПереключитьТему(Тема)
		
	Элементы.ПолеHTML.Документ.monaco.editor.setTheme(Тема);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеТемами(Команда)
	
	УстановитьПометкуТемы(Команда.Имя);
	ИмяТемы = ПолучитьИмяТемы();
	ПереключитьТему(ИмяТемы);
	
КонецПроцедуры

&НаКлиенте
Функция View()
	
	Возврат Элементы.ПолеHTML.Документ.defaultView;
	
КонецФункции

&НаКлиенте
Процедура УстановитьТекст(Текст, Позиция, УчитыватьОтступПервойСтроки)
	
	View().setText(Текст, Позиция, УчитыватьОтступПервойСтроки);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекст()
	
	Возврат View().getText();
	
КонецФункции

&НаКлиенте
Функция ОчиститьТекст()
	
	Возврат View().eraseText();
	
КонецФункции

&НаКлиенте
Процедура ПриЗакрытииКонструктораФорматнойСтроки(ФорматнаяСтрока, ДопПараметры) Экспорт
	
	Если ФорматнаяСтрока <> Неопределено Тогда	
		ФорматнаяСтрока = СтрЗаменить(ФорматнаяСтрока, "'", "");		
		ФорматнаяСтрока = """" + ФорматнаяСтрока + """";
		УстановитьТекст(ФорматнаяСтрока, ДопПараметры, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонструкторФорматнойСтроки(ФорматнаяСтрока, ДопПараметры)
	
	Конструктор = Новый КонструкторФорматнойСтроки();
	Попытка			
		Конструктор.Текст = ФорматнаяСтрока;
	Исключение
		Инфо = ИнформацияОбОшибке();
		ПоказатьПредупреждение(, "Ошибка в тексте форматной строки:" + Символы.ПС + Инфо.Причина.Описание);
		Возврат;
	КонецПопытки;
    Оповещение = Новый ОписаниеОповещения("ПриЗакрытииКонструктораФорматнойСтроки", ЭтаФорма, ДопПараметры);
    Конструктор.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСоздатьНовуюФорматнуюСтроку(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОткрытьКонструкторФорматнойСтроки("", Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВызватьКонструкторФорматнойСтроки(ПараметрыСтроки)
			
	Если ПараметрыСтроки = Неопределено Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ВопросСоздатьНовуюФорматнуюСтроку", ЭтаФорма), "Форматная строка не найдена." + Символы.ПС + "Создать новую форматную строку?", РежимДиалогаВопрос.ДаНет);
	Иначе
		ФорматнаяСтрока = СтрЗаменить(СтрЗаменить(ПараметрыСтроки.text, "|", ""), """", "");
		ОткрытьКонструкторФорматнойСтроки(ФорматнаяСтрока, ПараметрыСтроки.range);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииКонструктораЗапросов(Текст, ДопПараметры) Экспорт
	
	Если Текст <> Неопределено Тогда	
		Текст = СтрЗаменить(Текст, Символы.ПС, Символы.ПС + "|");		
		Текст = СтрЗаменить(Текст, """", """""");
		Текст = """" + Текст + """";
		УстановитьТекст(Текст, ДопПараметры, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонструкторЗапроса(Текст, ДопПараметры)
	
	Конструктор = Новый КонструкторЗапроса();
	Попытка			
		Конструктор.Текст = Текст;
	Исключение
		Инфо = ИнформацияОбОшибке();
		ПоказатьПредупреждение(, "Ошибка в тексте запроса:" + Символы.ПС + Инфо.Причина.Описание);
		Возврат;
	КонецПопытки;
    Оповещение = Новый ОписаниеОповещения("ПриЗакрытииКонструктораЗапросов", ЭтаФорма, ДопПараметры);
    Конструктор.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСоздатьНовыйЗапрос(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОткрытьКонструкторЗапроса("", Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПодготовитьТекстЗапроса(Текст)
	
	ТекстЗапроса = СтрЗаменить(Текст, "|", "");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """""", "$");	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """", "");	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "$", """");
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаКлиенте
Процедура ВызватьКонструкторЗапроса(ПараметрыЗапроса)
			
	Если ПараметрыЗапроса = Неопределено Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ВопросСоздатьНовыйЗапрос", ЭтаФорма), "Не найден текст запроса." + Символы.ПС + "Создать новый запрос?", РежимДиалогаВопрос.ДаНет);
	Иначе
		ТекстЗапроса = ПодготовитьТекстЗапроса(ПараметрыЗапроса.text);
		ОткрытьКонструкторЗапроса(ТекстЗапроса, ПараметрыЗапроса.range);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонструкторЗапроса(Команда)
		
	ВызватьКонструкторЗапроса(View().getQuery());
		
КонецПроцедуры

&НаКлиенте
Функция ВыполнитьКодНаКлиенте()
	
	РВК_6e6c2a08d0dd4a96929605d4601c3990 = ПолучитьСтруктуруРезультата();
	
	Попытка
		Выполнить(ПолучитьТекст());
		РВК_6e6c2a08d0dd4a96929605d4601c3990.Успешно = Истина;
	Исключение
		ОК_6e6c2a08d0dd4a96929605d4601c3990 = ИнформацияОбОшибке();		
		РВК_6e6c2a08d0dd4a96929605d4601c3990.ИсходнаяСтрока = ОК_6e6c2a08d0dd4a96929605d4601c3990.ИсходнаяСтрока;
		Если ОК_6e6c2a08d0dd4a96929605d4601c3990.Причина <> Неопределено Тогда
			РВК_6e6c2a08d0dd4a96929605d4601c3990.ОписаниеОшибки = ОК_6e6c2a08d0dd4a96929605d4601c3990.Причина.Описание;
		Иначе
			РВК_6e6c2a08d0dd4a96929605d4601c3990.ОписаниеОшибки = ОК_6e6c2a08d0dd4a96929605d4601c3990.Описание;
		КонецЕсли;
	КонецПопытки;
	
	Возврат РВК_6e6c2a08d0dd4a96929605d4601c3990;
	
КонецФункции

&НаКлиенте
Функция ПолучитьОшибку(ОписаниеОшибки)
	
	Ошибка = Новый Структура("ТекстОшибки, НомерСтроки, НомерКолонки", ОписаниеОшибки, 0, 1);
	
	ПозицияРазделителя = Найти(ОписаниеОшибки, ":");
	
	Если 0 < ПозицияРазделителя Тогда
				
		Ошибка.ТекстОшибки = СокрЛП(Сред(ОписаниеОшибки, ПозицияРазделителя + 1));
		
		СтрокаОшибки = Лев(ОписаниеОшибки, ПозицияРазделителя - 1);		
		СтрокаОшибки = СтрЗаменить(СтрокаОшибки, "{", "");
		СтрокаОшибки = СтрЗаменить(СтрокаОшибки, "(", "");
		СтрокаОшибки = СтрЗаменить(СтрокаОшибки, ")", "");
		СтрокаОшибки = СтрЗаменить(СтрокаОшибки, "}", "");
		
		Подстроки = СтрЗаменить(СтрокаОшибки, ",", Символы.ПС);
				
		Попытка
			Ошибка.НомерСтроки = Число(СтрПолучитьСтроку(Подстроки, 1));
		Исключение
			Ошибка.НомерСтроки = 0;
		КонецПопытки;
		
		Попытка
			Ошибка.НомерКолонки = Число(СтрПолучитьСтроку(Подстроки, 2));
		Исключение
			Ошибка.НомерКолонки = 1;
		КонецПопытки;
		
	КонецЕсли;	
	
	Возврат Ошибка;
	
КонецФункции

&НаКлиенте
Функция НайтиСтрокуВКоде(Строка)
	
	НомерСтроки = View().findText(Строка);
	
	Возврат НомерСтроки;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьРезультатВыполнения(Результат)
	
	Если НЕ Результат.Успешно Тогда
				
		Ошибка = ПолучитьОшибку(Результат.ОписаниеОшибки);
		
		НомерСтроки = Ошибка.НомерСтроки;
		НомерКолонки = Ошибка.НомерКолонки;
		
		Если НомерСтроки = 0 Тогда
			НомерСтроки = НайтиСтрокуВКоде(Результат.ИсходнаяСтрока);
		КонецЕсли;
		
		Сообщить(Ошибка.ТекстОшибки);
		
		Если 0 < НомерСтроки Тогда
			View().markError(НомерСтроки, НомерКолонки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНаКлиенте(Команда)
	
	Результат = ВыполнитьКодНаКлиенте();
	ОбработатьРезультатВыполнения(Результат);
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьКодНаСервере(Текст)
	
	РВС_6e6c2a08d0dd4a96929605d4601c3990 = ПолучитьСтруктуруРезультата();	
	
	Попытка
		Выполнить(Текст);
		РВС_6e6c2a08d0dd4a96929605d4601c3990.Успешно = Истина;
	Исключение
		ОС_6e6c2a08d0dd4a96929605d4601c3990 = ИнформацияОбОшибке();		
		РВС_6e6c2a08d0dd4a96929605d4601c3990.ИсходнаяСтрока = ОС_6e6c2a08d0dd4a96929605d4601c3990.ИсходнаяСтрока;
		Если ОС_6e6c2a08d0dd4a96929605d4601c3990.Причина <> Неопределено Тогда
			РВС_6e6c2a08d0dd4a96929605d4601c3990.ОписаниеОшибки = ОС_6e6c2a08d0dd4a96929605d4601c3990.Причина.Описание;
		Иначе
			РВС_6e6c2a08d0dd4a96929605d4601c3990.ОписаниеОшибки = ОС_6e6c2a08d0dd4a96929605d4601c3990.Описание;
		КонецЕсли;
	КонецПопытки;
	
	Возврат РВС_6e6c2a08d0dd4a96929605d4601c3990;	
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьНаСервере(Команда)
	
	Результат = ВыполнитьКодНаСервере(ПолучитьТекст());
	ОбработатьРезультатВыполнения(Результат);
	
КонецПроцедуры

&НаСервере
Функция ЭтотОбъект()
	
	Возврат РеквизитФормыВЗначение("Объект");
	
КонецФункции

&НаСервере
Функция ПолучитьМакет(ИмяМакета)
	
	Возврат ЭтотОбъект().ПолучитьМакет(ИмяМакета);
	
КонецФункции

&НаСервере
Функция ПолучитьТекстМакета(ИмяМакета)
	
	Макет = ПолучитьМакет(ИмяМакета);
	Возврат СтрЗаменить(Макет.ПолучитьТекст(), Символы.ПС, " ");	
	
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВерсияОбработки = ЭтотОбъект().СведенияОВнешнейОбработке().Версия;
	
	АдресМакета = ПоместитьВоВременноеХранилище(ПолучитьМакет("src"), Новый УникальныйИдентификатор());
		
	ЕстьДлительныеОперации = (Метаданные.ОбщиеМодули.Найти("ДлительныеОперации") <> Неопределено);	
		
	Если ЕстьДлительныеОперации Тогда			
		ИмяФайлаОбработки = ЭтотОбъект().ИспользуемоеИмяФайла;
		ИдентификаторОбработки = Новый УникальныйИдентификатор();
	Иначе
		АдресМетаданных = ЭтотОбъект().ЗаполнитьКоллекциюМетаданных();
	КонецЕсли;
	
	БыстрыеПодсказки = Истина;
	ВидимостьКартыКода = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУдаленияФайлМетаданных(ДопПараметры) Экспорт
	
	АдресМетаданных = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьМетаданные()
	
	#Если ВебКлиент Тогда
	Если НЕ ВебДокументДоступен() Тогда
		Возврат;	
	КонецЕсли;
	#КонецЕсли

	Состояние("Обновление метаданных...");
	
	КоллекцияМетаданных = ПолучитьИзВременногоХранилища(АдресМетаданных);
	
	Если КоллекцияМетаданных <> Неопределено Тогда
	
		Результат = View().updateMetadata(КоллекцияМетаданных);
		
		Если ТипЗнч(Результат) <> Тип("Булево") Тогда
			ВывестиОшибку("Не удалось обновить метаданные: " + Символы.ПС + Результат.errorDescription, Ложь);
		КонецЕсли;
		
	Иначе
		
		ВывестиОшибку("Не удалось получить метаданные", Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АктивироватьДополнительныеФункции()
	
	Элементы.КонструкторЗапроса.Доступность = Истина;
	Элементы.ЗагрузитьИзФайла.Доступность = Истина;
	Элементы.СохранитьВФайл.Доступность = Истина;
	Элементы.ЗаменитьВхождения.Доступность = Истина;
	Элементы.ТолькоПросмотр.Доступность = Истина;
	Элементы.БыстрыеПодсказки.Доступность = Истина;
	Элементы.ПодсвечиватьЗапросы.Доступность = Истина;
	Элементы.КартаКода.Доступность = Истина;
	Элементы.Примеры.Доступность = Истина;	
	Элементы.КонструкторЗапроса.Доступность = Истина;
	Элементы.Тема.Доступность = Истина;	
	Элементы.ВыполнитьНаКлиенте.Доступность = Истина;
	Элементы.ВыполнитьНаСервере.Доступность = Истина;
	
	УправлениеБыстрымиПодсказками();
	УправлениеВидимостьюКартыКода();
	
КонецПроцедуры

&НаКлиенте
Функция ВебДокументДоступен()
		
	Если Элементы.ПолеHTML.Документ <> Неопределено И Элементы.ПолеHTML.Документ.defaultView <> Неопределено Тогда
		Попытка
			ПолучитьТекст();
			Возврат Истина
		Исключение
			Возврат Ложь;
		КонецПопытки;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ИнициализацияРедактора()
	
	Инфо = Новый СистемнаяИнформация();
	View().init(Инфо.ВерсияПриложения);
	
КонецПроцедуры

&НаКлиенте
Процедура HTMLДокументСформирован(Элемент)
		
	Если ИсходникиЗагружены Тогда
		
		ДокументЗагружен = Истина;		
				
		#Если ВебКлиент Тогда
		Если ВебДокументДоступен() Тогда
			ИнициализацияРедактора();
			АктивироватьДополнительныеФункции();
		Иначе
			ПоказатьПредупреждение(, "К сожалению, в веб-клиенте недоступны практически все функции.
			|Вы можете посмотреть только работу автодополнения и подсказок параметров при наборе кода.");
		КонецЕсли;
		#Иначе
		ИнициализацияРедактора();
		АктивироватьДополнительныеФункции();
		#КонецЕсли
			
		Если НЕ ЕстьДлительныеОперации Тогда
			ОбновитьМетаданные();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореФайлаДляСохранения(ВыбранныеФайлы, ДопПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		Текст = СтрЗаменить(Текст, "\n", Символы.ПС);
		Файл = Новый ЗаписьТекста(ВыбранныеФайлы[0], КодировкаТекста.UTF8, "", Ложь, "");
		Файл.ЗаписатьСтроку(ПолучитьТекст());
		Файл.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗавершенииЧтенияФайлаСКодом(ДопПараметры) Экспорт
	
	ОчиститьТекст();
	УстановитьТекст(ДопПараметры.ПолучитьТекст(), Неопределено, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореФайлаДляЗагрузки(ВыбранныеФайлы, ДопПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		Файл = Новый ТекстовыйДокумент();
		Файл.НачатьЧтение(Новый ОписаниеОповещения("ПриЗавершенииЧтенияФайлаСКодом", ЭтаФорма, Файл), ВыбранныеФайлы[0], КодировкаТекста.UTF8);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьКод()
	
	Возврат ЗначениеЗаполнено(СтрЗаменить(СокрЛП(ПолучитьТекст()), Символы.ПС, ""));
	
КонецФункции

&НаКлиенте
Процедура СохранитьВФайл(Команда)
		
	Если ЕстьКод() Тогда
		ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ДиалогВыбора.Фильтр = "BSL|*.bsl";
		ДиалогВыбора.Показать(Новый ОписаниеОповещения("ПриВыбореФайлаДляСохранения", ЭтаФорма));
	Иначе
		ПоказатьПредупреждение(, "Нет кода для сохранения!");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКодИзФайла()
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбора.Фильтр = "BSL|*.bsl";	
	ДиалогВыбора.Показать(Новый ОписаниеОповещения("ПриВыбореФайлаДляЗагрузки", ЭтаФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаменыКодомИзФайла(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗагрузитьКодИзФайла();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	Если ЕстьКод() Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ВопросЗаменыКодомИзФайла", ЭтаФорма), "При загрузке из файла текущий код будет заменен. Всё равно продолжить?", РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗагрузитьКодИзФайла();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРедактора(Команда)
	
	View().editor.trigger("", Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьВхождения(Команда)
	
	КомандаРедактора("editor.action.changeAll");
	
КонецПроцедуры

&НаКлиенте
Процедура HTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	Если НЕ ТолькоПросмотр Тогда
	
		Событие = ДанныеСобытия.Event.eventData1C;
		
		Если Событие <> Неопределено Тогда
					
			Если Событие.event = "EVENT_QUERY_CONSTRUCT" Тогда
				ВызватьКонструкторЗапроса(Событие.params);
			ИначеЕсли Событие.event = "EVENT_FORMAT_CONSTRUCT" Тогда
				ВызватьКонструкторФорматнойСтроки(Событие.params);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоПросмотр(Команда)
	
	ТолькоПросмотр = НЕ ТолькоПросмотр;
	View().setReadOnly(ТолькоПросмотр);
	УправлениеВозможностьюРедактирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПользовательскиеФункции()
	
	СтрокаJSON = ПолучитьТекстМакета("ПользовательскиеФункции");
	Результат = View().updateCustomFunctions(СтрокаJSON);
	
	Если ТипЗнч(Результат) = Тип("Булево") Тогда
		Сообщить("Пользовательские функции успешно загружены!", СтатусСообщения.Информация);
	Иначе
		ВывестиОшибку("Не удалось загрузкить пользовательские функции: " + Символы.ПС + Результат.errorDescription, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПользовательскиеСниппеты(Команда)
	
	СтрокаJSON = ПолучитьТекстМакета("ПользовательскиеСниппеты");
	Результат = View().updateSnippets(СтрокаJSON);
	
	Если ТипЗнч(Результат) = Тип("Булево") Тогда
		Сообщить("Пользовательские сниппеты успешно загружены!", СтатусСообщения.Информация);
	Иначе
		ВывестиОшибку("Не удалось загрузить сниппеты: " + Символы.ПС + Результат.errorDescription, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЯзыкПодсказок(Команда)
	
	View().switchLang();
	АнглийскийЯзык = НЕ АнглийскийЯзык;
	УправлениеЯзыкомПодсказок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУдаленияИндексногоФайла(ДопПараметры) Экспорт
	
	ИндексныйФайл = "";
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьКонсоль()
		
	Если ЗначениеЗаполнено(ИндексныйФайл) Тогда
		НачатьУдалениеФайлов(Новый ОписаниеОповещения("ПослеУдаленияИндексногоФайла", ЭтаФорма), ИндексныйФайл);
	Иначе
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	#Если НЕ ВебКлиент Тогда
	
	Если ЗавершениеРаботы = Неопределено ИЛИ НЕ ЗавершениеРаботы Тогда
	
		Если ЗначениеЗаполнено(ИндексныйФайл) Тогда
			Отказ = Истина;
			ЗакрытьКонсоль();
		КонецЕсли;
		
	Иначе
		
		ЗакрытьКонсоль();
		
	КонецЕсли;
	
	#КонецЕсли
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПользовательскиеОбъекты()
	
	Объекты = Неопределено;
	
	Если Метаданные.Справочники.Количество() <> 0 И Метаданные.Документы.Количество() <> 0 Тогда
		
		Объекты = Новый Структура();
		
		// Первый объект назовём "_СтруктураВыгрузки", у него будет 3 реквизита.
		// Реквизит "Номенклатура" будет ссылаться на соответствующий справочник,
		// если он есть, или на первый попавшийся справочник
		ПользовательскийОбъект = Новый Структура("properties", Новый Структура());
		
		Справочник = Метаданные.Справочники.Найти("Номенклатура");
		Если Справочник = Неопределено Тогда
			Справочник = Метаданные.Справочники.Получить(0);
		КонецЕсли;
		
		// Ссылка на объект указывается как catalogs.ИмяСправочника или documents.ИмяДокумента
		// catalogs и documents - соответственно имена объектов, хранящих описание метаданных в файле bslMetadata.js
		// В модуле объекта есть функция ПолучитьСвязьСОбъектомМетаданных(Реквизит), которая принимает реквизит
		// Её достаточно просто модифицировать, чтобы она принимала, например, тип и сразу отдавала связь в нужном виде
		
		ПользовательскийОбъект.properties.Вставить("Номенклатура", Новый Структура("name, ref", "Элемент номенклатуры", "catalogs." + Справочник.Имя));
		ПользовательскийОбъект.properties.Вставить("Цена", Новый Структура("name", "Цена товара"));
		ПользовательскийОбъект.properties.Вставить("Остаток", Новый Структура("name", "Остаток товара на складе"));
		
		Объекты.Вставить("_СтруктураВыгрузки", ПользовательскийОбъект);
		
		// Второй объект будет называться "_Партия", у него будет 3 реквизита,
		// два из которых "ПриходнаяНакладная" и "Номенклатура" будут ссылаться
		// на документ и справочник соотвественно
		ПользовательскийОбъект = Новый Структура("properties", Новый Структура());
		
		Документ = Метаданные.Документы.Найти("ПоступлениеТоваровУслуг");
		Если Документ = Неопределено Тогда
			Документ = Метаданные.Документы.Найти("ПоступлениеТоваров");
			Если Документ = Неопределено Тогда
				Документ = Метаданные.Документы.Получить(0);
			КонецЕсли;
		КонецЕсли;
		
		ПользовательскийОбъект.properties.Вставить("ПриходнаяНакладная", Новый Структура("name, ref", "Документ закупки", "documents." + Документ.Имя));
		ПользовательскийОбъект.properties.Вставить("Номенклатура", Новый Структура("name, ref", "Элемент номенклатуры", "catalogs." + Справочник.Имя));
		ПользовательскийОбъект.properties.Вставить("Цена", Новый Структура("name", "Закупочная цена"));
		
		Объекты.Вставить("_Партия", ПользовательскийОбъект);
		
		// Теперь загоняем наши объекты в JSON-строку
		Файл = Новый ЗаписьJSON();
		Файл.УстановитьСтроку();
		Попытка
			ЗаписатьJSON(Файл, Новый Структура("customObjects", Объекты));
			Объекты = Файл.Закрыть();
		Исключение
			Сообщить("Не удалось сохранить пользовательские объекты:" + Символы.ПС + ОписаниеОшибки());
			Объекты = Неопределено;
		КонецПопытки;		
		
	КонецЕсли;
	
	Возврат Объекты;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьПользовательскиеОбъекты(Команда)
	
	Объекты = ПолучитьПользовательскиеОбъекты();
	
	Если Объекты <> Неопределено Тогда
		
		Результат = View().updateMetadata(Объекты);
		
		Если ТипЗнч(Результат) = Тип("Булево") Тогда
			Сообщить("Пользовательские объекты успешно загружены!", СтатусСообщения.Информация);	
		Иначе
			ВывестиОшибку("Не удалось загрузить пользовательские объекты: " + Символы.ПС + Результат.errorDescription, Ложь);
		КонецЕсли;
		
	Иначе
		
		ВывестиОшибку("Не удалось получить пользовательские объекты, видимо в конфигурации нет справочников или документов", Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеБыстрымиПодсказками()
	
	Элементы.БыстрыеПодсказки.Пометка = БыстрыеПодсказки;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеПодсказки(Команда)
	
	БыстрыеПодсказки = НЕ БыстрыеПодсказки;
	View().enableQuickSuggestions(БыстрыеПодсказки);
	УправлениеБыстрымиПодсказками();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодсвечиватьЗапросы(Команда)
	
	ПодсвечиватьЗапросы = НЕ ПодсвечиватьЗапросы;
	Элементы.ПодсвечиватьЗапросы.Пометка = ПодсвечиватьЗапросы;
	ИмяТемы = ПолучитьИмяТемы() + ?(ПодсвечиватьЗапросы, "-query", "");
	ПереключитьТему(ИмяТемы);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостьюКартыКода()
	
	Элементы.КартаКода.Пометка = ВидимостьКартыКода;
	
КонецПроцедуры

&НаКлиенте
Процедура КартаКода(Команда)
	
	ВидимостьКартыКода = НЕ ВидимостьКартыКода;
	View().minimap(ВидимостьКартыКода);
	УправлениеВидимостьюКартыКода();
	
КонецПроцедуры
