// Документация:
// https://cloud.yandex.ru/docs/vision/quickstart

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    // Заполним по умолчанию +    
    
    // Получается POST запросом к https://iam.api.cloud.yandex.net/iam/v1/tokens
    ////POST /iam/v1/tokens HTTP/1.1
    ////Host: iam.api.cloud.yandex.net
    ////Content-Type: application/json
    ////    {"yandexPassportOauthToken": "Your OAuth token"}
    Токен   = "";
    
    // https://cloud.yandex.ru/docs/resource-manager/operations/folder/get-id 
    Каталог = "";
    
    // Заполним по умолчанию -    
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура Распознать(Команда)
    Если ПустаяСтрока(Токен) Тогда
        Сообщение       = Новый СообщениеПользователю;
        Сообщение.Текст = "Не заполнен токен.";
        Сообщение.Поле  = "Токен"; 
        Сообщение.УстановитьДанные(ЭтотОбъект);
        Сообщение.Сообщить();
        Возврат;
    КонецЕсли;
    оо  = Новый ОписаниеОповещения("ФайлПолучен", ЭтаФорма); 
    НачатьПомещениеФайла(оо);  
КонецПроцедуры // Распознать()

&НаКлиенте
Процедура ФайлПолучен(Получен, Адрес, ПомещаемыйФайл, ДополнительныеПараметры) Экспорт
    Если Не Получен Тогда Возврат КонецЕсли;
    РаспознатьКартинку(Адрес, Токен, Каталог, Картинка, Результат);        
КонецПроцедуры // ФайлПолучен()

&НаСервереБезКонтекста
Функция РаспознатьКартинку(Знач Адрес, Знач Токен, Знач Каталог, Картинка, Результат)
    дд          = ПолучитьИзВременногоХранилища(Адрес);
    Картинка    = Base64Строка(дд);
    Соединение  = Новый HTTPСоединение("vision.api.cloud.yandex.net", 443,,,,, Новый ЗащищенноеСоединениеOpenSSL());
    Заголовки   = Новый Соответствие;
    Заголовки.Вставить("Content-Type", "application/json");
    Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));
    Запрос      = Новый HTTPЗапрос("/vision/v1/batchAnalyze", Заголовки);
    КодыЯзыков  = Новый Массив;
    КодыЯзыков.Добавить("ru");
    КодыЯзыков.Добавить("en");    
    Опции       = Новый Массив;
    Опции.Добавить(Новый Структура("type,text_detection_config"
                , "TEXT_DETECTION"
                , Новый Структура("language_codes", КодыЯзыков)));
    НаОбработку = Новый Массив;
    НаОбработку.Добавить(Новый Структура("content,features"
                , СтрЗаменить(СтрЗаменить(Картинка, Символы.ПС, ""), Символы.ВК, "") 
                , Опции));
    Тело        = Новый Структура("folderId,analyze_specs"
                , Каталог
                , НаОбработку);
    Запрос.УстановитьТелоИзСтроки(СериализоватьJSON(Тело), КодировкаТекста.UTF8);
    Попытка
        Ответ   = Соединение.ОтправитьДляОбработки(Запрос);
        Если Ответ.КодСостояния <> 200 Тогда
            ВызватьИсключение "Код ответа: " + Ответ.КодСостояния;
        КонецЕсли;
    Исключение
        ВызватьИсключение СтрШаблон("При запросе к Yandex API возникла ошибка:
                                    | %1", ОписаниеОшибки());        
    КонецПопытки;
    Результат   = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
    Структура   = ДесериализоватьJSON(Результат);    
    Возврат Структура;    
КонецФункции // РаспознатьКартинку()

&НаСервереБезКонтекста
Функция СериализоватьJSON(Данные)
    ЗаписьJSON                                              = Новый ЗаписьJSON;
    ЗаписьJSON.УстановитьСтроку();
    НастройкиСериализации                                   = Новый НастройкиСериализацииJSON();
    НастройкиСериализации.СериализовыватьМассивыКакОбъекты  = Ложь;
	НастройкиСериализации.ФорматСериализацииДаты            = ФорматДатыJSON.ISO;
	НастройкиСериализации.ВариантЗаписиДаты                 = ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением;	
    ЗаписатьJSON(ЗаписьJSON, Данные, НастройкиСериализации);
    Возврат ЗаписьJSON.Закрыть();
КонецФункции // СериализоватьJSON()
//************************************************************
&НаСервереБезКонтекста
Функция ДесериализоватьJSON(СтрокаJSON) Экспорт
	ЧтениеJSON	= Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	Возврат ПрочитатьJSON(ЧтениеJSON);
КонецФункции // ДесериализоватьJSON()


